[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    archiveName \u003d \u0027itrackpro.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u0027site-name\u0027: \u0027iTrack Pro\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-T09-2/main.git\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.InventorySystemStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.JsonInventorySystemStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing InventorySystem ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystemStorage addressBookStorage \u003d new JsonInventorySystemStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Optional\u003cReadOnlyInventorySystem\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ReadOnlyInventorySystem initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample InventorySystem\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty InventorySystem\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            initialData \u003d new InventorySystem();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InventorySystem\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            initialData \u003d new InventorySystem();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Starts logging information"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param config configuration"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InventorySystem\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.info(\"Starting InventorySystem \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 15,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The customer index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d customers listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX \u003d \"The product index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_PRODUCTS_LISTED_OVERVIEW \u003d \"%1$d products listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \"The transaction index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 10,
      "junhaotan": 2,
      "YingxuH": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns the InventorySystem."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    ReadOnlyInventorySystem getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of products */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of transactions */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 46,
      "junhaotan": 2,
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.InventorySystemParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final InventorySystemParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        addressBookParser \u003d new InventorySystemParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ReadOnlyInventorySystem getAddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return model.getFilteredProductList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 72,
      "junhaotan": 3,
      "YingxuH": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/AddCustomerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Adds a customer to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addc\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New customer added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This customer already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final Customer toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Creates an AddCustomerCommand to add the specified {@code Customer}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public AddCustomerCommand(Customer customer) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        toAdd \u003d customer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof AddCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCustomerCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "junhaotan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/ClearCustomerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ClearCustomerCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Customer list has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.setAddressBook(new InventorySystem(), COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 17,
      "junhaotan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/DeleteCustomerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Deletes a customer identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class DeleteCustomerCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletec\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \": Deletes the customer identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Customer: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public DeleteCustomerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.deletePerson(customerToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, customerToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof DeleteCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCustomerCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "junhaotan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/EditCustomerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Edits the details of an existing customer in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editc\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the customer identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"by the index number used in the displayed customer list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Customer: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This customer already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param index of the customer in the filtered customer list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param editPersonDescriptor details to edit the customer with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d createEditedPerson(customerToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!customerToEdit.isSamePerson(editedCustomer) \u0026\u0026 model.hasPerson(editedCustomer)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.setPerson(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Creates and returns a {@code Customer} with the details of {@code customerToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static Customer createEditedPerson(Customer customerToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assert customerToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(customerToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(customerToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(customerToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(customerToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(customerToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new Customer(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!(other instanceof EditCustomerCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand e \u003d (EditCustomerCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Stores the details to edit the customer with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * corresponding field value of the customer."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 190,
      "junhaotan": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/FindCustomerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class FindCustomerCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose attributes (n/ for name, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"a/ for address, p/ for phone number, e/ for email address) contain any of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"Parameters: n/ KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/ alice bob charlie, \" + COMMAND_WORD + \" a/ serangoon yishun\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final Predicate\u003cCustomer\u003e predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public FindCustomerCommand(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (model.getFilteredCustomerList().size() \u003d\u003d 0 \u0026\u0026 predicate instanceof NameContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (predicate.toString().trim().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                return new CommandResult(\"Please enter at least one keyword!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new CommandResult(String.format(\"No customer named %s found!\", predicate.toString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (model.getFilteredCustomerList().size() \u003d\u003d 0"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 predicate instanceof AddressContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new CommandResult(String.format(\"No customer staying in the area %s found!\", predicate.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (model.getFilteredCustomerList().size() \u003d\u003d 0 \u0026\u0026 predicate instanceof EmailContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new CommandResult(String.format(\"No customer with email %s found!\", predicate.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (model.getFilteredCustomerList().size() \u003d\u003d 0 \u0026\u0026 predicate instanceof PhoneContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new CommandResult(String.format(\"No customer with phone number %s found!\", predicate.toString()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredCustomerList().size()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof FindCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCustomerCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/ListCustomerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Lists all customers in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ListCustomerCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all customers\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"There are no customers in the list!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (model.getFilteredCustomerList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/AddProductCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Adds a product to the product list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a product to the product list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_SALES + \"SALES] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_DESCRIPTION + \"iphone \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_PRICE + \"1000 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_QUANTITY + \"10 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_SALES + \"100 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New product added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"This product already exists in the product list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Product toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Creates an AddProductCommand to add the specified {@code Product}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public AddProductCommand(Product product) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        toAdd \u003d product;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (model.hasProduct(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.addProduct(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof AddProductCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProductCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/ClearProductCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Clears the product list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ClearProductCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearp\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Product list has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.setAddressBook(new InventorySystem(), COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 25,
      "junhaotan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/DeleteProductCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Deletes a product identified using it\u0027s displayed index from the product list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DeleteProductCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletep\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \": Deletes the product identified by the index number used in the displayed product list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DELETE_PRODUCT_SUCCESS \u003d \"Deleted Product: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DeleteProductCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.deleteProduct(productToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PRODUCT_SUCCESS, productToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof DeleteProductCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteProductCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 52,
      "YingxuH": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/EditProductCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PRODUCTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Edits the details of an existing product in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editp\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the product identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"by the index number used in the displayed product list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_SALES + \"SALES] \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Black watch \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_EDIT_PRODUCT_SUCCESS \u003d \"Edited Product: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"This product already exists in the product list.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final EditProductDescriptor editProductDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param index of the product in the filtered product list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editProductDescriptor details to edit the product with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductCommand(Index index, EditProductDescriptor editProductDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(editProductDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.editProductDescriptor \u003d new EditProductDescriptor(editProductDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d createEditedProduct(productToEdit, editProductDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!productToEdit.isSameProduct(editedProduct) \u0026\u0026 model.hasProduct(editedProduct)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.setProduct(productToEdit, editedProduct);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Creates and returns a {@code Product} with the details of {@code productToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * edited with {@code editProductDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static Product createEditedProduct(Product productToEdit, EditProductDescriptor editProductDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assert productToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Description updatedDescription \u003d editProductDescriptor.getDescription().orElse(productToEdit.getDescription());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Price updatedPrice \u003d editProductDescriptor.getPrice().orElse(productToEdit.getPrice());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Quantity updatedQuantity \u003d editProductDescriptor.getQuantity().orElse(productToEdit.getQuantity());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Sales updatedSales \u003d editProductDescriptor.getSales().orElse(productToEdit.getSales());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        System.out.println(\"createEditedProduct \" + productToEdit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Product(updatedDescription, updatedPrice, updatedQuantity, updatedSales);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!(other instanceof EditProductCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand e \u003d (EditProductCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 editProductDescriptor.equals(e.editProductDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Stores the details to edit the product with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * corresponding field value of the product."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static class EditProductDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private Sales sales;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public EditProductDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public EditProductDescriptor(EditProductDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setSales(toCopy.sales);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, price, quantity, sales);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setSales(Sales sales) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.sales \u003d sales;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cSales\u003e getSales() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(sales);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (!(other instanceof EditProductDescriptor)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            EditProductDescriptor e \u003d (EditProductDescriptor) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getSales().equals(e.getSales());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 198,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/FindProductCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Finds and lists all products in product list whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class FindProductCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findp\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose descriptions contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public FindProductCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        System.out.println(\"Find \" + model.getFilteredProductList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                String.format(Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW, model.getFilteredProductList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof FindProductCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindProductCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/ListProductCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PRODUCTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Lists all products in the product list to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ListProductCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listp\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all products\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        System.out.println(\"List \" + model.getFilteredProductList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/AddTransactionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANS_DESCIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionFactory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Adds a transaction to the system."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddTransactionCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": add a transaction to the application. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_PRODUCT + \"PRODUCT] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_MONEY + \"MONEY] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_TRANS_DESCIPTION + \"DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CUSTOMER + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRODUCT + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_DATETIME + \"2020-02-20 10:00 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_QUANTITY + \"30 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_MONEY + \"30 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_TRANS_DESCIPTION + \"under discount \";;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New transaction added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"This transaction already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final TransactionFactory transactionFactory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public AddTransactionCommand(TransactionFactory transactionFactory) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(transactionFactory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.transactionFactory \u003d transactionFactory;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction toAdd \u003d transactionFactory.createTransaction(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (model.hasTransaction(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.addTransaction(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/ClearTransactionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Clears the transaction list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ClearTransactionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cleart\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transaction list has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.setAddressBook(new InventorySystem(), COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/DeleteTransactionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Deletes a transaction identified using it\u0027s displayed index from the transaction list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeleteTransactionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \": Deletes the transaction identified by the index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Transaction: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeleteTransactionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof DeleteTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTransactionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/EditTransactionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANS_DESCIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Money;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Edits the details of an existing transaction in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class EditTransactionCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the transaction identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_PRODUCT + \"PRODUCT] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_MONEY + \"MONEY] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_TRANS_DESCIPTION + \"DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CUSTOMER + \"Bob \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRODUCT + \"WaterMelon \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_DATETIME + \"2020-02-20 10:00 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_QUANTITY + \"30 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_MONEY + \"30 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_TRANS_DESCIPTION + \"under discount \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_EDIT_TRANSACTION_SUCCESS \u003d \"Edited Transaction: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \"This transaction already exists in the transaction list.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param index of the transaction in the filtered transaction list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param editTransactionDescriptor details to edit the transaction with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionCommand(Index index, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(editTransactionDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.editTransactionDescriptor \u003d new EditTransactionDescriptor(editTransactionDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction transactionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction editedTransaction \u003d createEditedTransaction(transactionToEdit, editTransactionDescriptor, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!transactionToEdit.isSameTransaction(editedTransaction) \u0026\u0026 model.hasTransaction(editedTransaction)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.setTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static Transaction createEditedTransaction(Transaction transactionToEdit,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                                       EditTransactionDescriptor editTransactionDescriptor,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                                       Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assert transactionToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Customer updatedCustomer;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (editTransactionDescriptor.getCustomerIndex().isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Index updatedCustomerIndex \u003d editTransactionDescriptor.getCustomerIndex().get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            updatedCustomer \u003d model.getFilteredCustomerList().get(updatedCustomerIndex.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            updatedCustomer \u003d transactionToEdit.getCustomer();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product updatedProduct;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (editTransactionDescriptor.getProductIndex().isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Index updatedProductIndex \u003d editTransactionDescriptor.getProductIndex().get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            updatedProduct \u003d model.getFilteredProductList().get(updatedProductIndex.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            updatedProduct \u003d transactionToEdit.getProduct();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        DateTime updatedDateTime \u003d editTransactionDescriptor.getDateTime().orElse(transactionToEdit.getDateTime());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Quantity updatedQuantity \u003d editTransactionDescriptor.getQuantity().orElse(transactionToEdit.getQuantity());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money updatedMoney \u003d editTransactionDescriptor.getMoney().orElse(transactionToEdit.getMoney());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Description updatedDescription \u003d editTransactionDescriptor.getDescription()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .orElse(transactionToEdit.getDescription());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Transaction(updatedCustomer, updatedProduct,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                updatedDateTime, updatedQuantity, updatedMoney, updatedDescription);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof EditTransactionCommand)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditTransactionCommand e \u003d (EditTransactionCommand) other;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 editTransactionDescriptor.equals(e.editTransactionDescriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Stores the details to edit the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static class EditTransactionDescriptor {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Index customerIndex;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Index productIndex;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private DateTime dateTime;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Money money;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public EditTransactionDescriptor() {}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public EditTransactionDescriptor(EditTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setCustomerIndex(toCopy.customerIndex);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setProductIndex(toCopy.productIndex);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setMoney(toCopy.money);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return CollectionUtil.isAnyNonNull(customerIndex, productIndex, dateTime, quantity,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    money, description);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setCustomerIndex(Index customer) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.customerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setProductIndex(Index product) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.productIndex \u003d productIndex;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setDateTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setMoney(Money money) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.money \u003d money;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cIndex\u003e getCustomerIndex() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(customerIndex);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cIndex\u003e getProductIndex() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(productIndex);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cMoney\u003e getMoney() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(money);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (!(other instanceof EditTransactionDescriptor)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            EditTransactionDescriptor e \u003d (EditTransactionDescriptor) other;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return getCustomerIndex().equals(e.getCustomerIndex())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getProductIndex().equals(e.getProductIndex())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getMoney().equals(e.getMoney())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 257
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/FindTransactionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Finds and lists all transactions in transaction list whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class FindTransactionCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose descriptions contain any of \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"At least one field must be present in the command. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_PRODUCT + \"PRODUCT] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CUSTOMER + \"Bob \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRODUCT + \"WaterMelon \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_DATETIME + \"2020-02-20 10:00 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Predicate\u003cTransaction\u003e predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public FindTransactionCommand(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        System.out.println(\"Find \" + model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof FindTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTransactionCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/ListTransactionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Lists all transactions in the application to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ListTransactionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        System.out.println(\"List \" + model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /* Prefix definitions for customer */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /* Prefix definitions for product */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_SALES \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /* Prefix definitions for transactions */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_MONEY \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_TRANS_DESCIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7,
      "-": 14,
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InventorySystemParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ClearCustomerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.FindCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ListCustomerCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.AddProductCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.ClearProductCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.FindProductCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.ListProductCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.ClearTransactionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.FindTransactionCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.ListTransactionCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.customer.AddCustomerCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.customer.DeleteCustomerCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.customer.EditCustomerCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.customer.FindCustomerCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.product.AddProductCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.product.DeleteProductCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.product.EditProductCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.product.FindProductCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.transaction.AddTransactionCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.transaction.DeleteTransactionCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.transaction.EditTransactionCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.transaction.FindTransactionCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class InventorySystemParser {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case AddCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new AddCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case EditCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new EditCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case DeleteCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new DeleteCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case ClearCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new ClearCustomerCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case FindCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new FindCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case ListCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new ListCustomerCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case AddProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new AddProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case ListProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new ListProductCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case ClearProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new ClearProductCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case DeleteProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new DeleteProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case EditProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new EditProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case FindProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new FindProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case AddTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case EditTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new EditTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case FindTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new FindTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case ListTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new ListTransactionCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case DeleteTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new DeleteTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case ClearTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new ClearTransactionCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 28,
      "-": 57,
      "junhaotan": 25,
      "YingxuH": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Money;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static Sales parseSales(String sales) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(sales);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String trimmedSales \u003d sales.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Sales.isValidSales(trimmedSales)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(Sales.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Sales(trimmedSales);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String customer} into an {@code Customer}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code customer} is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static String parseCustomer(String customer) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedCustomer \u003d customer.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //        if (!Sales.isValidSales(trimmedSales)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //        return new Sales(trimmedSales);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return trimmedCustomer;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String product} into an {@code product}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code product} is invalid."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static String parseProduct(String product) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedProduct \u003d product.trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //        if (!Sales.isValidSales(trimmedSales)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //        return new Sales(trimmedSales);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return trimmedProduct;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String product} into an {@code product}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code product} is invalid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new DateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String product} into an {@code product}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code product} is invalid."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Money parseMoney(String money) throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(money);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedMoney \u003d money.trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Money.isValidMoney(trimmedMoney)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(Money.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(trimmedMoney);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Description parseTransDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 61,
      "-": 120,
      "junhaotan": 4,
      "YingxuH": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/customer/AddCustomerCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new AddCustomerCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommandParser implements Parser\u003cAddCustomerCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCustomerCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns an AddCustomerCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public AddCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d new Customer(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new AddCustomerCommand(customer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "junhaotan": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/customer/DeleteCustomerCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new DeleteCustomerCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class DeleteCustomerCommandParser implements Parser\u003cDeleteCustomerCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCustomerCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns a DeleteCustomerCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public DeleteCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new DeleteCustomerCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/customer/EditCustomerCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new EditCustomerCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerCommandParser implements Parser\u003cEditCustomerCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCustomerCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns an EditCustomerCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(EditCustomerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new EditCustomerCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "junhaotan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/customer/FindCustomerCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.FindCustomerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new FindCustomerCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class FindCustomerCommandParser implements Parser\u003cFindCustomerCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCustomerCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns a FindCustomerCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public FindCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new FindCustomerCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (!argMultimap.getAllValues(PREFIX_ADDRESS).isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new FindCustomerCommand(new AddressContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (!argMultimap.getAllValues(PREFIX_EMAIL).isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new FindCustomerCommand(new EmailContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (!argMultimap.getAllValues(PREFIX_PHONE).isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new FindCustomerCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new FindCustomerCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/AddProductCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.AddProductCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Parses input arguments and creates a new AddProductCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommandParser implements Parser\u003cAddProductCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProductCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns an AddProductCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public AddProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_QUANTITY, PREFIX_SALES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Sales sales;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_SALES)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            sales \u003d ParserUtil.parseSales(argMultimap.getValue(PREFIX_SALES).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            sales \u003d new Sales(\"0\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product product \u003d new Product(description, price, quantity, sales);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new AddProductCommand(product);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 65,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/DeleteProductCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Parses input arguments and creates a new DeleteProductCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DeleteProductCommandParser implements Parser\u003cDeleteProductCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteProductCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns a DeleteProductCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DeleteProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new DeleteProductCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteProductCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/EditProductCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductCommandParser implements Parser\u003cEditProductCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditProductCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns an EditProductCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_QUANTITY, PREFIX_SALES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                    EditProductCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor editProductDescriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            editProductDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            editProductDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            editProductDescriptor.setQuantity(ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALES).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            editProductDescriptor.setSales(ParserUtil.parseSales(argMultimap.getValue(PREFIX_SALES).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!editProductDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(EditProductCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new EditProductCommand(index, editProductDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/FindProductCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.FindProductCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class FindProductCommandParser implements Parser\u003cFindProductCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindProductCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns a FindProductCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public FindProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new FindProductCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 11,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transaction/AddTransactionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANS_DESCIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.model.util.Description.DEFAULT_VALUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Money;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionFactory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parse input arguments and creates an AddTransactionCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddTransactionCommandParser implements Parser\u003cAddTransactionCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public AddTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        PREFIX_MONEY, PREFIX_TRANS_DESCIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                PREFIX_MONEY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index customerIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CUSTOMER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index productIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PRODUCT).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money money \u003d ParserUtil.parseMoney(argMultimap.getValue(PREFIX_MONEY).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Description transDescription;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TRANS_DESCIPTION)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            transDescription \u003d ParserUtil.parseTransDescription(argMultimap.getValue(PREFIX_TRANS_DESCIPTION).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            transDescription \u003d new Description(DEFAULT_VALUE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory transactionFactory \u003d new TransactionFactory(customerIndex, productIndex, dateTime,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                quantity, money, transDescription);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new AddTransactionCommand(transactionFactory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transaction/DeleteTransactionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parses input arguments and creates a new DeleteTransactionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeleteTransactionCommandParser implements Parser\u003cDeleteTransactionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTransactionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns a DeleteTransactionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeleteTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new DeleteTransactionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTransactionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transaction/EditTransactionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANS_DESCIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class EditTransactionCommandParser implements Parser\u003cEditTransactionCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTransactionCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns an EditTransactionCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        PREFIX_QUANTITY, PREFIX_MONEY, PREFIX_TRANS_DESCIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    EditTransactionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditTransactionDescriptor editTransactionDescriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUSTOMER).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setCustomerIndex(ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    .parseIndex(argMultimap.getValue(PREFIX_CUSTOMER).get())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRODUCT).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setProductIndex("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PRODUCT).get())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setDateTime("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setQuantity("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONEY).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setMoney("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseMoney(argMultimap.getValue(PREFIX_MONEY).get())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!editTransactionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(EditTransactionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new EditTransactionCommand(index, editTransactionDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transaction/FindTransactionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.FindTransactionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.CustomerContainsKeywordPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTimeEqualsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.JointTransactionPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.ProductContainsKeywordPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parse input arguments and creates a new FindCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class FindTransactionCommandParser implements Parser\u003cFindTransactionCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cPredicate\u003cTransaction\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindTransactionCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns a FindTransactionCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public FindTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    FindTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_CUSTOMER)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String customerArgs \u003d ParserUtil.parseCustomer(argMultimap.getValue(PREFIX_CUSTOMER).get()).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String[] customerKeywords \u003d customerArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            predicates.add(new CustomerContainsKeywordPredicate(Arrays.asList(customerKeywords)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_PRODUCT)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String productArgs \u003d ParserUtil.parseProduct(argMultimap.getValue(PREFIX_PRODUCT).get()).trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String[] productKeywords \u003d productArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            predicates.add(new ProductContainsKeywordPredicate(Arrays.asList(productKeywords)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_DATETIME)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            predicates.add(new DateTimeEqualsPredicate(dateTime));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new FindTransactionCommand(new JointTransactionPredicate(predicates));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InventorySystem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ClearCustomerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.ClearProductCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.ClearTransactionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.UniqueCustomerList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.UniqueProductList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.UniqueTransactionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class InventorySystem implements ReadOnlyInventorySystem {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final UniqueCustomerList persons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final UniqueProductList products;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final UniqueTransactionList transactions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        persons \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products \u003d new UniqueProductList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public InventorySystem() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Creates an InventorySystem using the Persons and Products in the {@code toBeCopied}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public InventorySystem(ReadOnlyInventorySystem toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        resetData(toBeCopied, ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        resetData(toBeCopied, ClearProductCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        resetData(toBeCopied, ClearTransactionCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the contents of the customer list with {@code customers}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code customers} must not contain duplicate customers."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.persons.setPersons(customers);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the contents of the product list with {@code products}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code products} must not contain duplicate products."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProducts(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.products.setProduct(products);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the contents of the transaction list with {@code transactions}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code transactions} must not contain duplicate products."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.transactions.setTransaction(transactions);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Resets the existing data of this {@code InventorySystem} with {@code newData}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void resetData(ReadOnlyInventorySystem newData, String commandWord) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (commandWord.equals(\"clearc\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (commandWord.equals(\"clearp\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setProducts(newData.getProductList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (commandWord.equals(\"cleart\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    //// customer-level operations"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return persons.contains(customer);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a product with the same identity as {@code product} exists in the product list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return products.contains(product);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Adds a customer to the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer must not already exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void addPerson(Customer p) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Adds a product to the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product must not already exist in the product list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void addProduct(Product p) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products.add(p);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the given customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(editedCustomer);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        persons.setPerson(target, editedCustomer);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the given product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code target} must exist in the product list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as another"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * existing product in the product list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(editedProduct);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products.setProduct(target, editedProduct);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the given product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code target} must exist in the product list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as another"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * existing product in the product list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(editedTransaction);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Removes {@code key} from this {@code InventorySystem}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void removePerson(Customer key) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ////Transaction Level operations"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a transaction with the same identity as {@code t} exists in the system."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param t transaction to be checked."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return true if a transaction with the same identity exists in the list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean hasTransaction(Transaction t) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return transactions.contains(t);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void addTransaction(Transaction t) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions.add(t);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Removes {@code key} from this {@code InventorySystem}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void removeTransaction(Transaction t) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions.remove(t);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Removes {@code key} from this {@code InventorySystem}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code key} must exist in the product list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void removeProduct(Product key) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products.remove(key);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + products.asUnmodifiableObservableList().size() + \" products\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getPersonList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ObservableList\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return products.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof InventorySystem // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 persons.equals(((InventorySystem) other).persons));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 52,
      "-": 94,
      "junhaotan": 33,
      "YingxuH": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ALL_PRODUCTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void setAddressBook(ReadOnlyInventorySystem addressBook, String commandWord);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /** Returns the InventorySystem */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    ReadOnlyInventorySystem getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    boolean hasPerson(Customer customer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a product with the same identity as {@code product} exists in the product list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    boolean hasProduct(Product product);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void deletePerson(Customer target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Deletes the given product."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product must exist in the product list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void deleteProduct(Product target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The transaction must exist in the product list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void deleteTransaction(Transaction target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Adds the given customer."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code customer} must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void addPerson(Customer customer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Adds the given product."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code product} must not already exist in the product list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void addProduct(Product product);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void setPerson(Customer target, Customer editedCustomer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the given product {@code target} with {@code editedProduct}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code target} must exist in the product list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * another existing product in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void setProduct(Product target, Product editedProduct);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void setTransaction(Transaction target, Transaction editedTransaction);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered customer list */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a transaction with the same identity as {@code transaction} exists in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    boolean hasTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds the given transaction."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code transaction} must not already exist in the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void addTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Updates the filter of the filtered product list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void updateFilteredProductList(Predicate\u003cProduct\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered product list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered product list */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered product list */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 29,
      "-": 80,
      "junhaotan": 20,
      "YingxuH": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final InventorySystem addressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final FilteredList\u003cCustomer\u003e filteredCustomers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final FilteredList\u003cProduct\u003e filteredProducts;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ModelManager(ReadOnlyInventorySystem addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.addressBook \u003d new InventorySystem(addressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        filteredCustomers \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        filteredProducts \u003d new FilteredList\u003c\u003e(this.addressBook.getProductList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.addressBook.getTransactionList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this(new InventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InventorySystem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setAddressBook(ReadOnlyInventorySystem addressBook, String commandWord) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.addressBook.resetData(addressBook, commandWord);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ReadOnlyInventorySystem getAddressBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return addressBook.hasPerson(customer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return addressBook.hasProduct(product);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void deleteProduct(Product target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        addressBook.removeProduct(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        addressBook.addPerson(customer);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void addProduct(Product product) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        addressBook.addProduct(product);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return addressBook.hasTransaction(transaction);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        addressBook.addTransaction(transaction);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        addressBook.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        addressBook.removeTransaction(transaction);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        addressBook.setPerson(target, editedCustomer);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(target, editedProduct);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        addressBook.setProduct(target, editedProduct);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Customer List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return filteredCustomers;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return filteredProducts;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        filteredCustomers.setPredicate(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        filteredProducts.setPredicate(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 filteredCustomers.equals(other.filteredCustomers)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 filteredProducts.equals(other.filteredProducts)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 34,
      "-": 138,
      "junhaotan": 22,
      "YingxuH": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInventorySystem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public interface ReadOnlyInventorySystem {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns an unmodifiable view of the persons list and product list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * This list will not contain any duplicate persons or duplicate products."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    ObservableList\u003cCustomer\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    ObservableList\u003cProduct\u003e getProductList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 12,
      "junhaotan": 2,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"inventorysystem.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/AddressContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Address} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddressContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getAddress().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 1; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (i + 1 \u003d\u003d keywords.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                print +\u003d keywords.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            print +\u003d keywords.get(i) + \" or \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Customer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class Customer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Customer(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean isSamePerson(Customer otherCustomer) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (otherCustomer \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return otherCustomer !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 (otherCustomer.getPhone().equals(getPhone()) || otherCustomer.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer otherCustomer \u003d (Customer) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "junhaotan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/EmailContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Email} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EmailContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getEmail().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 1; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (i + 1 \u003d\u003d keywords.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                print +\u003d keywords.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            print +\u003d keywords.get(i) + \" or \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 1; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (i + 1 \u003d\u003d keywords.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                print +\u003d keywords.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            print +\u003d keywords.get(i) + \" or \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "junhaotan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Phone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/PhoneContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class PhoneContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getPhone().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 1; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (i + 1 \u003d\u003d keywords.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                print +\u003d keywords.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            print +\u003d keywords.get(i) + \" or \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/UniqueCustomerList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A customer is considered unique by comparing using {@code Customer#isSamePerson(Customer)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * adding and updating of persons uses Customer#isSamePerson(Customer) for equality so as to ensure that the customer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueCustomerList. However, the removal of a customer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * uses Customer#equals(Object) so as to ensure that the customer with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * @see Customer#isSamePerson(Customer)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class UniqueCustomerList implements Iterable\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if the list contains an equivalent customer as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean contains(Customer toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Adds a customer to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void add(Customer toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!target.isSamePerson(editedCustomer) \u0026\u0026 contains(editedCustomer)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        internalList.set(index, editedCustomer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Removes the equivalent customer from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void remove(Customer toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons(UniqueCustomerList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the contents of this list with {@code customers}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code customers} must not contain duplicate customers."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireAllNonNull(customers);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!personsAreUnique(customers)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        internalList.setAll(customers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ObservableList\u003cCustomer\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Iterator\u003cCustomer\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof UniqueCustomerList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCustomerList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if {@code customers} contains only unique customers."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private boolean personsAreUnique(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 0; i \u003c customers.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c customers.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                if (customers.get(i).isSamePerson(customers.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/exceptions/DuplicatePersonException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "junhaotan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/exceptions/PersonNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/DescriptionContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Tests that a {@code Product}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cProduct\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean test(Product product) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(product.getDescription().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/Price.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product\u0027s price in the product list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Price can take any numeric values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs an {@code Price}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        value \u003d price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/Product.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product in the product list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class Product {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Sales sales;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Product(Description description, Price price, Quantity quantity, Sales sales) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(description, price, quantity);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.sales \u003d sales;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Sales getSales() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return sales;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if both products have the same identity and data fields."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean isSameProduct(Product otherProduct) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (otherProduct \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return otherProduct !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getSales().equals(getSales());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if both products have the same identity and data fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!(other instanceof Product)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product otherProduct \u003d (Product) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return otherProduct.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getSales().equals(getSales());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return Objects.hash(description, price, quantity, sales);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\" Sales: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getSales());;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 103,
      "YingxuH": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/Sales.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product\u0027s sales in the product list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSales(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class Sales {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sales can take any numeric values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs an {@code Sales}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param sales A valid sales."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Sales(String sales) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(sales);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        checkArgument(isValidSales(sales), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        value \u003d sales;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a given string is a valid sales."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static boolean isValidSales(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof Sales // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 value.equals(((Sales) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/UniqueProductList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A list of products that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A product is considered unique by comparing using {@code Product#isSameProduct(Product)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * As such, adding and updating of products uses Product#isSameProduct(Product) for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * equality so as to ensure that the product being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * unique in terms of identity in the UniqueProductList. However, the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * removal of a product uses Product#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * as to ensure that the product with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * @see Product#isSameProduct(Product)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class UniqueProductList implements Iterable\u003cProduct\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final ObservableList\u003cProduct\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final ObservableList\u003cProduct\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if the list contains an equivalent product as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean contains(Product toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProduct);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Adds a product to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void add(Product toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as another existing product in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(target, editedProduct);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!target.isSameProduct(editedProduct) \u0026\u0026 contains(editedProduct)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        internalList.set(index, editedProduct);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(UniqueProductList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the contents of this list with {@code products}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code products} must not contain duplicate products."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(products);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!productsAreUnique(products)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        internalList.setAll(products);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Removes the equivalent product from the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product must exist in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void remove(Product toRemove) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ObservableList\u003cProduct\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Iterator\u003cProduct\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof UniqueProductList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueProductList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if {@code products} contains only unique products."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private boolean productsAreUnique(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c products.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            for (int j \u003d i + 1; j \u003c products.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                if (products.get(i).isSameProduct(products.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/exceptions/DuplicateProductException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Signals that the operation will result in duplicate Products (Products are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DuplicateProductException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DuplicateProductException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        super(\"Operation would result in duplicate products\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/exceptions/ProductNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Signals that the operation is unable to find the specified product."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ProductNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/CustomerContainsKeywordPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests that a {@code Transactions}\u0027s {@code Customer} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class CustomerContainsKeywordPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CustomerContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(transaction.getCustomer().getName().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof CustomerContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 keywords.equals(((CustomerContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents the date time of a transaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"DateTime should be in YYYY-mm-dd hh:mm format, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\d{4}-\\\\d{2}-\\\\d{2})\\\\s+\\\\d{2}:\\\\d{2}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code DateTime}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param dateTime A valid sales."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d LocalDateTime.parse(dateTime, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid sales."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            LocalDateTime.parse(test, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.format(DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 value.equals(((DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DateTimeEqualsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests that a {@code Transactions}\u0027s {@code DateTime} matches the DateTime object given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DateTimeEqualsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime targetDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTimeEqualsPredicate(DateTime targetDateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.targetDateTime \u003d targetDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return transaction.getDateTime().equals(targetDateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof DateTimeEqualsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 targetDateTime.equals(((DateTimeEqualsPredicate) other).targetDateTime)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/JointTransactionPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests whether a {@code Transaction}\u0027s attributes fulfill the given properties."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class JointTransactionPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cPredicate\u003cTransaction\u003e\u003e predicates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public JointTransactionPredicate(List\u003cPredicate\u003cTransaction\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return predicates.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .allMatch(predicate -\u003e predicate.test(transaction));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof DateTimeEqualsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 predicates.equals(((JointTransactionPredicate) other).predicates)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Money.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a Transaction\u0027s Monetary Information."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMoney(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Money {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Money can take any numeric values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code Money}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param sales A valid sales."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(String sales) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(sales);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidMoney(sales), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d sales;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid sales."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidMoney(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof Money // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 value.equals(((Money) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/ProductContainsKeywordPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Product} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductContainsKeywordPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(transaction.getProduct().getDescription().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof ProductContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 keywords.equals(((ProductContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Transaction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a Transaction in the system."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Customer customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Product product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Money money;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Transaction(Customer customer, Product product, DateTime dateTime,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                       Quantity quantity, Money money, Description description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product getProduct() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return product;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money getMoney() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if any two transactions have the same customer, products, and dateTime."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * This defines a weaker notion of equality."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param otherTransaction other transaction."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return true if these two transactions have the same customer, products, and dateTime."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isSameTransaction(Transaction otherTransaction) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (otherTransaction \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return otherTransaction.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getProduct().equals(getProduct())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getMoney().equals(getMoney());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction otherTransaction \u003d (Transaction) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return otherTransaction.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getProduct().equals(getProduct())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getMoney().equals(getMoney())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Creates a transaction with the customer and product index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index customerIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index productIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Money money;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactory(Index customerIndex, Index productIndex, DateTime dateTime,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              Quantity quantity, Money money, Description description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.productIndex \u003d productIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates a transaction with the found product and customer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param model the model manager."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return created transaction."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Transaction createTransaction(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Customer customer \u003d model.getFilteredCustomerList().get(customerIndex.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product product \u003d model.getFilteredProductList().get(productIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Transaction(customer, product, dateTime, quantity, money, description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof TransactionFactory)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory otherTransactionFactory \u003d (TransactionFactory) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return otherTransactionFactory.customerIndex.equals(customerIndex)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.productIndex.equals(productIndex)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.dateTime.equals(dateTime)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.quantity.equals(quantity)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.money.equals(money)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.description.equals(description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/UniqueTransactionList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Implements a list of non-duplicate transactions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class UniqueTransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the list contains an equivalent transaction as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param toCheck the transaction to be checked"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return true if there is an equivalent transaction in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean contains(Transaction toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTransaction);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds a transaction to the unique list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param toAdd transaction to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as another existing product in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!target.isSameTransaction(editedTransaction) \u0026\u0026 contains(editedTransaction)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code transactions} must not contain duplicate products."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransaction(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!transactionsAreUnique(transactions)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if {@code transactions} contains only unique products."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private boolean transactionsAreUnique(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size() - 1; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            for (int j \u003d i + 1; j \u003c transactions.size(); j++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                if (transactions.get(i).isSameTransaction(transactions.get(j))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/DuplicateTransactionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals of duplicate transactions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DuplicateTransactionException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DuplicateTransactionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(\"Operation would result in duplicate transactions\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException{}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product\u0027s description in the product list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"Null\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 56,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Quantity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product\u0027s quantity in the product list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Quantity can take any numeric values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs an {@code Quantity}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        value \u003d quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a given string is a valid quantity."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 value.equals(((Quantity) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 55,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains utility methods for populating {@code InventorySystem} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static Customer[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new Customer[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Customer(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Customer(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Customer(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Customer(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Customer(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Customer(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static ReadOnlyInventorySystem getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem sampleAb \u003d new InventorySystem();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (Customer sampleCustomer : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            sampleAb.addPerson(sampleCustomer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 40,
      "junhaotan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventorySystemStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a storage for {@link InventorySystem}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public interface InventorySystemStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns InventorySystem data as a {@link ReadOnlyInventorySystem}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Optional\u003cReadOnlyInventorySystem\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Optional\u003cReadOnlyInventorySystem\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Saves the given {@link ReadOnlyInventorySystem} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void saveAddressBook(ReadOnlyInventorySystem addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyInventorySystem)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void saveAddressBook(ReadOnlyInventorySystem addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInventorySystemStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A class to access InventorySystem data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonInventorySystemStorage implements InventorySystemStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventorySystemStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonInventorySystemStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Optional\u003cReadOnlyInventorySystem\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Optional\u003cReadOnlyInventorySystem\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Optional\u003cJsonSerializableInventorySystem\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                filePath, JsonSerializableInventorySystem.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void saveAddressBook(ReadOnlyInventorySystem addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyInventorySystem)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void saveAddressBook(ReadOnlyInventorySystem addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventorySystem(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 13,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInventorySystem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.customer.JsonAdaptedCustomer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.product.JsonAdaptedProduct;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.transaction.JsonAdaptedTransaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * An Immutable InventorySystem that is serializable to JSON format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "class JsonSerializableInventorySystem {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate customer(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"Transactions list contains duplicate transaction(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"Products list contains duplicate product(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cJsonAdaptedCustomer\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cJsonAdaptedTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final List\u003cJsonAdaptedProduct\u003e products \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs a {@code JsonSerializableInventorySystem} with the given persons, transactions and products."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonSerializableInventorySystem(@JsonProperty(\"persons\") List\u003cJsonAdaptedCustomer\u003e persons,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                           @JsonProperty(\"transactions\") List\u003cJsonAdaptedTransaction\u003e transactions,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                           @JsonProperty(\"products\") List\u003cJsonAdaptedProduct\u003e products) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.products.addAll(products);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Converts a given {@code ReadOnlyInventorySystem} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventorySystem}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonSerializableInventorySystem(ReadOnlyInventorySystem source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedCustomer::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions.addAll(source.getTransactionList().stream().map(JsonAdaptedTransaction::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products.addAll(source.getProductList().stream().map(JsonAdaptedProduct::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Converts this address book into the model\u0027s {@code InventorySystem} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public InventorySystem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem addressBook \u003d new InventorySystem();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (JsonAdaptedCustomer jsonAdaptedCustomer : persons) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            Customer customer \u003d jsonAdaptedCustomer.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (addressBook.hasPerson(customer)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            addressBook.addPerson(customer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (JsonAdaptedTransaction jsonAdaptedTransaction : transactions) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Transaction transaction \u003d jsonAdaptedTransaction.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (addressBook.hasTransaction(transaction)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            addressBook.addTransaction(transaction);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (JsonAdaptedProduct jsonAdaptedProduct : products) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Product product \u003d jsonAdaptedProduct.toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (addressBook.hasProduct(product)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            addressBook.addProduct(product);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 31,
      "-": 40,
      "junhaotan": 8,
      "YingxuH": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public interface Storage extends InventorySystemStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Optional\u003cReadOnlyInventorySystem\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void saveAddressBook(ReadOnlyInventorySystem addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 4,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Manages storage of InventorySystem data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private InventorySystemStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public StorageManager(InventorySystemStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InventorySystem methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Optional\u003cReadOnlyInventorySystem\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Optional\u003cReadOnlyInventorySystem\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void saveAddressBook(ReadOnlyInventorySystem addressBook) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void saveAddressBook(ReadOnlyInventorySystem addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/customer/JsonAdaptedCustomer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedCustomer {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Customer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public JsonAdaptedCustomer(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                               @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public JsonAdaptedCustomer(Customer source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Customer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new Customer(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 92,
      "junhaotan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/product/JsonAdaptedProduct.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Jackson-friendly version of {@link Product}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedProduct {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Product\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String sales;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs a {@code JsonAdaptedProduct} with the given product details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonAdaptedProduct(@JsonProperty(\"description\") String description, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                             @JsonProperty(\"quantity\") String quantity, @JsonProperty(\"sales\") String sales) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.sales \u003d sales;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Converts a given {@code Product} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonAdaptedProduct(Product source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        quantity \u003d source.getQuantity().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        sales \u003d source.getSales().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Product} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted product."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Product toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                            Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                            Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (sales \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Sales.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Sales.isValidSales(sales)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(Sales.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Sales modelSales \u003d new Sales(sales);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Product(modelDescription, modelPrice, modelQuantity, modelSales);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 89,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transaction/JsonAdaptedTransaction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Money;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.storage.customer.JsonAdaptedCustomer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.storage.product.JsonAdaptedProduct;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Jackson-friendly version of {@link Transaction}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final JsonAdaptedCustomer customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final JsonAdaptedProduct product;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String money;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public JsonAdaptedTransaction(@JsonProperty(\"customer\") JsonAdaptedCustomer customer,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                  @JsonProperty(\"product\") JsonAdaptedProduct product,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                               @JsonProperty(\"dateTime\") String dateTime, @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                               @JsonProperty(\"money\") String money, @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public JsonAdaptedTransaction(Transaction source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customer \u003d new JsonAdaptedCustomer(source.getCustomer());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        product \u003d new JsonAdaptedProduct(source.getProduct());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        money \u003d source.getMoney().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Transaction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final Customer modelCustomer \u003d customer.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (product \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final Product modelProduct \u003d product.toModelType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final DateTime modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (money \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Money.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Money.isValidMoney(money)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final Money modelMoney \u003d new Money(money);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Transaction(modelCustomer, modelProduct, modelDateTime, modelQuantity, modelMoney, modelDescription);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "YingxuH": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103-t09-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "junhaotan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.customer.PersonListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.product.ProductListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.transaction.TransactionListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ProductListPanel productListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane productListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredCustomerList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanel \u003d new ProductListPanel(logic.getFilteredProductList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanelPlaceholder.getChildren().add(productListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 192,
      "junhaotan": 1,
      "YingxuH": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/customer/PersonCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * An UI component that displays information of a {@code Customer}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on InventorySystem level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public final Customer customer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public PersonCard(Customer customer, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        name.setText(customer.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        phone.setText(customer.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        address.setText(customer.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        email.setText(customer.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        customer.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 customer.equals(card.customer);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 61,
      "junhaotan": 11,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/customer/PersonListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private ListView\u003cCustomer\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public PersonListPanel(ObservableList\u003cCustomer\u003e customerList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        personListView.setItems(customerList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        protected void updateItem(Customer customer, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            super.updateItem(customer, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (empty || customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                setGraphic(new PersonCard(customer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "junhaotan": 10,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/product/ProductCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An UI component that displays information of a {@code Product}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"ProductListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on InventorySystem level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final Product product;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label sales;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCard(Product product, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description.setText(product.getDescription().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        price.setText(product.getPrice().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity.setText(product.getQuantity().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        sales.setText(product.getSales().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof seedu.address.ui.product.ProductCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        seedu.address.ui.product.ProductCard card \u003d (seedu.address.ui.product.ProductCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 product.equals(card.product);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "YingxuH": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/product/ProductListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"ProductListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProductListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ListView\u003cProduct\u003e productListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanel(ObservableList\u003cProduct\u003e productList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.setItems(productList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.setCellFactory(listView -\u003e new ProductListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    class ProductListViewCell extends ListCell\u003cProduct\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        protected void updateItem(Product product, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            super.updateItem(product, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (empty || product \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(new ProductCard(product, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/transaction/TransactionCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An UI component that displays information of a {@code Transaction}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"TransactionListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on InventorySystem level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label customer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label product;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label money;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customer.setText(transaction.getCustomer().getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        product.setText(transaction.getProduct().getDescription().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTime.setText(transaction.getDateTime().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity.setText(transaction.getQuantity().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        money.setText(transaction.getMoney().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description.setText(transaction.getDescription().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "YingxuH": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/transaction/TransactionListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactionListView.setItems(transactionList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using a {@code TransactionCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 48
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"iTrack Pro\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "              \u003cVBox fx:id\u003d\"customerList\" minWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "              \u003cVBox fx:id\u003d\"productList\" minWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"productListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                 \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "              \u003cVBox fx:id\u003d\"transactionList\" layoutX\u003d\"350.0\" layoutY\u003d\"10.0\" minWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"transactionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                 \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 49,
      "YingxuH": 28
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cLabel text\u003d\"Customers\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "YingxuH": 8
    }
  },
  {
    "path": "src/main/resources/view/ProductListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"sales\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$sales\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 31
    }
  },
  {
    "path": "src/main/resources/view/ProductListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cLabel text\u003d\"Products\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cListView fx:id\u003d\"productListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 15
    }
  },
  {
    "path": "src/main/resources/view/TransactionListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"customer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$customer\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"product\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$product\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"money\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$money\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 32
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cLabel text\u003d\"Transactions\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ListCustomerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.JsonInventorySystemStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonInventorySystemStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonInventorySystemStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String deleteCommand \u003d \"deletec 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String listCommand \u003d ListCustomerCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(listCommand, ListCustomerCommand.MESSAGE_EMPTY, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonInventorySystemStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String addCommand \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer expectedCustomer \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.addPerson(expectedCustomer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredCustomerList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonInventorySystemStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void saveAddressBook(ReadOnlyInventorySystem addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7,
      "-": 145,
      "junhaotan": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_DESCRIPTION_WATCH \u003d \"Black watch\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_DESCRIPTION_BAG \u003d \"Black bag\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_PRICE_WATCH \u003d \"11\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_PRICE_BAG \u003d \"22\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_QUANTITY_WATCH \u003d \"1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_QUANTITY_BAG \u003d \"2\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_SALES_WATCH \u003d \"22\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_SALES_BAG \u003d \"44\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DESCRIPTION_DESC_BAG \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BAG;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DESCRIPTION_DESC_WATCH \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String PRICE_DESC_BAG \u003d \" \" + PREFIX_PRICE + VALID_PRICE_BAG;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String PRICE_DESC_WATCH \u003d \" \" + PREFIX_PRICE + VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String QUANTITY_DESC_BAG \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BAG;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String QUANTITY_DESC_WATCH \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String SALES_DESC_BAG \u003d \" \" + PREFIX_SALES + VALID_SALES_BAG;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String SALES_DESC_WATCH \u003d \" \" + PREFIX_SALES + VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"911a\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + \"bob!yahoo\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String INVALID_SALES_DESC \u003d \" \" + PREFIX_SALES;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final EditCustomerCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final EditCustomerCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final EditProductCommand.EditProductDescriptor DESC_BAG;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final EditProductCommand.EditProductDescriptor DESC_WATCH;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DESC_BAG \u003d new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_BAG)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withPrice(VALID_PRICE_BAG).withQuantity(VALID_QUANTITY_BAG).withSales(VALID_SALES_BAG).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DESC_WATCH \u003d new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_WATCH)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withPrice(VALID_PRICE_WATCH).withQuantity(VALID_QUANTITY_WATCH).withSales(VALID_SALES_WATCH).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * - the address book, filtered customer list and selected customer in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem expectedAddressBook \u003d new InventorySystem(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the customer at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d model.getFilteredCustomerList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        final String[] splitName \u003d customer.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(1, model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the product at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static void showProductAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredProductList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product product \u003d model.getFilteredProductList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final String[] splitName \u003d product.getDescription().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(1, model.getFilteredProductList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 49,
      "-": 118,
      "junhaotan": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/AddCustomerCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCustomerCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer validCustomer \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.addPerson(validCustomer);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new AddCustomerCommand(validCustomer), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                String.format(AddCustomerCommand.MESSAGE_SUCCESS, validCustomer), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(new AddCustomerCommand(customerInList), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                AddCustomerCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 35,
      "junhaotan": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/AddCustomerCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCustomerCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer validCustomer \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        CommandResult commandResult \u003d new AddCustomerCommand(validCustomer).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(String.format(AddCustomerCommand.MESSAGE_SUCCESS, validCustomer),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(validCustomer), modelStub.personsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer validCustomer \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand addCustomerCommand \u003d new AddCustomerCommand(validCustomer);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validCustomer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                AddCustomerCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCustomerCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand addAliceCommand \u003d new AddCustomerCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand addBobCommand \u003d new AddCustomerCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand addAliceCommandCopy \u003d new AddCustomerCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void setAddressBook(ReadOnlyInventorySystem newData, String commandWord) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyInventorySystem getAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void deleteProduct(Product target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void setPerson(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * A Model stub that contains a single customer."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        private final Customer customer;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        ModelStubWithPerson(Customer customer) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return this.customer.isSamePerson(customer);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * A Model stub that always accept the customer being added."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        final ArrayList\u003cCustomer\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return personsAdded.stream().anyMatch(customer::isSamePerson);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            personsAdded.add(customer);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyInventorySystem getAddressBook() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new InventorySystem();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 38,
      "-": 148,
      "junhaotan": 42,
      "YingxuH": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/ClearCustomerCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ClearCustomerCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ClearCustomerCommand(), model, ClearCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setAddressBook(new InventorySystem(), ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ClearCustomerCommand(), model, ClearCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 26,
      "junhaotan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/DeleteCustomerCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * {@code DeleteCustomerCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class DeleteCustomerCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomerCommand.MESSAGE_DELETE_PERSON_SUCCESS, customerToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.deletePerson(customerToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(deleteCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(deleteCustomerCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomerCommand.MESSAGE_DELETE_PERSON_SUCCESS, customerToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.deletePerson(customerToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(deleteCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(deleteCustomerCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteFirstCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteSecondCommand \u003d new DeleteCustomerCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteFirstCommandCopy \u003d new DeleteCustomerCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(model.getFilteredCustomerList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 84,
      "junhaotan": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/EditCustomerCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * for EditCustomerCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedCustomer).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setPerson(model.getFilteredCustomerList().get(0), editedCustomer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer lastCustomer \u003d model.getFilteredCustomerList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastCustomer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setPerson(lastCustomer, editedCustomer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new EditPersonDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerInFilteredList \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d new PersonBuilder(customerInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setPerson(model.getFilteredCustomerList().get(0), editedCustomer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer firstCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstCustomer).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, EditCustomerCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // edit customer in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new EditPersonDescriptorBuilder(customerInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, EditCustomerCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        final EditCustomerCommand standardCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand commandWithSameValues \u003d new EditCustomerCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCustomerCommand()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCustomerCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCustomerCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 6,
      "-": 120,
      "junhaotan": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/EditCustomerDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 55,
      "junhaotan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/FindCustomerCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCustomerCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class FindCustomerCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand findFirstCommand \u003d new FindCustomerCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand findSecondCommand \u003d new FindCustomerCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand findFirstCommandCopy \u003d new FindCustomerCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d \"Please enter at least one keyword!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCustomerList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredCustomerList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 68,
      "junhaotan": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/ListCustomerCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCustomerCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ListCustomerCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ListCustomerCommand(), model, ListCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ListCustomerCommand(), model, ListCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 34,
      "junhaotan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/AddProductCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.ProductBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCustomerCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_newProduct_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product validProduct \u003d new ProductBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.addProduct(validProduct);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new AddProductCommand(validProduct), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                String.format(AddProductCommand.MESSAGE_SUCCESS, validProduct), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_duplicateProduct_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productInList \u003d model.getAddressBook().getProductList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(new AddProductCommand(productInList), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                AddProductCommand.MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/AddProductCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.ProductBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_nullProduct_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProductCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_productAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelStubAcceptingProductAdded modelStub \u003d new ModelStubAcceptingProductAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product validProduct \u003d new ProductBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        CommandResult commandResult \u003d new AddProductCommand(validProduct).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(String.format(AddProductCommand.MESSAGE_SUCCESS, validProduct),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(Arrays.asList(validProduct), modelStub.productsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_duplicateProduct_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product validProduct \u003d new ProductBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        AddProductCommand addProductCommand \u003d new AddProductCommand(validProduct);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProduct(validProduct);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                AddProductCommand.MESSAGE_DUPLICATE_PRODUCT, () -\u003e addProductCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product alice \u003d new ProductBuilder().withDescription(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product bob \u003d new ProductBuilder().withDescription(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        AddProductCommand addAliceCommand \u003d new AddProductCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        AddProductCommand addBobCommand \u003d new AddProductCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        AddProductCommand addAliceCommandCopy \u003d new AddProductCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void setAddressBook(ReadOnlyInventorySystem newData, String commandWord) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyInventorySystem getAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void deleteProduct(Product target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setPerson(Customer target, Customer editedProduct) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * A Model stub that contains a single product."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private class ModelStubWithProduct extends ModelStub {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private final Product product;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelStubWithProduct(Product product) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            requireNonNull(product);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.product \u003d product;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            requireNonNull(product);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return this.product.isSameProduct(product);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * A Model stub that always accept the product being added."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private class ModelStubAcceptingProductAdded extends ModelStub {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final ArrayList\u003cProduct\u003e productsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            requireNonNull(product);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return productsAdded.stream().anyMatch(product::isSameProduct);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            requireNonNull(product);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            productsAdded.add(product);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyInventorySystem getAddressBook() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new InventorySystem();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 249,
      "junhaotan": 1,
      "YingxuH": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/ClearProductCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ClearProductCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new ClearProductCommand(), model, ClearProductCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setAddressBook(new InventorySystem(), ClearProductCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new ClearProductCommand(), model, ClearProductCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 31,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/DeleteProductCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProductAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * {@code DeleteProductCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DeleteProductCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productToDelete \u003d model.getFilteredProductList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteProductCommand \u003d new DeleteProductCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteProductCommand.MESSAGE_DELETE_PRODUCT_SUCCESS, productToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.deleteProduct(productToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(deleteProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProductList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteProductCommand \u003d new DeleteProductCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCommandFailure(deleteProductCommand, model, Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productToDelete \u003d model.getFilteredProductList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteProductCommand \u003d new DeleteProductCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteProductCommand.MESSAGE_DELETE_PRODUCT_SUCCESS, productToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.deleteProduct(productToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showNoProduct(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(deleteProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getProductList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteProductCommand \u003d new DeleteProductCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCommandFailure(deleteProductCommand, model, Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteFirstCommand \u003d new DeleteProductCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteSecondCommand \u003d new DeleteProductCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteFirstCommandCopy \u003d new DeleteProductCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void showNoProduct(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(model.getFilteredProductList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 105,
      "YingxuH": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/EditProductCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProductAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PRODUCT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PRODUCT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.ProductBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * for EditProductCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d new ProductBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder(editedProduct).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(EditProductCommand.MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.setProduct(model.getFilteredProductList().get(0), editedProduct);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(editProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index indexLastProduct \u003d Index.fromOneBased(model.getFilteredProductList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product lastProduct \u003d model.getFilteredProductList().get(indexLastProduct.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ProductBuilder personInList \u003d new ProductBuilder(lastProduct);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d personInList.withDescription(VALID_DESCRIPTION_WATCH)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withPrice(VALID_PRICE_WATCH).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_WATCH)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withPrice(VALID_PRICE_WATCH).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(indexLastProduct, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(EditProductCommand.MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.setProduct(lastProduct, editedProduct);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(editProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new EditProductDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d model.getFilteredProductList().get(INDEX_FIRST_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(EditProductCommand.MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(editProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PRODUCT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productInFilteredList \u003d model.getFilteredProductList()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .get(INDEX_FIRST_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d new"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                ProductBuilder(productInFilteredList).withDescription(VALID_DESCRIPTION_WATCH).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_WATCH).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(EditProductCommand.MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.setProduct(model.getFilteredProductList().get(0), editedProduct);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(editProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_duplicateProductUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product firstProduct \u003d model.getFilteredProductList().get(INDEX_FIRST_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder(firstProduct).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_SECOND_PRODUCT, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editProductCommand, model, EditProductCommand.MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_duplicateProductFilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PRODUCT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // edit product in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productInList \u003d model.getAddressBook().getProductList().get(INDEX_SECOND_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new EditProductDescriptorBuilder(productInList).build());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editProductCommand, model, EditProductCommand.MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_invalidProductIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProductList().size() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_WATCH).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                EditProductCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editProductCommand, model, Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_invalidProductIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PRODUCT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PRODUCT;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getProductList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_WATCH).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editProductCommand, model, Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final EditProductCommand standardCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT, DESC_BAG);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor copyDescriptor \u003d new EditProductDescriptor(DESC_BAG);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand commandWithSameValues \u003d new EditProductCommand(INDEX_FIRST_PRODUCT, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearProductCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(standardCommand.equals(new EditProductCommand(INDEX_SECOND_PRODUCT, DESC_BAG)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(standardCommand.equals(new EditProductCommand(INDEX_FIRST_PRODUCT, DESC_WATCH)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/EditProductDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptorWithSameValues \u003d new EditProductDescriptor(DESC_BAG);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(DESC_BAG.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(DESC_BAG.equals(DESC_BAG));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(DESC_WATCH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor editedAmy \u003d new"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                EditProductDescriptorBuilder(DESC_BAG).withDescription(VALID_DESCRIPTION_WATCH).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editedAmy \u003d new EditProductDescriptorBuilder(DESC_BAG).withPrice(VALID_PRICE_WATCH).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editedAmy \u003d new EditProductDescriptorBuilder(DESC_BAG).withQuantity(VALID_QUANTITY_WATCH).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different sales -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editedAmy \u003d new EditProductDescriptorBuilder(DESC_BAG).withSales(VALID_SALES_WATCH).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/FindProductCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindProductCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class FindProductCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand findFirstCommand \u003d new FindProductCommand(firstPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand findSecondCommand \u003d new FindProductCommand(secondPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand findFirstCommandCopy \u003d new FindProductCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_zeroKeywords_noProductFound() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d \"Please enter at least one keyword!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand command \u003d new FindProductCommand(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertEquals(Collections.emptyList(), model.getFilteredProductList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_multipleKeywords_multipleProductsFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PRODUCTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"bag book\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand command \u003d new FindProductCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertEquals(Arrays.asList(BAG, BOOK), model.getFilteredProductList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/ListProductCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProductAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PRODUCT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListProductCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ListProductCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new ListProductCommand(), model, ListProductCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PRODUCT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new ListProductCommand(), model, ListProductCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ClearCustomerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.FindCustomerCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ListCustomerCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final InventorySystemParser parser \u003d new InventorySystemParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand command \u003d (AddCustomerCommand) parser.parseCommand(PersonUtil.getAddCommand(customer));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new AddCustomerCommand(customer), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCustomerCommand.COMMAND_WORD) instanceof ClearCustomerCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCustomerCommand.COMMAND_WORD + \" 3\") instanceof ClearCustomerCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand command \u003d (DeleteCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                DeleteCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new DeleteCustomerCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(customer).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand command \u003d (EditCustomerCommand) parser.parseCommand(EditCustomerCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new EditCustomerCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d (FindCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                FindCustomerCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new FindCustomerCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCustomerCommand.COMMAND_WORD) instanceof ListCustomerCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCustomerCommand.COMMAND_WORD + \" 3\") instanceof ListCustomerCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 74,
      "junhaotan": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 192,
      "junhaotan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/customer/AddCustomerCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private AddCustomerCommandParser parser \u003d new AddCustomerCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer expectedCustomer \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer expectedCustomerMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomerMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer expectedCustomer \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 120,
      "junhaotan": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/customer/DeleteCustomerCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * outside of the DeleteCustomerCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * same path through the DeleteCustomerCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class DeleteCustomerCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private DeleteCustomerCommandParser parser \u003d new DeleteCustomerCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCustomerCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                DeleteCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 24,
      "junhaotan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/customer/EditCustomerCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private EditCustomerCommandParser parser \u003d new EditCustomerCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCustomerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Customer} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 188,
      "junhaotan": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/customer/FindCustomerCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.FindCustomerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class FindCustomerCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private FindCustomerCommandParser parser \u003d new FindCustomerCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                FindCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand expectedFindCustomerCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new FindCustomerCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCustomerCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCustomerCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 24,
      "junhaotan": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/product/AddProductCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_WATCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_WATCH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALES_DESC_BAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALES_DESC_WATCH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.BAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.WATCH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.AddProductCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.ProductBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private AddProductCommandParser parser \u003d new AddProductCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product expectedProduct \u003d new ProductBuilder(WATCH).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DESCRIPTION_DESC_WATCH + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + SALES_DESC_WATCH, new AddProductCommand(expectedProduct));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BAG + DESCRIPTION_DESC_WATCH"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + SALES_DESC_WATCH, new AddProductCommand(expectedProduct));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // multiple prices - last price accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_WATCH + PRICE_DESC_BAG + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + SALES_DESC_WATCH, new AddProductCommand(expectedProduct));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // multiple quantities - last quantity accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_WATCH + PRICE_DESC_WATCH + QUANTITY_DESC_BAG + QUANTITY_DESC_WATCH"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + SALES_DESC_WATCH, new AddProductCommand(expectedProduct));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // multiple sales - last sales accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_WATCH + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_BAG"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + SALES_DESC_WATCH, new AddProductCommand(expectedProduct));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product expectedProduct \u003d new ProductBuilder(BAG).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BAG + PRICE_DESC_BAG + QUANTITY_DESC_BAG + SALES_DESC_BAG,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new AddProductCommand(expectedProduct));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_WATCH + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // missing price prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + VALID_PRICE_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // missing quantity prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + PRICE_DESC_WATCH + VALID_QUANTITY_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_WATCH"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + VALID_PRICE_WATCH + VALID_QUANTITY_WATCH + VALID_SALES_WATCH,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + INVALID_PRICE_DESC + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + PRICE_DESC_WATCH + INVALID_QUANTITY_DESC + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + INVALID_SALES_DESC,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Sales.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + INVALID_SALES_DESC,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_WATCH + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 124,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/product/DeleteProductCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * outside of the DeleteProductCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * same path through the DeleteProductCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DeleteProductCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private DeleteProductCommandParser parser \u003d new DeleteProductCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteProductCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DeleteProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 8,
      "-": 24,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/product/EditProductCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALES_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_WATCH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALES_DESC_BAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALES_DESC_WATCH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_BAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditProductCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private EditProductCommandParser parser \u003d new EditProductCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_BAG, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\", EditProductCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DESCRIPTION_DESC_BAG, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESCRIPTION_DESC_BAG, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS); // invalid price"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC, Quantity.MESSAGE_CONSTRAINTS); // invalid quantity"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SALES_DESC, Sales.MESSAGE_CONSTRAINTS); // invalid sales"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC + QUANTITY_DESC_BAG, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + PRICE_DESC_WATCH + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + INVALID_QUANTITY_DESC + VALID_SALES_BAG + VALID_PRICE_BAG,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_WATCH"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + QUANTITY_DESC_BAG + SALES_DESC_BAG + DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_BAG)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withPrice(VALID_PRICE_WATCH).withQuantity(VALID_QUANTITY_BAG).withSales(VALID_SALES_BAG)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_WATCH + QUANTITY_DESC_BAG;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_WATCH)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withQuantity(VALID_QUANTITY_BAG).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BAG).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_BAG;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_BAG).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_BAG;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptorBuilder().withQuantity(VALID_QUANTITY_BAG).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SALES_DESC_BAG;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptorBuilder().withSales(VALID_SALES_BAG).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_BAG + SALES_DESC_BAG + QUANTITY_DESC_BAG"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + PRICE_DESC_BAG + SALES_DESC_BAG + QUANTITY_DESC_BAG"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + PRICE_DESC_WATCH + SALES_DESC_WATCH + QUANTITY_DESC_WATCH;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_WATCH)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withQuantity(VALID_QUANTITY_WATCH).withSales(VALID_SALES_WATCH)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRICE_DESC + PRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_WATCH).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_WATCH + INVALID_PRICE_DESC + SALES_DESC_WATCH"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + PRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_WATCH).withQuantity(VALID_QUANTITY_WATCH)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withSales(VALID_SALES_WATCH).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 180,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/product/FindProductCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.FindProductCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class FindProductCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private FindProductCommandParser parser \u003d new FindProductCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                FindProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand expectedFindProductCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new FindProductCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindProductCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindProductCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 24,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ClearCustomerCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.ClearProductCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final InventorySystem addressBook \u003d new InventorySystem();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null, null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        addressBook.resetData(newData, ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        addressBook.resetData(newData, ClearProductCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // Two customers with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e newCustomers \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newCustomers);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ClearCustomerCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * A stub ReadOnlyInventorySystem whose customers list can violate interface constraints."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyInventorySystem {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        private final ObservableList\u003cCustomer\u003e customers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private final ObservableList\u003cProduct\u003e products \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddressBookStub(Collection\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            this.customers.setAll(customers);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getPersonList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return customers;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return products;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 11,
      "-": 84,
      "junhaotan": 19,
      "YingxuH": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(new InventorySystem(), new InventorySystem(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCustomerList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem differentAddressBook \u003d new InventorySystem();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        modelManager.updateFilteredCustomerList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        modelManager.updateFilteredCustomerList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 125,
      "junhaotan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/AddressTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/CustomerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class CustomerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e customer.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "junhaotan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/EmailTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "junhaotan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/PhoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/UniqueCustomerListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class UniqueCustomerListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final UniqueCustomerList uniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(uniqueCustomerList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(uniqueCustomerList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(uniqueCustomerList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCustomerList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueCustomerList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCustomerList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueCustomerList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setPersons((UniqueCustomerList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPersons(expectedUniqueCustomerList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setPersons((List\u003cCustomer\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e customerList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPersons(customerList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e listWithDuplicateCustomers \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCustomerList.setPersons(listWithDuplicateCustomers));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            -\u003e uniqueCustomerList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.ProductBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d new"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(predicate.test(new ProductBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(predicate.test(new ProductBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(predicate.test(new ProductBuilder().withDescription(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(predicate.test(new ProductBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(predicate.test(new ProductBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(predicate.test(new ProductBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"10\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(predicate.test(new ProductBuilder().withDescription(\"Bag\").withPrice(\"12345\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withQuantity(\"10\").withSales(\"10\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/DescriptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Black watch\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Very long description of black watch\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 36,
      "YingxuH": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/PriceTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"124293842033123\")); // long prices"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/SalesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class SalesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Sales(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_invalidSales_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String invalidSales \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidSales));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void isValidSales() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Sales.isValidSales(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Sales.isValidSales(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Sales.isValidSales(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Sales.isValidSales(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Sales.isValidSales(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Sales.isValidSales(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Sales.isValidSales(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Sales.isValidSales(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Sales.isValidSales(\"124293842033123\")); // long prices"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/QuantityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidQuantity));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"124293842033123\")); // long prices"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedCustomerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.storage.customer.JsonAdaptedCustomer.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.customer.JsonAdaptedCustomer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class JsonAdaptedCustomerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedCustomer(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedCustomer(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 89,
      "junhaotan": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedProductTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.storage.product.JsonAdaptedProduct.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.BAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.product.JsonAdaptedProduct;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedProductTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String INVALID_SALES \u003d \"example.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BAG.getDescription().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_PRICE \u003d BAG.getPrice().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_QUANTITY \u003d BAG.getQuantity().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_SALES \u003d BAG.getSales().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_validProductDetails_returnsProduct() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct person \u003d new JsonAdaptedProduct(BAG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(BAG, person.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(null, VALID_PRICE, VALID_QUANTITY, VALID_SALES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonAdaptedProduct(VALID_DESCRIPTION, INVALID_PRICE, VALID_QUANTITY, VALID_SALES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(VALID_DESCRIPTION, null, VALID_QUANTITY, VALID_SALES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_PRICE, INVALID_QUANTITY, VALID_SALES);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_PRICE, null, VALID_SALES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_invalidSales_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_PRICE, VALID_QUANTITY, INVALID_SALES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d Sales.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullSales_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_PRICE, VALID_QUANTITY, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Sales.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 83,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInventorySystem\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new JsonInventorySystemStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonInventorySystemStorage jsonAddressBookStorage \u003d new JsonInventorySystemStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ReadOnlyInventorySystem readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(original, new InventorySystem(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(original, new InventorySystem(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(original, new InventorySystem(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void saveAddressBook(ReadOnlyInventorySystem addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            new JsonInventorySystemStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new InventorySystem(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 14,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonSerializableInventorySystem dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                JsonSerializableInventorySystem.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonSerializableInventorySystem dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                JsonSerializableInventorySystem.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonSerializableInventorySystem dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                JsonSerializableInventorySystem.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInventorySystem.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonInventorySystemStorage addressBookStorage \u003d new JsonInventorySystemStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * {@link JsonInventorySystemStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ReadOnlyInventorySystem retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(original, new InventorySystem(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " *     {@code InventorySystem ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private InventorySystem addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        addressBook \u003d new InventorySystem();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public AddressBookBuilder(InventorySystem addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Adds a new {@code Customer} to the {@code InventorySystem} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public AddressBookBuilder withPerson(Customer customer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        addressBook.addPerson(customer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public InventorySystem build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7,
      "-": 24,
      "junhaotan": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code customer}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditPersonDescriptorBuilder(Customer customer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setName(customer.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setPhone(customer.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setEmail(customer.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setAddress(customer.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setTags(customer.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "junhaotan": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditProductDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A utility class to help with building EditProductDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private EditProductDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder(EditProductDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.descriptor \u003d new EditProductDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns an {@code EditProductDescriptor} with fields containing {@code product}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder(Product product) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setDescription(product.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setPrice(product.getPrice());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setQuantity(product.getQuantity());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setSales(product.getSales());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Description} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder withDescription(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setDescription(new Description(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Price} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder withPrice(String phone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setPrice(new Price(phone));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Quantity} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder withQuantity(String email) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setQuantity(new Quantity(email));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Sales} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder withSales(String address) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setSales(new Sales(address));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 70,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class to help with building Customer objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code customerToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public PersonBuilder(Customer customerToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        name \u003d customerToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        phone \u003d customerToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        email \u003d customerToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        address \u003d customerToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(customerToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Name} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Customer} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Address} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Phone} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Email} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Customer build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new Customer(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "junhaotan": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class for Customer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns an add command string for adding the {@code customer}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static String getAddCommand(Customer customer) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return AddCustomerCommand.COMMAND_WORD + \" \" + getPersonDetails(customer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the part of command string for the given {@code customer}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static String getPersonDetails(Customer customer) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_NAME + customer.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_PHONE + customer.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_EMAIL + customer.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_ADDRESS + customer.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        customer.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "junhaotan": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProductBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Sales;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A utility class to help with building Customer objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ProductBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Black watch\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"22\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"12\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_SALES \u003d \"44\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Sales sales;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        sales \u003d new Sales(DEFAULT_SALES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Initializes the ProductBuilder with the data of {@code productToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder(Product productToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        description \u003d productToCopy.getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        price \u003d productToCopy.getPrice();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        quantity \u003d productToCopy.getQuantity();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        sales \u003d productToCopy.getSales();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Description} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Price} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Sales} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withSales(String sales) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.sales \u003d new Sales(sales);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Product build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Product(description, price, quantity, sales);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 77,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the middle index of the customer in the {@code model}\u0027s customer list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCustomerList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the last index of the customer in the {@code model}\u0027s customer list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the customer in the {@code model}\u0027s customer list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static Customer getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return model.getFilteredCustomerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "junhaotan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Index INDEX_FIRST_PRODUCT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Index INDEX_SECOND_PRODUCT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Index INDEX_THIRD_PRODUCT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class containing a list of {@code Customer} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    // Manually added - Customer\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns an {@code InventorySystem} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static InventorySystem getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem ab \u003d new InventorySystem();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (Customer customer : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            ab.addPerson(customer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static List\u003cCustomer\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 4,
      "-": 55,
      "junhaotan": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalProducts.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_BAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A utility class containing a list of {@code Customer} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class TypicalProducts {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product ABACUS \u003d new ProductBuilder().withDescription(\"Abacus\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withPrice(\"12\").withQuantity(\"1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withSales(\"94351253\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product BOOK \u003d new ProductBuilder().withDescription(\"Beige Book\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withPrice(\"311\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"2\").withSales(\"98\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product CAMERA \u003d new ProductBuilder().withDescription(\"Camera\").withPrice(\"93\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"2\").withSales(\"123\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product DISC \u003d new ProductBuilder().withDescription(\"Disc\").withPrice(\"83\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"3\").withSales(\"154\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product EGG \u003d new ProductBuilder().withDescription(\"Egg\").withPrice(\"94\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"5\").withSales(\"543\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product FAN \u003d new ProductBuilder().withDescription(\"Fan\").withPrice(\"94\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"4\").withSales(\"678\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product GAME \u003d new ProductBuilder().withDescription(\"Game\").withPrice(\"92\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"8\").withSales(\"468\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product HAT \u003d new ProductBuilder().withDescription(\"Hat\").withPrice(\"84\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"22\").withSales(\"456\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product IPAD \u003d new ProductBuilder().withDescription(\"Ipad\").withPrice(\"81\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"37\").withSales(\"854\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Manually added - Customer\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product WATCH \u003d new ProductBuilder().withDescription(VALID_DESCRIPTION_WATCH)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withPrice(VALID_PRICE_WATCH)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(VALID_QUANTITY_WATCH).withSales(VALID_SALES_WATCH).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product BAG \u003d new ProductBuilder().withDescription(VALID_DESCRIPTION_BAG)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withPrice(VALID_PRICE_BAG)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(VALID_QUANTITY_BAG).withSales(VALID_SALES_BAG).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String KEYWORD_MATCHING_BEIGE \u003d \"Beige\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private TypicalProducts() {} // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns an {@code InventorySystem} with all the typical persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static InventorySystem getTypicalAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem ab \u003d new InventorySystem();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (Product product : getTypicalProducts()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            ab.addProduct(product);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static List\u003cProduct\u003e getTypicalProducts() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ABACUS, BAG, BOOK, CAMERA, DISC, EGG, FAN, GAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 73
    }
  }
]
