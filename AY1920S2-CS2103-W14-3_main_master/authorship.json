[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "//mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u0027site-name\u0027: \u0027Naggy Joel\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://ay1920s2-cs2103-w14-3.github.io/main/\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 10,
      "Vanessa1098": 2,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.storage.JsonRestaurantBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.storage.JsonSchedulerStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.storage.RestaurantBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.storage.SchedulerStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBookStorage restaurantBookStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new JsonRestaurantBookStorage(userPrefs.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchedulerStorage schedulerStorage \u003d new JsonSchedulerStorage(userPrefs.getSchedulerFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, restaurantBookStorage, schedulerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Optional\u003cReadOnlyRestaurantBook\u003e restaurantBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ReadOnlyAddressBook initialPersonsData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ReadOnlyRestaurantBook initialRestaurantsData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Optional\u003cReadOnlyScheduler\u003e schedulerOptional;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ReadOnlyScheduler initialAssignmentsData;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialPersonsData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialPersonsData \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialPersonsData \u003d new AddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            restaurantBookOptional \u003d storage.readRestaurantBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (!restaurantBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RestaurantBook\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            initialRestaurantsData \u003d restaurantBookOptional.orElseGet(SampleDataUtil::getSampleRestaurantBook);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RestaurantBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            initialRestaurantsData \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RestaurantBook\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            initialRestaurantsData \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            schedulerOptional \u003d storage.readScheduler();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (!schedulerOptional.isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty Scheduler.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialAssignmentsData \u003d schedulerOptional.orElse(new Scheduler());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Scheduler\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialAssignmentsData \u003d new Scheduler();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Scheduler\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialAssignmentsData \u003d new Scheduler();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new ModelManager(initialPersonsData, initialRestaurantsData, initialAssignmentsData, userPrefs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 177,
      "ElysiaTanZY": 26,
      "hhjoel": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX \u003d \"The assignment index is invalid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_INFO \u003d \"The person has no existing information!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_LINE_NUMBER \u003d \"Line number does not exist in person\u0027s information.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_FILTERS \u003d \"Too many filters! Either deadline or estimated completion\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"time can be used to sort each time.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 4,
      "-": 13,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons for the result panel*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonListResult();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assignments */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons with upcoming birthdays for the result panel*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cPerson\u003e getBdayList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 7,
      "-": 50,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText, model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (command.toString().contains(\"(ab)\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (command.toString().contains(\"(st\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                storage.saveScheduler(model.getScheduler());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonListResult() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return model.getFilteredPersonListResult();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return model.getBdayListResult();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 12,
      "-": 78,
      "ElysiaTanZY": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAssignmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Adds a new assignment to the Schoolwork Tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AddAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(st)add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Adds an assignment to the scheduler. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_ESTHOURS + \"ESTIMATED HOURS\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_TITLE + \"CS2103 Team Project \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_DEADLINE + \"04-18 23:59 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_ESTHOURS + \"180\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New assignment added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment has already been recorded. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Congratulations, you don\u0027t have a new assignment!! (\u003d\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Assignment toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Creates an AddAssignmentCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AddAssignmentCommand(Assignment assignment) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        toAdd \u003d assignment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (model.hasAssignment(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        model.addAssignment(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false, false, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "ElysiaTanZY": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Adds a person to the address book.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_BIRTHDAY + \"01-15 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 62,
      "ElysiaTanZY": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Adds an Event to the schedule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class AddEventCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddInfoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Adds a remark to an existing person in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AddInfoCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)addnote\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Store the additional information of the person identified\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If there is existing information, input will be added as new information \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"on new line.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_REMARK + \" [INFO]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_REMARK + \"Likes to swim.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"No remark added to Person: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddInfoCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!remark.value.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            personToEdit.getRemark().add(remark);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getEmail(), personToEdit.getAddress(), personToEdit.getRemark(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getBirthday(), personToEdit.getTags(), personToEdit.getIndex());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_EMPTY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof AddInfoCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand e \u003d (AddInfoCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRestaurantCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUISINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPERATING_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Adds a new assignment to the Schoolwork Tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class AddRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Adds a restaurant to the restaurant book.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_RESTAURANT + \"RESTAURANT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_OPERATING_HOURS + \"OPERATING_HOURS] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_CUISINE + \"CUISINE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_RESTAURANT + \"Ameens \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_LOCATION + \"Clementi \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_OPERATING_HOURS + \"0900:2300 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_PRICE + \"$ \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_CUISINE + \"Indian \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New restaurant added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d \"This restaurant already exists in the restaurant book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Restaurant toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Creates an AddAssignmentCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public AddRestaurantCommand(Restaurant restaurant) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        toAdd \u003d restaurant;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (model.hasRestaurant(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.addRestaurant(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Clears all entries from the address book.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \" Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 22,
      "ElysiaTanZY": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** The third panel should should display the specified person. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final boolean get;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** The third panel should should display the assignment list. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final boolean assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean get, boolean assignment) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.get \u003d get;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean isGet() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return get;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean isAssignment() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return assignment;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 19,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Deletes the person identified by the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"index number used in the displayed person list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 50,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteInfoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Deletes a remark of an existing person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DeleteInfoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)deletenote\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Delete the information of the person identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If there is existing information at the line number \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"it will be deleted.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER + \"LINE_NUMBER] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER + \" 2 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_REMOVE_REMARK_SUCCESS \u003d \"Deleted remark for Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_DELETE_REMARK \u003d \"No remark removed from Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int line;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param line number of a specific note in the information stored"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DeleteInfoCommand(Index index, int line) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (personToEdit.getRemark().get(0).equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_INFO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (line \u003e personToEdit.getRemark().size() || line \u003c 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            personToEdit.getRemark().remove(line - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getRemark(), personToEdit.getBirthday(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getTags(), personToEdit.getIndex());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Generates a command execution success message based on whether the remark is edited to or removed from"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String message \u003d (line \u003e personToEdit.getRemark().size() || line \u003c 0)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                ? MESSAGE_REMOVE_REMARK_SUCCESS : MESSAGE_NO_DELETE_REMARK;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof DeleteInfoCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        DeleteInfoCommand e \u003d (DeleteInfoCommand) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 line \u003d\u003d e.line;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Marks an existing assignment in the scheduler as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(st)done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Updates the status of the assignment identified. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"by the index number used in the displayed assignment list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_UPDATE_STATUS_SUCCESS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \"The status of %1$s have been updated! You have one less assignment now!! ^^\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_ALREADY_DONE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \"This assignment has already been completed, don\u0027t try to cheat me! Good Luck!! \u003d)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public DoneCommand(Index index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ObservableList\u003cAssignment\u003e lastShownList \u003d model.getAssignmentList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment assignmentToUpdate \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment updatedAssignment \u003d createUpdatedAssignment(assignmentToUpdate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (assignmentToUpdate.getStatus().toString().equals(Status.ASSIGNMENT_DONE)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_DONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        model.setAssignment(assignmentToUpdate, updatedAssignment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_STATUS_SUCCESS, updatedAssignment.getTitle().toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static Assignment createUpdatedAssignment(Assignment assignmentToUpdate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assert assignmentToUpdate !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Assignment(assignmentToUpdate.getTitle(), assignmentToUpdate.getDeadline(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                assignmentToUpdate.getWorkload(), new Status(Status.ASSIGNMENT_DONE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 4,
      "ElysiaTanZY": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Edits the details of the person identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e updatedRemark \u003d personToEdit.getRemark(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index updatedIndex \u003d editPersonDescriptor.getIndex().orElse(personToEdit.getIndex());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                updatedBirthday, updatedTags, updatedIndex);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        private Birthday birthday;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        private ArrayList\u003cRemark\u003e remarks;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        private Index index;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            setBirthday(toCopy.birthday);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            setIndex(toCopy.index);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, birthday, tags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        public Optional\u003cIndex\u003e getIndex() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return Optional.ofNullable(index);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        public void setIndex(Index index) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    \u0026\u0026 getBirthday().equals(e.getBirthday())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 17,
      "-": 221,
      "ElysiaTanZY": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditInfoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Edit a remark of an existing person in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditInfoCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)editnote\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Edit the information of the person identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If there is existing information at the line number, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"it will be overwritten with the input indicated. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If note is empty, the input will be added as new note.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX and LINE_NUMBER (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER + \"LINE_NUMBER] \" + \"[\" + PREFIX_REMARK + \"INFO]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER + \" 2 \" + PREFIX_REMARK + \" Likes to swim.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EDIT_REMARK_SUCCESS \u003d \"Edited remark for Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"No remark edited for Person: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int line;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param line number of a specific note in the information stored"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditInfoCommand(Index index, int line, Remark remark) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, line, remark);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (personToEdit.getRemark().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_INFO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (line \u003e personToEdit.getRemark().size() \u0026\u0026 personToEdit.getRemark().size() !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!remark.value.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            personToEdit.getRemark().set(line - 1, remark);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getRemark(), personToEdit.getBirthday(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getTags(), personToEdit.getIndex());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Generates a command execution success message based on whether the remark is edited to or removed from"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_EDIT_REMARK_SUCCESS : MESSAGE_EMPTY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof EditInfoCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand e \u003d (EditInfoCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u0026\u0026 line \u003d\u003d e.line;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Exits the program.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.GroupContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Parameters: \" + COMMAND_WORD + \" [-g/GROUPNAME] [-n/WORD] [-t/TAG]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -g/NUS -n/Lim\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class); // for sarah\u0027s use"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final GroupContainsKeywordsPredicate groupnamePredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final NameContainsKeywordsPredicate wordPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final TagsContainsKeywordsPredicate tagPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FindCommand(GroupContainsKeywordsPredicate groupnamePredicate, NameContainsKeywordsPredicate wordPredicate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                       TagsContainsKeywordsPredicate tagPredicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // we split the different keywords into different predicates"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.groupnamePredicate \u003d groupnamePredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.wordPredicate \u003d wordPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.tagPredicate \u003d tagPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // check for emptiness. possible options are 000, 001, 010, 011, 100, 101, 110, 111"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // groupname, word, and tag IN THIS SPECIFIC ORDER"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // we don\u0027t do anything for 000"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (groupnamePredicate.size() \u003d\u003d 0 \u0026\u0026 wordPredicate.size() \u003d\u003d 0 \u0026\u0026 tagPredicate.size() !\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(tagPredicate); // 001"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (groupnamePredicate.size() \u003d\u003d 0 \u0026\u0026 wordPredicate.size() !\u003d 0 \u0026\u0026 tagPredicate.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(wordPredicate); // 010"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (groupnamePredicate.size() \u003d\u003d 0 \u0026\u0026 wordPredicate.size() !\u003d 0 \u0026\u0026 tagPredicate.size() !\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(wordPredicate.and(tagPredicate)); // 011"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (groupnamePredicate.size() !\u003d 0 \u0026\u0026 wordPredicate.size() \u003d\u003d 0 \u0026\u0026 tagPredicate.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(groupnamePredicate); // 100"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (groupnamePredicate.size() !\u003d 0 \u0026\u0026 wordPredicate.size() \u003d\u003d 0 \u0026\u0026 tagPredicate.size() !\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(groupnamePredicate.and(tagPredicate)); // 101"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (groupnamePredicate.size() !\u003d 0 \u0026\u0026 wordPredicate.size() !\u003d 0 \u0026\u0026 tagPredicate.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(groupnamePredicate.and(wordPredicate)); // 110"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (groupnamePredicate.size() !\u003d 0 \u0026\u0026 wordPredicate.size() !\u003d 0 \u0026\u0026 tagPredicate.size() !\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(groupnamePredicate.and(wordPredicate).and(tagPredicate));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // I don\u0027t know how to handle this now that I have split it into 3 predicates"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 37,
      "Vanessa1098": 2,
      "-": 34,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Lists a person in the address book to the user in detail."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class GetCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)get\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Displays all information relating to the contact.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":  \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final PersonExistPredicate index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the person in the filtered person list to retrieve information"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public GetCommand(PersonExistPredicate index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.updateFilteredPersonListResult(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                model.getFilteredPersonListResult().size()), false, false, true, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof GetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 index.equals(((GetCommand) other).index)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HELP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION1 \u003d \"Shows program usage instructions\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION2 \u003d \"Shows a command in detail.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION1 + \".\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + COMMAND_WORD + \": \" + COMMAND_FUNCTION2 + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: [\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + PREFIX_HELP + \"3 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE \u003d \"Here are the list of commands: \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"1. \" + AddCommand.COMMAND_WORD + \": \" + AddCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"2. \" + EditCommand.COMMAND_WORD + \": \" + EditCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"3. \" + DeleteCommand.COMMAND_WORD + \": \" + DeleteCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"4. \" + ListCommand.COMMAND_WORD + \": \" + ListCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"5. \" + AddInfoCommand.COMMAND_WORD + \": \" + AddInfoCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"6. \" + EditInfoCommand.COMMAND_WORD + \": \" + EditInfoCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"7. \" + DeleteInfoCommand.COMMAND_WORD + \": \" + DeleteInfoCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"8. \" + GetCommand.COMMAND_WORD + \": \" + GetCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"9. \" + FindCommand.COMMAND_WORD + \": \" + FindCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"10. \" + ClearCommand.COMMAND_WORD + \": \" + ClearCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"11. \" + AddAssignmentCommand.COMMAND_WORD + \": \" + AddAssignmentCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"12. \" + DoneCommand.COMMAND_WORD + \": \" + DoneCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"13. \" + ListAssignmentCommand.COMMAND_WORD + \": \" + ListAssignmentCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"14. \" + AddRestaurantCommand.COMMAND_WORD + \": \" + AddRestaurantCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"15. \" + ExitCommand.COMMAND_WORD + \": \" + ExitCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"16. \" + HelpCommand.COMMAND_WORD + \": \" + HelpCommand.COMMAND_FUNCTION1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \" OR \" + HelpCommand.COMMAND_FUNCTION2 + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"\\nYou can find out more on how a command works by typing the command help, and \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"specifying the command index.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: For (ab)delete - \" + COMMAND_WORD + \" h/ 3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cString\u003e COMMANDS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cString\u003e LIST_OF_COMMANDS \u003d commandList(COMMANDS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int type;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Creates an HelpCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public HelpCommand(int type) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Creates a list of all commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @return list of commands"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static ArrayList\u003cString\u003e commandList(ArrayList\u003cString\u003e commands) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"1. \" + AddCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"2. \" + EditCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"3. \" + DeleteCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"4. \" + ListCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"5. \" + AddInfoCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"6. \" + EditInfoCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"7. \" + DeleteInfoCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"8. \" + GetCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"9. \" + FindCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"10. \" + ClearCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"11. \" + AddAssignmentCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"12. \" + DoneCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"13. \" + ListAssignmentCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"14. \" + AddRestaurantCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"15. \" + ExitCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"16. \" + HelpCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (type \u003e COMMANDS.size()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (type \u003c 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new CommandResult(MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(LIST_OF_COMMANDS.get(type - 1) + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                + \"Type help to return to the list of commands.\", true, false, false, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 84,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAssignmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class ListAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(st)list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Shows a list of all assignments in the scheduler \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"sorted by alphabetical order, chronological order based on deadline or estimated hours.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":  \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: [\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_DEADLINE_LIST + \"] [\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_ESTHOURS_LIST + \"]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"-d to sort by DEADLINE, -e to sort by\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \" ESTIMATED HOURS, or neither to sort by \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"alphabetical order.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" OR \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_DEADLINE_LIST"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \" OR \" + COMMAND_WORD + \" \" + PREFIX_ESTHOURS_LIST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all assignments\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Comparator\u003cAssignment\u003e comparator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param comparator to be sorted in the filtered assignment list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ListAssignmentCommand(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.sortAssignment(comparator);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Shows a list of all persons in the address book.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":  \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 22,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAssignmentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parses input arguments and creates a new AddAssignmentCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AddAssignmentCommandParser implements Parser\u003cAddAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddAssignmentCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DEADLINE, PREFIX_ESTHOURS, PREFIX_TITLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DEADLINE, PREFIX_ESTHOURS, PREFIX_TITLE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Workload estTime \u003d ParserUtil.parseWorkload(argMultimap.getValue(PREFIX_ESTHOURS).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment assignment \u003d new Assignment(title, deadline, estTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new AddAssignmentCommand(assignment);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "ElysiaTanZY": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        PREFIX_REMARK, PREFIX_BIRTHDAY, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remark \u003d new ArrayList\u003c\u003e(); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).orElse(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (model \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d new Index(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d new Index(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, remark, birthday, tagList, index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 13,
      "-": 52,
      "ElysiaTanZY": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddInfoCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code AddInfoCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AddInfoCommandParser implements Parser\u003cAddInfoCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddInfoCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_REMARK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    AddInfoCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new AddInfoCommand(index, new Remark(remark));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRestaurantCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUISINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPERATING_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.AddRestaurantCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Parses input arguments and creates a new AddAssignmentCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class AddRestaurantCommandParser implements Parser\u003cAddRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return AddRestaurantCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddRestaurantCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RESTAURANT, PREFIX_LOCATION, PREFIX_OPERATING_HOURS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        PREFIX_PRICE, PREFIX_CUISINE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RESTAURANT, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Name name \u003d ParserUtil.parseNameR(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Hours hours \u003d ParserUtil.parseHours(argMultimap.getValue(PREFIX_OPERATING_HOURS).orElse(\"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).orElse(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Cuisine cuisine \u003d ParserUtil.parseCuisine(argMultimap.getValue(PREFIX_CUISINE).orElse(\"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cRemark\u003e remark \u003d new ArrayList\u003c\u003e(); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant restaurant \u003d new Restaurant(name, location, hours, price, cuisine, remark);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new AddRestaurantCommand(restaurant);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "hhjoel": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddRestaurantCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.DeleteInfoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.EditInfoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.GetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.ListAssignmentCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Command parseCommand(String userInput, Model model) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case AddRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddRestaurantCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        case AddAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddAssignmentCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case ListAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListAssignmentCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new DoneCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new EditCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new DeleteCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new FindCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case AddInfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddInfoCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case EditInfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new EditInfoCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case DeleteInfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new DeleteInfoCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new HelpCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case GetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new GetCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 32,
      "-": 72,
      "ElysiaTanZY": 5,
      "hhjoel": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_ESTHOURS \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_LIST \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_ESTHOURS_LIST \u003d new Prefix(\"-e\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_LINE_NUMBER \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_HELP \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_RESTAURANT \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_OPERATING_HOURS \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_CUISINE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 5,
      "-": 15,
      "ElysiaTanZY": 4,
      "hhjoel": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DeleteCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteInfoCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.DeleteInfoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code DeleteInfoCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DeleteInfoCommandParser implements Parser\u003cDeleteInfoCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DeleteInfoCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_LINE_NUMBER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    AddInfoCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int line \u003d Integer.parseInt(argMultimap.getAllValues(PREFIX_LINE_NUMBER).get(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new DeleteInfoCommand(index, line);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DoneCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new DoneCommand(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "ElysiaTanZY": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_BIRTHDAY, PREFIX_REMARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 5,
      "-": 80,
      "ElysiaTanZY": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditInfoCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.EditInfoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code EditInfoCommand} object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditInfoCommandParser implements Parser\u003cEditInfoCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditInfoCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_LINE_NUMBER, PREFIX_REMARK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    EditInfoCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int line \u003d Integer.parseInt(argMultimap.getAllValues(PREFIX_LINE_NUMBER).get(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new EditInfoCommand(index, line, new Remark(remark));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.GroupContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // for sarah\u0027s use"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public FindCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArrayList\u003cString\u003e groupnameKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArrayList\u003cString\u003e wordKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // finally, this portion is CORRECT"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c nameKeywords.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (nameKeywords[i].contains(\"-g/\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                nameKeywords[i] \u003d nameKeywords[i].substring(3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                while (!nameKeywords[i].contains(\"-n/\") \u0026\u0026 !nameKeywords[i].contains(\"-t/\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        \u0026\u0026 i !\u003d nameKeywords.length) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    groupnameKeywords.add(nameKeywords[i]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    if (i \u003d\u003d nameKeywords.length) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c nameKeywords.length; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (nameKeywords[i].contains(\"-n/\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                nameKeywords[i] \u003d nameKeywords[i].substring(3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                while (!nameKeywords[i].contains(\"-g/\") \u0026\u0026 !nameKeywords[i].contains(\"-t/\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        \u0026\u0026 i !\u003d nameKeywords.length) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    wordKeywords.add(nameKeywords[i]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    if (i \u003d\u003d nameKeywords.length) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c nameKeywords.length; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (nameKeywords[i].contains(\"-t/\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                nameKeywords[i] \u003d nameKeywords[i].substring(3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                while (!nameKeywords[i].contains(\"-g/\") \u0026\u0026 !nameKeywords[i].contains(\"-n/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        \u0026\u0026 i !\u003d nameKeywords.length) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    tagKeywords.add(nameKeywords[i]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    if (i \u003d\u003d nameKeywords.length) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // debugging purposes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(\"The groupname Keywords are: \" + groupnameKeywords.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c groupnameKeywords.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            logger.info(groupnameKeywords.get(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(\"The word keywords are: \" + wordKeywords.size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c wordKeywords.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            logger.info(wordKeywords.get(i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(\"The tag keywords are: \" + tagKeywords.size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            logger.info(tagKeywords.get(i));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] groupnameKeywordsArray \u003d new String[groupnameKeywords.size()];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c groupnameKeywords.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            groupnameKeywordsArray[i] \u003d groupnameKeywords.get(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] wordKeywordsArray \u003d new String[wordKeywords.size()];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c wordKeywords.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            wordKeywordsArray[i] \u003d wordKeywords.get(i);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] tagKeywordsArray \u003d new String[tagKeywords.size()];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            tagKeywordsArray[i] \u003d tagKeywords.get(i);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        GroupContainsKeywordsPredicate groupnamePredicate \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new GroupContainsKeywordsPredicate(Arrays.asList(groupnameKeywordsArray));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        NameContainsKeywordsPredicate wordPredicate \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(wordKeywordsArray));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        TagsContainsKeywordsPredicate tagPredicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(tagKeywordsArray));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // must be passed in this order: groupname, word, tag predicates"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new FindCommand(groupnamePredicate, wordPredicate, tagPredicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 97,
      "Vanessa1098": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GetCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.GetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new GetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class GetCommandParser implements Parser\u003cGetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a GetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public GetCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new GetCommand(personExistPredicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code AddInfoCommand} object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public HelpCommand parse(String args, Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_HELP);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int type \u003d Integer.parseInt(argMultimap.getValue(PREFIX_HELP).orElse(\"-1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new HelpCommand(type);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListAssignmentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TOO_MANY_FILTERS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.ListAssignmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.DeadlineComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.TitleComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.WorkloadComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class ListAssignmentCommandParser implements Parser\u003cListAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ListAssignmentCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DEADLINE_LIST, PREFIX_ESTHOURS_LIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DEADLINE_LIST, PREFIX_ESTHOURS_LIST)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_TOO_MANY_FILTERS, ListAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_DEADLINE_LIST)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            DeadlineComparator deadlineComparator \u003d new DeadlineComparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListAssignmentCommand(deadlineComparator);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_ESTHOURS_LIST)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            WorkloadComparator workloadComparator \u003d new WorkloadComparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListAssignmentCommand(workloadComparator);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            TitleComparator titleComparator \u003d new TitleComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListAssignmentCommand(titleComparator);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    T parse(String userInput, Model model) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Birthday parseBirthday(String birthday) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Birthday.isValidDate(trimmedBirthday)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Birthday(trimmedBirthday);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String birthday} into a {@code Birthday}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given {@code Birthday} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String birthday} into a {@code Birthday}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Birthday} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static seedu.address.model.restaurant.Name parseNameR(String name) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!seedu.address.model.restaurant.Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new seedu.address.model.restaurant.Name(trimmedName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e remarks} into a {@code Set\u003cRemark\u003e}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static ArrayList\u003cRemark\u003e parseRemark(Collection\u003cString\u003e remarks) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(remarks);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cRemark\u003e remarkArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (String remarkName : remarks) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            remarkArrayList.add(parseRemark(remarkName));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return remarkArrayList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Location} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String hours} into a {@code Hours}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Hours} is invalid."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Hours parseHours(String hours) throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(hours);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedHours \u003d hours.trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Hours.isValidHours(trimmedHours)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Hours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Hours(trimmedHours);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Price} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String cuisine} into a {@code Cuisine}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Cuisine} is invalid."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Cuisine parseCuisine(String cuisine) throws ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(cuisine);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedCuisine \u003d cuisine.trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Cuisine.isValidCuisine(trimmedCuisine)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Cuisine.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Cuisine(trimmedCuisine);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String[] inputs \u003d trimmedDeadline.split(\" \");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (inputs.length !\u003d 2 || !Deadline.isValidDate(inputs[0]) || !Deadline.isValidTime(inputs[1])) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Deadline(inputs[0], inputs[1]);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Workload parseWorkload(String estTime) throws ParseException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(estTime);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedEstTime \u003d estTime.trim();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Workload.isValidDuration(trimmedEstTime)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Workload.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Workload(trimmedEstTime);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 26,
      "-": 124,
      "ElysiaTanZY": 68,
      "hhjoel": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setPersons(newData.getPersonsList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonsList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return persons.getBdayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 118,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    Predicate\u003cAssignment\u003e PREDICATE_SHOW_ALL_ASSIGNMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Predicate\u003cRestaurant\u003e PREDICATE_SHOW_ALL_RESTAURANTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list for the result panel*/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonListResult();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate} in the result panel."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces restaurant book data with the data in {@code restaurantBook}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void setRestaurantBook(ReadOnlyRestaurantBook restaurantBook);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /** Returns the RestaurantBook */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    ReadOnlyRestaurantBook getRestaurantBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a restaurant with the same identity as {@code restaurant} exists in the restaurant book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    boolean hasRestaurant(Restaurant restaurant);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Deletes the given restaurant."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant must exist in the restaurant book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void deleteRestaurant(Restaurant target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Adds the given restaurant."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code restaurant} must not already exist in the restaurant book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void addRestaurant(Restaurant restaurant);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the given restaurant {@code target} with {@code editedRestaurant}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant in the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * restaurant book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void setRestaurant(Restaurant target, Restaurant editedRestaurant);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /** Returns an unmodifiable view of the filtered restaurant list */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getFilteredRestaurantList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Updates the filter of the filtered restaurant list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Replaces scheduler data with the data in {@code scheduler}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void setScheduler(ReadOnlyScheduler scheduler);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /** Returns the Scheduler */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ReadOnlyScheduler getScheduler();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Adds the given assignment."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * {@code assigment} must not already exist in the scheduler."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void addAssignment(Assignment toAdd);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if an assignment with the same title and deadline as {@code assignment} exists in the scheduler."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    boolean hasAssignment(Assignment toAdd);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sorts the scheduler by the filter."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    void sortAssignment(Comparator\u003cAssignment\u003e comparator);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void setAssignment(Assignment assignmentToUpdate, Assignment updatedAssignment);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered assignment list */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Updates the filter of the filtered assignment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Bday List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable view of the list of contacts with birthdays in the next 5 days."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cPerson\u003e getBdayListResult();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 25,
      "-": 90,
      "ElysiaTanZY": 29,
      "hhjoel": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final RestaurantBook restaurantBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Scheduler scheduler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersonsResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final FilteredList\u003cRestaurant\u003e filteredRestaurants;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final FilteredList\u003cAssignment\u003e filteredAssignments;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final FilteredList\u003cPerson\u003e bdayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyRestaurantBook restaurantBook,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        ReadOnlyScheduler scheduler, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(addressBook, scheduler, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonsList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        filteredPersonsResult \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonsList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.restaurantBook \u003d new RestaurantBook(restaurantBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.scheduler \u003d new Scheduler(scheduler);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredRestaurants \u003d new FilteredList\u003c\u003e(this.restaurantBook.getRestaurantsList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(this.scheduler.getAssignmentsList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        bdayList \u003d new FilteredList\u003c\u003e(this.addressBook.getBdayList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this(new AddressBook(), new RestaurantBook(), new Scheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schoolwork Tracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setScheduler(ReadOnlyScheduler scheduler) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.scheduler.resetData(scheduler);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        scheduler.addAssignment(assignment);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return scheduler.hasAssignment(assignment);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void sortAssignment(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        scheduler.sortAssignment(comparator);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ReadOnlyScheduler getScheduler() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return scheduler;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment(Assignment target, Assignment markedAssignment) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(target, markedAssignment);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        scheduler.setAssignment(target, markedAssignment);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return filteredAssignments;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestaurantBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurantBook(ReadOnlyRestaurantBook restaurantBookBook) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurantBook.resetData(restaurantBook);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBook;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean hasRestaurant(Restaurant person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBook.hasRestaurant(person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void deleteRestaurant(Restaurant target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.removeRestaurant(target);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void addRestaurant(Restaurant person) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.addRestaurant(person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        updateFilteredRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(target, editedRestaurant);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.setRestaurant(target, editedRestaurant);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code versionedAddressBook} for the result panel"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonListResult() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return filteredPersonsResult;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        filteredPersonsResult.setPredicate(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 restaurantBook.equals(other.restaurantBook)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 scheduler.equals(other.scheduler)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 filteredPersonsResult.equals(other.filteredPersonsResult)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 filteredAssignments.equals(other.filteredAssignments)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 filteredRestaurants.equals(other.filteredRestaurants);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Assignment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return filteredAssignments;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        filteredAssignments.setPredicate(predicate);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Restaurant List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Restaurant} backed by the internal list of"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return filteredRestaurants;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredRestaurants.setPredicate(predicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Bday List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayListResult() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return bdayList;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 54,
      "-": 146,
      "ElysiaTanZY": 44,
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Unmodifiable view of the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable view of the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRestaurantBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Unmodifiable view of the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public interface ReadOnlyRestaurantBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns an unmodifiable view of the restaurant book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * This list will not contain any duplicate restaurants."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getRestaurantsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyScheduler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Unmodifiable view of the scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public interface ReadOnlyScheduler {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable view of the assignment list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * This list will not contain any duplicate assignments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignmentsList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "ElysiaTanZY": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RestaurantBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.UniqueRestaurantList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Duplicates are not allowed (by .isSameRestaurant comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class RestaurantBook implements ReadOnlyRestaurantBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final UniqueRestaurantList restaurants;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants \u003d new UniqueRestaurantList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public RestaurantBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Creates an RestaurantBook using the Restaurants in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public RestaurantBook(ReadOnlyRestaurantBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the contents of the restaurant list with {@code restaurants}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code restaurants} must not contain duplicate restaurants."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurants(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurants.setRestaurants(restaurants);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Resets the existing data of this {@code RestaurantBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void resetData(ReadOnlyRestaurantBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setRestaurants(newData.getRestaurantsList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //// restaurant-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a restaurant with the same identity as {@code restaurant} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean hasRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurants.contains(restaurant);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Adds a restaurant to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void addRestaurant(Restaurant p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the given restaurant {@code target} in the list with {@code editedRestaurant}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(editedRestaurant);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants.setRestaurant(target, editedRestaurant);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Removes {@code key} from this {@code RestaurantBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void removeRestaurant(Restaurant key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurants.asUnmodifiableObservableList().size() + \" restaurants\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getRestaurantsList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurants.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof RestaurantBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 restaurants.equals(((RestaurantBook) other).restaurants));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurants.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Scheduler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.AssignmentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Wraps all data at the scheduler level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Duplicates are not allowed (by .isSameAssignment comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Scheduler implements ReadOnlyScheduler {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final AssignmentList assignments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignments \u003d new AssignmentList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Scheduler() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Creates an AssignmentList using the Assignments in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Scheduler(ReadOnlyScheduler toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Replaces the contents of the assignment list with {@code assignments}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Must not contain duplicate assignments."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAssignments(ObservableList\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.assignments.setAssignments(assignments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Resets the existing data of this {@code AssignmentList} with {@code newData}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void resetData(ReadOnlyScheduler newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setAssignments(newData.getAssignmentsList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns true if an identical assignment as {@code assignment} exists in the scheduler."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return assignments.contains(assignment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Adds an assignment to the scheduler."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * The assignment must not already exist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignments.add(assignment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sort assignments in the scheduler"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * by the filter."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void sortAssignment(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignments.sort(comparator);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAssignment(Assignment target, Assignment markedAssignment) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(markedAssignment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignments.setAssignment(target, markedAssignment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void removeAssignment(Assignment key) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignments.remove(key);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentsList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof Scheduler // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 assignments.equals(((Scheduler) other).assignments));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return assignments.hashCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 60,
      "ElysiaTanZY": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Path restaurantBookFilePath \u003d Paths.get(\"data\" , \"restaurantbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Path schedulerFilePath \u003d Paths.get(\"data\", \"assignments.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schedulerFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setSchedulerFilePath(Path schedulerFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(schedulerFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schedulerFilePath \u003d schedulerFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 schedulerFilePath.equals(o.schedulerFilePath)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 restaurantBookFilePath.equals(o.restaurantBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, restaurantBookFilePath, schedulerFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        sb.append(\"Gui Settings : \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        sb.append(\"\\nLocal data file location : \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + addressBookFilePath"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + restaurantBookFilePath"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + schedulerFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "ElysiaTanZY": 10,
      "hhjoel": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Assignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an assignment that a user can keep track of."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Identity Fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Data Fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Workload estHours;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param title The description of the assignment to be completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param deadline The deadline by when the assignment needs to be completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param estHours The estimated hours required to complete the assignment."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment(Title title, Deadline deadline, Workload estHours) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(title, deadline, estHours);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d estHours;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d new Status(Status.ASSIGNMENT_OUTSTANDING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructor to be used when loading saved assignments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param title The description of the assignment to be completed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param deadline The deadline by when the assignment needs to be completed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param estHours The estimated hours required to complete the assignment."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param status The status of the assignment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment(Title title, Deadline deadline, Workload estHours, Status status) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(title, deadline, estHours);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d estHours;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Workload getWorkload() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return estHours;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        builder.append(\"Assignment: \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\"\\nDue Date: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\"\\nEstimated work hours: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getWorkload())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\"\\nStatus: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if both assignments are the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Two assignments are the same if they have the same title and deadline."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean isSameAssignment(Assignment otherAssignment) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (otherAssignment \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return otherAssignment !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 otherAssignment.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 (otherAssignment.getTitle().equals(getTitle()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/AssignmentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A list of assignments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * An assignment is considered unique by comparing using {@code Assignment#isSameAssignment(Assignment)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * As such, adding and updating of assignments uses Assignment#isSameAssignment(Assignment) for equality so as to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * ensure that the assignment being added or updated is unique in terms of identity in the AssignmentList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * @see Assignment#isSameAssignment(Assignment)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AssignmentList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAssignments(AssignmentList replacement) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e replacement) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!assignmentsAreUnique(replacement)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Adds an assignment to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void add(Assignment toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if the list contains an equivalent assignment as the given argument."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean contains(Assignment toCheck) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAssignment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Removes the equivalent assignment from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * The assignment must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void remove(Assignment toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sorts the scheduler list as an {@code ObservableList}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void sort(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //Comparator\u003cAssignment\u003e titleComparator \u003d new TitleComparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //SortedList\u003cAssignment\u003e sortedList \u003d new SortedList\u003c\u003e(internalList, titleComparator);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //internalList.setAll(sortedList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof AssignmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 internalList.equals(((AssignmentList) other).internalList));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment(Assignment target, Assignment markedAssignment) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(target, markedAssignment);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!target.isSameAssignment(markedAssignment) \u0026\u0026 contains(markedAssignment)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        internalList.set(index, markedAssignment);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns true if {@code assignment} contains only unique assignments."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private boolean assignmentsAreUnique(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size() - 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            for (int j \u003d i + 1; j \u003c assignments.size(); j++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                if (assignments.get(i).isSameAssignment(assignments.get(j))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 81,
      "ElysiaTanZY": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an Assignment\u0027s Deadline in the Schoolwork Tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)} and {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \"Deadline cannot be empty and has to be in MM-dd HH:mm (24-hour clock) format\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter inputDateFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"MM-dd\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .parseDefaulting(ChronoField.YEAR, 2020).toFormatter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter inputTimeFormat \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .appendPattern(\"HH:mm\").toFormatter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter outputDateFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter outputTimeFormat \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance variables"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code Deadline}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param date The due date of the assignment."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param time The time by which the assignment needs to be submitted on the due date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Deadline(String date, String time) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(date, time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        LocalDate parsedDate \u003d LocalDate.parse(date, inputDateFormat);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        LocalTime parsedTime \u003d LocalTime.parse(time, inputTimeFormat);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.of(parsedDate, parsedTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        dateTime \u003d dt;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Getter for datetime object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @return datetime of deadline"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param test The input date to be tested."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if date is not an empty string and follows the required format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            LocalDate.parse(test, inputDateFormat);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param test The input time to be tested."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if time is not an empty string and requires the required format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            LocalTime.parse(test, inputTimeFormat);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate parsedDate \u003d LocalDate.parse(date, inputDateFormat);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalTime parsedTime \u003d LocalTime.parse(time, inputTimeFormat);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return parsedDate.format(outputDateFormat) + \" \" + parsedTime.format(outputTimeFormat);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 date.equals(((Deadline) other).date) \u0026\u0026 time.equals(((Deadline) other).time)); // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 15,
      "ElysiaTanZY": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/DeadlineComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Compares deadline and sort them in chronological order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DeadlineComparator implements Comparator\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int compare(Assignment a1, Assignment a2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (a1.getDeadline().getDateTime().isEqual(a2.getDeadline().getDateTime())) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (Integer.parseInt(a1.getWorkload().estHours) \u003d\u003d Integer.parseInt(a2.getWorkload().estHours)) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (Integer.parseInt(a1.getWorkload().estHours) \u003e Integer.parseInt(a2.getWorkload().estHours)) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else if (a1.getDeadline().getDateTime().isAfter(a2.getDeadline().getDateTime())) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Status.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an Assignment\u0027s Status in the Schoolwork Tracker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String ASSIGNMENT_DONE \u003d \"Completed\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String ASSIGNMENT_OUTSTANDING \u003d \"Not completed\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance variable"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Status(String status) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Title.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an Assignment\u0027s Title in the Schoolwork Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Assignment title cannot be left empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code Title}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param title Title of the assignment to be stored."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(title);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param test The input title to be tested."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if description of assignment is not empty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/TitleComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Compares the title of assignment and sort the in alphabetical order"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class TitleComparator implements Comparator\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int compare(Assignment a1, Assignment a2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return a1.getTitle().title.compareTo(a2.getTitle().title);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Workload.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an Assignment\u0027s Workload in the Schoolwork Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDuration(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Workload {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Estimated workload cannot be left empty, \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"if no estimates can be made enter \u00270\u0027. Round off estimates to the nearest hour.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String estHours;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code Workload}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param estHours Estimated hours required to complete the assignment."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Workload(String estHours) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(estHours);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidDuration(estHours), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d estHours;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param test The input duration to be tested."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if the input duration contains only numbers and contains at least one digit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return estHours + \" hours\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "ElysiaTanZY": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/WorkloadComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Compares workload and sort in increasing order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class WorkloadComparator implements Comparator\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int compare(Assignment a1, Assignment a2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int workload1 \u003d Integer.parseInt(a1.getWorkload().estHours);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int workload2 \u003d Integer.parseInt(a2.getWorkload().estHours);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (workload1 \u003d\u003d workload2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (a1.getDeadline().getDateTime().isEqual(a2.getDeadline().getDateTime())) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (a1.getDeadline().getDateTime().isAfter(a2.getDeadline().getDateTime())) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else if (workload1 \u003e workload2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/AssignmentNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Signals that the operation is unable to find the specified assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AssignmentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/DuplicateAssignmentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Signals that the operation will result in duplicate Assignments (Assignments are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DuplicateAssignmentException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DuplicateAssignmentException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(\"Operation would result in duplicate assignments\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if a given string is a valid address or address field is not supplied."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Birthday.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents a Person\u0027s Birthday in the Address Book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Birthday {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Birthday has to be in MM-dd format\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"MM-dd\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .parseDefaulting(ChronoField.YEAR, 2020).toFormatter(Locale.ENGLISH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance variables"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String birthday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code Birthday}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param date A valid birthday (Non-null)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Birthday(String date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param test the input date to be tested."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if a given string is a valid birthday: Either empty or in the correct format required."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            LocalDate.parse(test, inputFormat);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (birthday.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate bday \u003d LocalDate.parse(birthday, inputFormat);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return bday.format(outputFormat);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof Birthday // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 birthday.equals(((Birthday) other).birthday)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return birthday.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if a given string is a valid email or the email field is empty."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "ElysiaTanZY": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/GroupContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Group} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class GroupContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public GroupContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter method for the number of keywords in the predicate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return Number of keywords in the Predicate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // this one need to edit when you have implemented Group"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof GroupContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 keywords.equals(((GroupContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter method for the number of keywords in the predicate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return Number of keywords in the Predicate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 8,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // for sarah\u0027s use"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Birthday birthday;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, ArrayList\u003cRemark\u003e remark,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                Birthday birthday, Set\u003cTag\u003e tags, Index index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.remarks.addAll(remark);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ArrayList\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Concatenates all the Person\u0027s tags together into one string."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * This is to be used by the TagsContainsKeywordsPredicate class"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return String of all concatenated tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String getTagsForPredicate() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String concatenatedTags \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (Iterator\u003cTag\u003e it \u003d tags.iterator(); it.hasNext(); ) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            Tag t \u003d it.next();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            concatenatedTags \u003d concatenatedTags + t.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return concatenatedTags;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 otherPerson.getBirthday().equals(getBirthday())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Objects.hash(name, phone, email, address, birthday, tags, index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\" Birthday: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getBirthday())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 23,
      "Vanessa1098": 15,
      "-": 118,
      "ElysiaTanZY": 9,
      "hhjoel": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonExistPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Group} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class PersonExistPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonExistPredicate(Index index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (person.getIndex().getZeroBased() \u003d\u003d index.getZeroBased()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof PersonExistPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 index.equals(((PersonExistPredicate) other).index)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Remark(@JsonProperty(\"remark\")String remark) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return \u0027[\u0027 + value + \u0027]\u0027;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagsContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag}s matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class TagsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // for sarah\u0027s use"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter method for the number of keywords in the predicate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return Number of keywords in the Predicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // we want to find whether they keyword matches any of the tags"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // DEBUGGING INFO"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(\"This is the person\u0027s tags concatenated into one line: \" + person.getName().fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(person.getTagsForPredicate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(\"These are the keywords we are checking up against\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            logger.info(keywords.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            logger.info(Boolean.toString(person.getTagsForPredicate().contains(keywords.get(i))));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(\"END\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //return keywords.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //.anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getTagsForPredicate(), keyword));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e person.getTagsForPredicate().contains(keyword));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // what is this equals here for?"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns a list of contacts whose birthday is in the upcoming 5 days."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ObservableList\u003cPerson\u003e result \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            String bDay \u003d internalList.get(i).getBirthday().birthday;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (!bDay.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                if (withinRange(bDay, currDate, currDate.plusDays(5))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    result.add(internalList.get(i));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Checks whether the birthday of the user\u0027s contact is within 5 days from the current date."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param bDay Birthday of contact."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param currDate Today\u0027s date."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param currDateAfter5Days Date 5 days from today."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @return Returns true if the contact\u0027s birthday is within the next 5 days from today."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException Thrown when bDay is empty."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private boolean withinRange(String bDay, LocalDate currDate, LocalDate currDateAfter5Days) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"MM-dd\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .parseDefaulting(ChronoField.YEAR, 2020).toFormatter(Locale.ENGLISH);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(bDay, inputFormat);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (date.compareTo(currDate) \u003e 0 \u0026\u0026 date.compareTo(currDateAfter5Days) \u003c 0) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "ElysiaTanZY": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Cuisine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Restaurant\u0027s cuisine in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCuisine(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Cuisine {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Cuisines should only contain alphanumeric characters and spaces\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*|^$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String cuisine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Cuisine}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param cuisine A valid cuisine."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Cuisine(String cuisine) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(cuisine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidCuisine(cuisine), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid cuisine."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidCuisine(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return cuisine;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Cuisine // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 cuisine.equals(((Cuisine) other).cuisine)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return cuisine.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Hours.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Restaurant\u0027s hours in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHours(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Hours {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Hours should only contain of this format XXXX:YYYY, where XXXX and YYYY are the opening \u0026 closing times.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"(([0-1][0-9][0-5][0-9]|[2][0-3][0-5][0-9]):([0-1][0-9][0-5][0-9]|[2][0-3][0-5][0-9]))|^$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String hours;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Hours}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param hours A valid hours."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Hours(String hours) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(hours);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidHours(hours), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid hours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidHours(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Hours // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 hours.equals(((Hours) other).hours)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return hours.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Location.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Person\u0027s location in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Locations should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String fullLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        fullLocation \u003d location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return fullLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 fullLocation.equals(((Location) other).fullLocation)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return fullLocation.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Restaurant\u0027s name in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Price.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Restaurant\u0027s price in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Prices should contain only dollar signs, but can be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Only dollar signs allowed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\$+|^$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 price.equals(((Price) other).price)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return price.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Remark(@JsonProperty(\"remark\")String remark) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \u0027[\u0027 + value + \u0027]\u0027;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Restaurant.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Restaurant {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // for sarah\u0027s use"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Hours hours;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Cuisine cuisine;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Restaurant(Name name, Location location, Hours hours, Price price, Cuisine cuisine,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                      ArrayList\u003cRemark\u003e remark) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(name, location);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.remarks.addAll(remark);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Hours getHours() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Cuisine getCuisine() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return cuisine;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ArrayList\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if both restaurants of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean isSameRestaurant(Restaurant otherRestaurant) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (otherRestaurant \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return otherRestaurant !\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getName().equals(getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 (otherRestaurant.getLocation().equals(getLocation()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!(other instanceof Restaurant)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant otherRestaurant \u003d (Restaurant) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return otherRestaurant.getName().equals(getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getHours().equals(getHours())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getCuisine().equals(getCuisine())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getRemark().equals(getRemark());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Objects.hash(name, location, hours, price, cuisine, remarks);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        builder.append(\"\\n\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nLocation: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nHours: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getHours())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nPrice Point: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nCuisine: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getCuisine())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nRemarks: \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        getRemark().forEach(builder::append);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/UniqueRestaurantList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.exceptions.DuplicateRestaurantException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.exceptions.RestaurantNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * A list of restaurants that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * A restaurant is considered unique by comparing using {@code Restaurant#isSameRestaurant(Restaurant)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * As such, adding and updating of restaurants uses Restaurant#isSameRestaurant(Restaurant) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * so as to ensure that the restaurant being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * UniqueRestaurantList. However, the removal of a restaurant uses Restaurant#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * as to ensure that the restaurant with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * @see Restaurant#isSameRestaurant(Restaurant)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class UniqueRestaurantList implements Iterable\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final ObservableList\u003cRestaurant\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final ObservableList\u003cRestaurant\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if the list contains an equivalent restaurant as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean contains(Restaurant toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRestaurant);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Adds a restaurant to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void add(Restaurant toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the restaurant {@code target} in the list with {@code editedRestaurant}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant in t"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * he list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(target, editedRestaurant);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new RestaurantNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!target.isSameRestaurant(editedRestaurant) \u0026\u0026 contains(editedRestaurant)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        internalList.set(index, editedRestaurant);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Removes the equivalent restaurant from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void remove(Restaurant toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new RestaurantNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurants(UniqueRestaurantList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the contents of this list with {@code restaurants}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code restaurants} must not contain duplicate restaurants."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurants(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(restaurants);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!restaurantsAreUnique(restaurants)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        internalList.setAll(restaurants);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Iterator\u003cRestaurant\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof UniqueRestaurantList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRestaurantList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if {@code restaurants} contains only unique restaurants."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private boolean restaurantsAreUnique(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c restaurants.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            for (int j \u003d i + 1; j \u003c restaurants.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                if (restaurants.get(i).isSameRestaurant(restaurants.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/exceptions/DuplicateRestaurantException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class DuplicateRestaurantException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public DuplicateRestaurantException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super(\"Operation would result in duplicate restaurants\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/exceptions/RestaurantNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class RestaurantNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cRemark\u003e EMPTY_REMARK \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cRemark\u003e SOME_REMARK \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final ArrayList\u003cseedu.address.model.restaurant.Remark\u003e SOMEMORE_REMARK \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Birthday EMPTY_BIRTHDAY \u003d new Birthday(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        SOME_REMARK.add(new Remark(\"Likes seafood\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), SOME_REMARK,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    new Birthday(\"01-25\"), getTagSet(\"friends\"), new Index(0)),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_REMARK, EMPTY_BIRTHDAY,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\"), new Index(1)),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_REMARK, new Birthday(\"05-18\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    getTagSet(\"neighbours\"), new Index(2)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_REMARK, EMPTY_BIRTHDAY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    getTagSet(\"family\"), new Index(3)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_REMARK, new Birthday(\"10-12\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    getTagSet(\"classmates\"), new Index(4)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), EMPTY_REMARK, EMPTY_BIRTHDAY,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    getTagSet(\"colleagues\"), new Index(5))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Restaurant[] getSampleRestaurants() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        SOMEMORE_REMARK.add(new seedu.address.model.restaurant.Remark(\"Place is clean\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Restaurant[] {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new Restaurant(new seedu.address.model.restaurant.Name(\"McDonalds\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    new Location(\"West Coast\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    new Hours(\"0000:0000\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    new Price(\"$\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    new Cuisine(\"Fast Food\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    SOMEMORE_REMARK)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static ReadOnlyRestaurantBook getSampleRestaurantBook() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBook sampleRb \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Restaurant sampleRestaurant : getSampleRestaurants()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            sampleRb.addRestaurant(sampleRestaurant);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return sampleRb;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 15,
      "-": 50,
      "ElysiaTanZY": 7,
      "hhjoel": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAssignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Jackson-friendly version of {@Link Assignment}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonAdaptedAssignment {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Assignment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String estHours;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssignment} with the given assignment details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonAdaptedAssignment(@JsonProperty(\"title\") String title, @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                             @JsonProperty(\"workload\") String estHours, @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d estHours;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts a given {@code Assignment} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonAdaptedAssignment(Assignment source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        deadline \u003d source.getDeadline().date + \" \" + source.getDeadline().time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        estHours \u003d source.getWorkload().estHours;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        status \u003d source.getStatus().status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code Assignment} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String[] timings \u003d deadline.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Deadline.isValidDate(timings[0]) || !Deadline.isValidTime(timings[1])) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(timings[0], timings[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (estHours \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    Workload.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Workload.isValidDuration(estHours)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(Workload.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Workload modelEstHours \u003d new Workload(estHours);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Status modelStatus \u003d new Status(status);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Assignment(modelTitle, modelDeadline, modelEstHours, modelStatus);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cJsonAdaptedRemark\u003e remark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String birthday;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            @JsonProperty(\"remark\") ArrayList\u003cJsonAdaptedRemark\u003e remark, @JsonProperty(\"birthday\") String birthday,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"index\") String index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (remark !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            this.remark.addAll(remark);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday \u003d source.getBirthday().birthday;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.addAll(source.getRemark().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .map(JsonAdaptedRemark::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        index \u003d Integer.toString(source.getIndex().getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cRemark\u003e modelRemark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (JsonAdaptedRemark r : remark) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            modelRemark.add(r.toModelType());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (birthday \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    Birthday.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Birthday.isValidDate(birthday)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Birthday modelBirthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final Index modelIndex \u003d new Index(Integer.parseInt(index));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                modelRemark, modelBirthday, modelTags, modelIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 22,
      "-": 107,
      "ElysiaTanZY": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRemark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Jackson-friendly version of {@link Remark}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "class JsonAdaptedRemark {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String remarkName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Constructs a {@code JsonAdaptedRemark} with the given {@code remarkName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public JsonAdaptedRemark(String remarkName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remarkName \u003d remarkName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public JsonAdaptedRemark(Remark source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarkName \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String getRemarkName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return remarkName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Converts this Jackson-friendly adapted remark object into the model\u0027s {@code Remark} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted remark."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Remark toModelType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Remark(remarkName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRemarkR.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Remark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Jackson-friendly version of {@link Remark}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "class JsonAdaptedRemarkR {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String remarkName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code JsonAdaptedRemark} with the given {@code remarkName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonAdaptedRemarkR(String remarkName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.remarkName \u003d remarkName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonAdaptedRemarkR(Remark source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        remarkName \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String getRemarkName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return remarkName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts this Jackson-friendly adapted remark object into the model\u0027s {@code Remark} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted remark."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Remark toModelType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Remark(remarkName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRestaurant.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Jackson-friendly version of {@link Restaurant}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "class JsonAdaptedRestaurant {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Restaurant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String hours;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final ArrayList\u003cJsonAdaptedRemarkR\u003e remark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String cuisine;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code JsonAdaptedRestaurant} with the given restaurant details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonAdaptedRestaurant(@JsonProperty(\"name\") String name, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                                 @JsonProperty(\"hours\") String hours, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                                 @JsonProperty(\"remark\") ArrayList\u003cJsonAdaptedRemarkR\u003e remark,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                                 @JsonProperty(\"cuisine\") String cuisine,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                                 @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (remark !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            this.remark.addAll(remark);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts a given {@code Restaurant} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonAdaptedRestaurant(Restaurant source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        location \u003d source.getLocation().fullLocation;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        hours \u003d source.getHours().hours;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        price \u003d source.getPrice().price;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        cuisine \u003d source.getCuisine().cuisine;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        remark.addAll(source.getRemark().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .map(JsonAdaptedRemarkR::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts this Jackson-friendly adapted restaurant object into the model\u0027s {@code Restaurant} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted restaurant."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Restaurant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (hours \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hours.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Hours.isValidHours(hours)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Hours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Hours modelHours \u003d new Hours(hours);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (cuisine \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cuisine.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Cuisine.isValidCuisine(cuisine)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Cuisine.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Cuisine modelCuisine \u003d new Cuisine(cuisine);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final ArrayList\u003cRemark\u003e modelRemark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (JsonAdaptedRemarkR r : remark) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            modelRemark.add(r.toModelType());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Restaurant(modelName, modelLocation, modelHours, modelPrice, modelCuisine, modelRemark);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRestaurantBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * A class to access RestaurantBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class JsonRestaurantBookStorage implements RestaurantBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRestaurantBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonRestaurantBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return readRestaurantBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Similar to {@link #readRestaurantBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Optional\u003cJsonSerializableRestaurantBook\u003e jsonRestaurantBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                filePath, JsonSerializableRestaurantBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!jsonRestaurantBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return Optional.of(jsonRestaurantBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        saveRestaurantBook(restaurantBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Similar to {@link #saveRestaurantBook(ReadOnlyRestaurantBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(restaurantBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRestaurantBook(restaurantBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSchedulerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A class to access Scheduler data stored on a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonSchedulerStorage implements SchedulerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSchedulerStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonSchedulerStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return readScheduler(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Similar to {@link #readScheduler()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Optional\u003cJsonSerializableScheduler\u003e jsonScheduler \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                filePath, JsonSerializableScheduler.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!jsonScheduler.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return Optional.of(jsonScheduler.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        saveScheduler(scheduler, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Similar to {@link #saveScheduler(ReadOnlyScheduler)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(scheduler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableScheduler(scheduler), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        persons.addAll(source.getPersonsList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRestaurantBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * An Immutable RestaurantBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "@JsonRootName(value \u003d \"restaurantbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "class JsonSerializableRestaurantBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Restaurants list contains duplicate restaurant(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final List\u003cJsonAdaptedRestaurant\u003e restaurants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code JsonSerializableRestaurantBook} with the given restaurants."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonSerializableRestaurantBook(@JsonProperty(\"restaurants\") List\u003cJsonAdaptedRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurants.addAll(restaurants);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts a given {@code ReadOnlyRestaurantBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRestaurantBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonSerializableRestaurantBook(ReadOnlyRestaurantBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants.addAll(source"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .getRestaurantsList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .map(JsonAdaptedRestaurant::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts this restaurant book into the model\u0027s {@code RestaurantBook} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public RestaurantBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBook restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (JsonAdaptedRestaurant jsonAdaptedRestaurant : restaurants) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            Restaurant restaurant \u003d jsonAdaptedRestaurant.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (restaurantBook.hasRestaurant(restaurant)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            restaurantBook.addRestaurant(restaurant);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBook;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableScheduler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * An unmodifiable scheduler that is serializable in JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "@JsonRootName(value \u003d \"scheduler\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonSerializableScheduler {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"Assignment list contains duplicate assignments.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final List\u003cJsonAdaptedAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given assignments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonSerializableScheduler(@JsonProperty(\"assignments\") List\u003cJsonAdaptedAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.assignments.addAll(assignments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts a given {@code ReadOnlyScheduler} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableScheduler}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonSerializableScheduler(ReadOnlyScheduler source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignments.addAll(source.getAssignmentsList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .map(JsonAdaptedAssignment::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts this scheduler into the model\u0027s {@code Scheduler} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Scheduler toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Scheduler scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (JsonAdaptedAssignment jsonAdaptedAssignment : assignments) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            Assignment assignment \u003d jsonAdaptedAssignment.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (scheduler.hasAssignment(assignment)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            scheduler.addAssignment(assignment);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return scheduler;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RestaurantBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a storage for {@link seedu.address.model.RestaurantBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public interface RestaurantBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns RestaurantBook data as a {@link ReadOnlyRestaurantBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @see #getRestaurantBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Saves the given {@link ReadOnlyRestaurantBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param restaurantBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @see #saveRestaurantBook(ReadOnlyRestaurantBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/SchedulerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Scheduler}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public interface SchedulerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Path getSchedulerFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns Scheduler data as a {@link ReadOnlyScheduler}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @see #getSchedulerFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Saves the given {@link ReadOnlyScheduler} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param scheduler cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @see #saveScheduler(ReadOnlyScheduler) (ReadOnlyScheduler)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public interface Storage extends AddressBookStorage, RestaurantBookStorage, UserPrefsStorage, SchedulerStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Path getSchedulerFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "ElysiaTanZY": 9,
      "hhjoel": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private RestaurantBookStorage restaurantBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private SchedulerStorage schedulerStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                          RestaurantBookStorage restaurantBookStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                          SchedulerStorage schedulerStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurantBookStorage \u003d restaurantBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schedulerStorage \u003d schedulerStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestaurantBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBookStorage.getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return readRestaurantBook(restaurantBookStorage.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBookStorage.readRestaurantBook(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        saveRestaurantBook(restaurantBook, restaurantBookStorage.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBookStorage.saveRestaurantBook(restaurantBook, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Scheduler methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schedulerStorage.getSchedulerFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return readScheduler(schedulerStorage.getSchedulerFilePath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schedulerStorage.readScheduler(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        saveScheduler(scheduler, schedulerStorage.getSchedulerFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schedulerStorage.saveScheduler(scheduler, filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "ElysiaTanZY": 33,
      "hhjoel": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AssignmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private HBox assignmentCardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private FlowPane status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label workload;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AssignmentCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        deadline.setText(assignment.getDeadline().date + \" \" + assignment.getDeadline().time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        title.setText(assignment.getTitle().title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        status.getChildren().add(new Label(assignment.getStatus().status));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        workload.setText(assignment.getWorkload().estHours);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AssignmentCard card \u003d (AssignmentCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AssignmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ListView\u003cAssignment\u003e assignmentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AssignmentListPanel(ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignmentListView.setItems(assignmentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignmentListView.setCellFactory(listView -\u003e new AssignmentListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    class AssignmentListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(new AssignmentCard(assignment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String HELP_MESSAGE \u003d HelpCommand.MESSAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private PersonListPanelDetail personListPanel2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private AssignmentListPanel assignmentListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private PersonListBdayPanel personBdayPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private StackPane personListPanelPlaceholder2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personBdayPanel \u003d new PersonListBdayPanel(logic.getBdayList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(personBdayPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Display specified person on third panel."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private void handleGet() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personListPanel2 \u003d new PersonListPanelDetail(logic.getFilteredPersonListResult());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(personListPanel2.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Display assignment on third panel."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private void handleAssignment() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignmentListPanel \u003d new AssignmentListPanel(logic.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            /*if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (commandResult.isGet()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                handleGet();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (commandResult.isAssignment()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                handleAssignment();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 32,
      "-": 191,
      "ElysiaTanZY": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday.setText(person.getBirthday().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String remarkValue \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        while (i \u003c person.getRemark().size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            remarkValue +\u003d person.getRemark().get(i).value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (i !\u003d person.getRemark().size() - 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                remarkValue +\u003d \", \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.setText(remarkValue);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 13,
      "-": 74,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCardBday.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A UI component that displays the information of a person whose birthday is upcoming."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class PersonCardBday extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String FXML \u003d \"PersonListBdayCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public PersonCardBday(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday.setText(person.getBirthday().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String remarkValue \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        while (i \u003c person.getRemark().size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            remarkValue +\u003d person.getRemark().get(i).value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (i !\u003d person.getRemark().size() - 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                remarkValue +\u003d \", \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        remark.setText(remarkValue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        PersonCardBday card \u003d (PersonCardBday) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCardDetail.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class PersonCardDetail extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"PersonListCardDetail.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private HBox cardPaneDetail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonCardDetail(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        phone.setText(\"Phone: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        address.setText(\"Address: \" + person.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        email.setText(\"Email: \" + person.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        birthday.setText(\"Birthday: \" + person.getBirthday().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String remarkValue \u003d \"\\nRemarks:\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        while (i \u003c person.getRemark().size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            int index \u003d i + 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            remarkValue +\u003d \"\\t\" + index + \". \" + person.getRemark().get(i).value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (i !\u003d person.getRemark().size() - 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                remarkValue +\u003d \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.setText(remarkValue);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        PersonCardDetail card \u003d (PersonCardDetail) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListBdayPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Panel containing the list of Persons whose birthday is upcoming (in the next 5 days)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class PersonListBdayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String FXML \u003d \"personListBdayPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListBdayPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public PersonListBdayPanel(ObservableList\u003cPerson\u003e bdayList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListView.setItems(bdayList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListBdayPanel.PersonBdayViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    class PersonBdayViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanelDetail.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class PersonListPanelDetail extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanelDetail.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ListView\u003cPerson\u003e personView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonListPanelDetail(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(new PersonCardDetail(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 46
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cHBox id\u003d\"assignmentCardPane\" fx:id\u003d\"assignmentCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"status\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"workload\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$workload\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 35
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cListView fx:id\u003d\"assignmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cfx:root maxHeight\u003d\"600.0\" minHeight\u003d\"600.0\" minWidth\u003d\"600.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "      \u003cVBox maxWidth\u003d\"800.0\" minHeight\u003d\"600.0\" minWidth\u003d\"600.0\" prefHeight\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" minHeight\u003d\"30.0\" prefWidth\u003d\"1000.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.29797979797979796, 0.5\" minHeight\u003d\"500.0\" minWidth\u003d\"600.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003cAnchorPane maxHeight\u003d\"500.0\" minHeight\u003d\"450.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"500.0\" prefWidth\u003d\"350.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                         \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" layoutX\u003d\"32.0\" layoutY\u003d\"-5.0\" maxHeight\u003d\"500.0\" maxWidth\u003d\"405.0\" minHeight\u003d\"378.0\" minWidth\u003d\"287.0\" prefHeight\u003d\"414.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"86.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                         \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" layoutX\u003d\"29.0\" layoutY\u003d\"427.0\" maxWidth\u003d\"350.0\" minWidth\u003d\"246.0\" prefHeight\u003d\"73.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"427.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003cAnchorPane maxHeight\u003d\"694.0\" minHeight\u003d\"450.0\" minWidth\u003d\"400.0\" prefHeight\u003d\"694.0\" prefWidth\u003d\"400.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                          \u003cVBox fx:id\u003d\"personList\" layoutX\u003d\"28.0\" layoutY\u003d\"-3.0\" maxWidth\u003d\"500.0\" minHeight\u003d\"400.0\" minWidth\u003d\"340.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" minHeight\u003d\"162.0\" minWidth\u003d\"291.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003cAnchorPane maxHeight\u003d\"599.0\" minHeight\u003d\"450.0\" minWidth\u003d\"189.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"122.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cVBox fx:id\u003d\"personCard\" minHeight\u003d\"400.0\" minWidth\u003d\"165.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"189.33333333333334\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder2\" layoutX\u003d\"-51.0\" layoutY\u003d\"128.0\" maxHeight\u003d\"600.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"556.0\" minWidth\u003d\"160.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"189.33333333333334\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 38,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/PersonListBdayCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 36
    }
  },
  {
    "path": "src/main/resources/view/PersonListBdayPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 36,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListCardDetail.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPaneDetail\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 38
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanelDetail.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cListView fx:id\u003d\"personView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.storage.JsonRestaurantBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.storage.JsonSchedulerStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        JsonRestaurantBookStorage restaurantBookStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new JsonRestaurantBookStorage(temporaryFolder.resolve(\"restaurantBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSchedulerStorage schedulerStorage \u003d new JsonSchedulerStorage(temporaryFolder.resolve(\"assignments.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantBookStorage,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                schedulerStorage,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String deleteCommand \u003d \"(ab)delete 9\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        JsonRestaurantBookStorage restaurantBookStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new JsonRestaurantBookIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        .resolve(\"ioExceptionRestaurantBook.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSchedulerStorage schedulerStorage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonSchedulerStorage(temporaryFolder.resolve(\"ioExceptionAssignments.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantBookStorage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                schedulerStorage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + BIRTHDAY_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        System.out.println(expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static class JsonRestaurantBookIoExceptionThrowingStub extends JsonRestaurantBookStorage {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        private JsonRestaurantBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 157,
      "ElysiaTanZY": 9,
      "hhjoel": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                model.getRestaurantBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonsList().get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ElysiaTanZY": 2,
      "hhjoel": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public ReadOnlyScheduler getScheduler() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonListResult() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        public void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public void setRestaurantBook(ReadOnlyRestaurantBook restaurantBook) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public boolean hasRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public void deleteRestaurant(Restaurant target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public void addRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public void setScheduler(ReadOnlyScheduler scheduler) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public void addAssignment(Assignment toAdd) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public boolean hasAssignment(Assignment toAdd) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        public void sortAssignment(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public void setAssignment(Assignment assignmentToUpdate, Assignment updatedAssignment) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public ObservableList\u003cPerson\u003e getBdayListResult() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 34,
      "-": 194,
      "ElysiaTanZY": 31,
      "hhjoel": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddInfoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "class AddInfoCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new Scheduler(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_addInfoUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int size \u003d editedPerson.getRemark().size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(INDEX_FIRST_PERSON, editedPerson.getRemark().get(size - 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(AddInfoCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new Scheduler(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandSuccess(addInfoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int size \u003d editedPerson.getRemark().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(INDEX_FIRST_PERSON, editedPerson.getRemark().get(size - 1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(AddInfoCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new Scheduler(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandSuccess(addInfoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand remarkCommand \u003d new AddInfoCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonsList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandFailure(addInfoCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final AddInfoCommand standardCommand \u003d new AddInfoCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand commandWithSameValues \u003d new AddInfoCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(new AddInfoCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY))));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(new AddInfoCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_BOB))));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 115,
      "ElysiaTanZY": 4,
      "hhjoel": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ElysiaTanZY": 2,
      "hhjoel": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_BIRTHDAY_AMY \u003d \"05-31\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_BIRTHDAY_BOB \u003d \"08-25\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Likes skiing.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String VALID_INDEX \u003d \"0\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"31-05\"; // wrong format for date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_TITLE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_DEADLINE \u003d \"03-31 23:59\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_ESTHOURS \u003d \"24\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String TITLE_DESC \u003d \" \" + PREFIX_TITLE + VALID_TITLE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String ESTHOURS_DESC \u003d \" \" + PREFIX_ESTHOURS + VALID_ESTHOURS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 125,
      "ElysiaTanZY": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new Scheduler(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonsList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "ElysiaTanZY": 2,
      "hhjoel": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new Scheduler(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new Scheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new Scheduler(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new Scheduler(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new Scheduler(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonsList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonsList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 164,
      "ElysiaTanZY": 8,
      "hhjoel": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditInfoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "class EditInfoCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new Scheduler(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_editInfoUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int size \u003d editedPerson.getRemark().size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand editInfoCommand \u003d new EditInfoCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                1, editedPerson.getRemark().get(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(EditInfoCommand.MESSAGE_EDIT_REMARK_SUCCESS, firstPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new Scheduler(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandSuccess(editInfoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int size \u003d editedPerson.getRemark().size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand editInfoCommand \u003d new EditInfoCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                1, editedPerson.getRemark().get(0));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(EditInfoCommand.MESSAGE_EDIT_REMARK_SUCCESS, firstPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new Scheduler(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandSuccess(editInfoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand editInfoCommand \u003d new EditInfoCommand(outOfBoundIndex, 1, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandFailure(editInfoCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonsList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand editInfoCommand \u003d new EditInfoCommand(outOfBoundIndex, 1, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandFailure(editInfoCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final EditInfoCommand standardCommand \u003d new EditInfoCommand(INDEX_FIRST_PERSON, 1,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand commandWithSameValues \u003d new EditInfoCommand(INDEX_FIRST_PERSON, 1,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(new EditInfoCommand(INDEX_SECOND_PERSON, 1,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY))));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(new EditInfoCommand(INDEX_FIRST_PERSON, 1,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_BOB))));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 117,
      "ElysiaTanZY": 4,
      "hhjoel": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different birthday -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "ElysiaTanZY": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, true, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new Scheduler(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new Scheduler(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // All commented out tests need to be re-written (TBD by sarah)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 10,
      "-": 70,
      "ElysiaTanZY": 1,
      "hhjoel": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_helpChooseCommand_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int index \u003d 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.LIST_OF_COMMANDS.get(index - 1) + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                + \"Type help to return to the list of commands.\", true, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandSuccess(new HelpCommand(index), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_helpList_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandSuccess(new HelpCommand(-1), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 11,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new Scheduler(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "ElysiaTanZY": 1,
      "hhjoel": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // multiple birthdays - last birthday accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + BIRTHDAY_DESC_AMY + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_tagMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + BIRTHDAY_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_emailMissing_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withEmail(\"\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_addressMissing_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no address"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withAddress(\"\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_birthdayMissing_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no birthday"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withBirthday(\"\").build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid birthday"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + INVALID_BIRTHDAY_DESC + VALID_TAG_FRIEND, Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_BIRTHDAY_DESC,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 113,
      "ElysiaTanZY": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddInfoCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AddInfoCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private AddInfoCommandParser parser \u003d new AddInfoCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand expectedCommand \u003d new AddInfoCommand(INDEX_FIRST_PERSON, new Remark(nonEmptyRemark));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedCommand \u003d new AddInfoCommand(INDEX_FIRST_PERSON, new Remark(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInfoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, AddInfoCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, AddInfoCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, null) instanceof ClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", null) instanceof ClearCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor), null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, null) instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", null) instanceof ExitCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // needs to be re-written (tbd by sarah)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, null) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", null) instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, null) instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", null) instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parseCommand_remark() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final Remark remark \u003d new Remark(\"Some remark.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand command \u003d (AddInfoCommand) parser.parseCommand(AddInfoCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark.value, null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertEquals(new AddInfoCommand(INDEX_FIRST_PERSON, remark), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            -\u003e parser.parseCommand(\"\", null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\", null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 4,
      "Vanessa1098": 23,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            Command command \u003d parser.parse(userInput, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            parser.parse(userInput, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, \"1 u/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BIRTHDAY_DESC, Birthday.MESSAGE_CONSTRAINTS); // invalid birthday"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // birthday"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 205,
      "ElysiaTanZY": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditInfoCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.EditInfoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditInfoCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private EditInfoCommandParser parser \u003d new EditInfoCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int lineNum \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_LINE_NUMBER"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                + lineNum + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand expectedCommand \u003d new EditInfoCommand(INDEX_FIRST_PERSON, 1, new Remark(nonEmptyRemark));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_LINE_NUMBER + lineNum + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedCommand \u003d new EditInfoCommand(INDEX_FIRST_PERSON, 1, new Remark(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditInfoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, EditInfoCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, EditInfoCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                + PREFIX_LINE_NUMBER + lineNum + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    To be re-written by Sarah"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \"  \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"31-05\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d \"05-31\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parseBirthday_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((String) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parseBirthday_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parseBirthday_validValueWithoutWhitespace_returnsBirthday() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedBirthday, ParserUtil.parseBirthday(VALID_BIRTHDAY));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parseBirthday_validValueWithWhitespace_returnsTrimmedBirthday() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String birthdayWithWhitespace \u003d WHITESPACE + VALID_BIRTHDAY + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedBirthday, ParserUtil.parseBirthday(birthdayWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 191,
      "ElysiaTanZY": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonsList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonsList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonsList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBook restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Scheduler scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, restaurantBook, scheduler, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, restaurantBook, scheduler, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, restaurantBook, scheduler, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, restaurantBook, scheduler, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, restaurantBook, scheduler, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 127,
      "ElysiaTanZY": 1,
      "hhjoel": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BirthdayTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class BirthdayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_invalidBirthday_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String invalidBirthday \u003d \"31-05\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Birthday.isValidDate(\"31-05\")); // Wrong date format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Birthday.isValidDate(\"05-31\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different birthday -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "ElysiaTanZY": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RemarkTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Remark remark \u003d new Remark(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Remark remarkCopy \u003d new Remark(remark.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(remark.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(remark.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(remark.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Remark differentRemark \u003d new Remark(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(remark.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"31-05\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String VALID_INDEX \u003d BENSON.getIndex().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_TAGS, VALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_TAGS, VALID_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_TAGS, VALID_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_TAGS, VALID_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_TAGS, VALID_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_TAGS, VALID_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_TAGS, VALID_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, remarks,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        INVALID_BIRTHDAY, VALID_TAGS, VALID_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, invalidTags, VALID_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 43,
      "-": 100,
      "ElysiaTanZY": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_PERSON_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "ElysiaTanZY": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        JsonRestaurantBookStorage restaurantBookStorage \u003d new JsonRestaurantBookStorage(getTempFilePath(\"rb\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSchedulerStorage schedulerStorage \u003d new JsonSchedulerStorage(getTempFilePath(\"schedule\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantBookStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                schedulerStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ElysiaTanZY": 1,
      "hhjoel": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setBirthday(person.getBirthday());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditPersonDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "ElysiaTanZY": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"She likes aardvarks.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"01-15\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final int DEFAULT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ArrayList\u003cRemark\u003e remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Birthday birthday;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.add(new Remark(DEFAULT_REMARK));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        index \u003d new Index(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.addAll(personToCopy.getRemark());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday \u003d personToCopy.getBirthday();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        index \u003d personToCopy.getIndex();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remark.add(new Remark(remark));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public PersonBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.birthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@code Index} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonBuilder withIndex(String index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d new Index(Integer.parseInt(index));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Person(name, phone, email, address, remark, birthday, tags, index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 30,
      "-": 92,
      "ElysiaTanZY": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        sb.append(PREFIX_BIRTHDAY + person.getBirthday().birthday + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(birthday.birthday).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "ElysiaTanZY": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withPhone(\"94351253\").withRemark(\"She likes aardvarks.\").withBirthday(\"01-15\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withTags(\"friends\").withIndex(\"0\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withRemark(\"He can\u0027t take beer!\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withBirthday(\"02-15\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withIndex(\"1\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"\").withBirthday(\"\").withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withIndex(\"2\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withRemark(\"\").withBirthday(\"\").withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withAddress(\"10th street\").withTags(\"friends\").withIndex(\"3\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"\").withBirthday(\"\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withIndex(\"4\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"\").withBirthday(\"\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withIndex(\"5\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"\").withBirthday(\"\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withIndex(\"6\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB).withRemark(\"\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 14,
      "-": 63,
      "ElysiaTanZY": 7
    }
  }
]
