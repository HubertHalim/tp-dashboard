[
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.InventoryStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        InventoryStorage inventoryStorage \u003d new JsonInventoryStorage(userPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book,  {@code storage}\u0027s inventory"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The data from the sample inventory will be used instead if {@code storage}\u0027s inventory is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * or an empty inventory will be used instead if errors occur when reading {@code storage}\u0027s inventory."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e inventoryOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ReadOnlyAddressBook initialAddressBookData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ReadOnlyInventory initialInventoryData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                logger.info(\"Address book data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialAddressBookData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Address book data file not in the correct format. \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialAddressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Problem while reading from the address book file.\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \" Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialAddressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            inventoryOptional \u003d storage.readInventory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (!inventoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                logger.info(\"Inventory data file not found. Will be starting with a sample Inventory\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialInventoryData \u003d inventoryOptional.orElseGet(SampleDataUtil::getSampleInventory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Inventory data file not in the correct format.\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \" Will be starting with an empty Inventory\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialInventoryData \u003d new Inventory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Problem while reading from the inventory file.\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \" Will be starting with an empty Inventory\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialInventoryData \u003d new Inventory();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new ModelManager(initialAddressBookData, initialInventoryData, userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 38,
      "-": 173
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the Inventory."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @see seedu.address.model.Model#getInventory()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of goods */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ObservableList\u003cGood\u003e getFilteredGoodList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 17,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            storage.saveInventory(model.getInventory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getInventory();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getFilteredGoodList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getInventoryFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 23,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"[\" + PREFIX_OFFER + \"GOOD PRICE]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + PREFIX_OFFER + \"banana 5 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + PREFIX_OFFER + \"tissue paper 0.55\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 4,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BuyCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Buys the stated quantity of the good stated from the given supplier on the provided transaction date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * This batch of goods will be set to expire on the given expiry date, after which they will expire and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * be removed from inventory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class BuyCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"buy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Buys the stated \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"quantity of the good stated from the given supplier on the provided transaction date. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"This batch of goods will be set to expire on the given expiry date, after which \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"they will expire and be removed from inventory. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_NAME + \"SUPPLIER_NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_GOOD_NAME + \"GOOD_NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"EXPIRY_DATE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_TRANSACTION_DATE + \"TRANSACTION_DATE\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_NAME + \"Leong Fai Produce Co. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_GOOD_NAME + \"Apples \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_QUANTITY + \"50 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"2020-02-02 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_TRANSACTION_DATE + \"2020-01-01\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bought %1$d %2$ss\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Good boughtGood;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public BuyCommand(Good boughtGood) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.boughtGood \u003d boughtGood;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (model.hasGood(boughtGood)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            increaseQuantity(model, boughtGood);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            model.addGood(boughtGood);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                boughtGood.getGoodQuantity().goodQuantity, boughtGood.getGoodName().fullGoodName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Increases the quantity of an existing good in inventory with the same name as {@code newGood}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * by the quantity in {@code newGood}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param model   underlying model to make modifications in"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param newGood contains the good name and quantity to increase by"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private void increaseQuantity(Model model, Good newGood) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int oldGoodIndex \u003d model.indexOfGood(newGood);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good oldGood \u003d model.getFilteredGoodList().get(oldGoodIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int updatedQuantity \u003d oldGood.getGoodQuantity().goodQuantity + newGood.getGoodQuantity().goodQuantity;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good updatedGood \u003d new Good(new GoodName(newGood.getGoodName().toString()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new GoodQuantity(updatedQuantity));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.setGood(oldGood, updatedGood);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!(other instanceof BuyCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand e \u003d (BuyCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return boughtGood.equals(e.getGood());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Good getGood() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return boughtGood;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"[\" + PREFIX_OFFER + \"GOOD_PRICE_PAIR]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cOffer\u003e updatedOffers \u003d editPersonDescriptor.getOffers().orElse(personToEdit.getOffers());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedOffers);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        private Set\u003cOffer\u003e offers;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * A defensive copy of {@code offers} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            setOffers(toCopy.offers);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, offers);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * Sets {@code offers} to this object\u0027s {@code offers}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * A defensive copy of {@code offers} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void setOffers(Set\u003cOffer\u003e offers) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            this.offers \u003d (offers !\u003d null) ? new HashSet\u003c\u003e(offers) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * Returns an unmodifiable offer set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code offers} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public Optional\u003cSet\u003cOffer\u003e\u003e getOffers() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return (offers !\u003d null) ? Optional.of(Collections.unmodifiableSet(offers)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                    \u0026\u0026 getOffers().equals(e.getOffers());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 18,
      "-": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SellCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Sells the stated quantity of the good from the given supplier on the provided transaction date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * User will not be allowed to sell more than their current stock in inventory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class SellCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sell\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sells the stated \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"quantity of the good on the provided transaction date. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Users are not allowed to sell more than they have in stock. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_GOOD_NAME + \"GOOD_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_TRANSACTION_DATE + \"TRANSACTION_DATE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_GOOD_NAME + \"Apples \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_QUANTITY + \"50 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_TRANSACTION_DATE + \"2020-01-01\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sold %1$d %2$ss\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Good soldGood;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public SellCommand(Good soldGood) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.soldGood \u003d soldGood;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        //user cannot sell goods that do not exist in inventory"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!model.hasGood(soldGood)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new CommandException(\"Trying to sell non-existent good\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        //user cannot sell more of a good than is present in inventory"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!hasSufficientQuantity(model, soldGood)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new CommandException(\"Unable to sell a higher quantity \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                    + \"than amount in inventory\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        decreaseQuantity(model, soldGood);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                soldGood.getGoodQuantity().goodQuantity, soldGood.getGoodName().fullGoodName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Decreases the quantity of an existing good in inventory with the same name as {@code newGood}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * by the quantity in {@code newGood}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param model underlying model to make modifications in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param soldGood contains the good name and quantity to increase by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private void decreaseQuantity(Model model, Good soldGood) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int oldGoodIndex \u003d model.indexOfGood(soldGood);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good oldGood \u003d model.getFilteredGoodList().get(oldGoodIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int updatedQuantity \u003d oldGood.getGoodQuantity().goodQuantity"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                - soldGood.getGoodQuantity().goodQuantity;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good updatedGood \u003d new Good(new GoodName(soldGood.getGoodName().toString()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new GoodQuantity(updatedQuantity));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.setGood(oldGood, updatedGood);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Checks whether the inventory has at least the quantity of good trying to be sold."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param model underlying model whose inventory to check and mutate."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param soldGood name of good to sell and it\u0027s quantity."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return true if there is at least the quantity of good to be sold in the inventory."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private boolean hasSufficientQuantity(Model model, Good soldGood) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int oldGoodIndex \u003d model.indexOfGood(soldGood);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good oldGood \u003d model.getFilteredGoodList().get(oldGoodIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return oldGood.getGoodQuantity().goodQuantity \u003e\u003d soldGood.getGoodQuantity().goodQuantity;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!(other instanceof SellCommand)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand e \u003d (SellCommand) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return soldGood.equals(e.getGood());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Good getGood() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return soldGood;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_OFFER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cOffer\u003e offerList \u003d ParserUtil.parseOffers(argMultimap.getAllValues(PREFIX_OFFER));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, offerList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case BuyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return new BuyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case SellCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return new SellCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "PangJiaDa": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BuyCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Parses input arguments and creates a new BuyCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class BuyCommandParser implements Parser\u003cBuyCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public BuyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY, PREFIX_GOOD_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUANTITY, PREFIX_GOOD_NAME)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodName goodName \u003d ParserUtil.parseGoodName(argMultimap.getValue(PREFIX_GOOD_NAME).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodQuantity goodQuantity \u003d ParserUtil.parseGoodQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good good \u003d new Good(goodName, goodQuantity);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new BuyCommand(good);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_GOOD_NAME \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_EXPIRY_DATE \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final Prefix PREFIX_OFFER \u003d new Prefix(\"gp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 15,
      "PangJiaDa": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_OFFER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        parseOffersForEdit(argMultimap.getAllValues(PREFIX_OFFER)).ifPresent(editPersonDescriptor::setOffers);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e offers} into a {@code Set\u003cOffer\u003e} if {@code offers} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * If {@code offers} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * {@code Set\u003cOffer\u003e} containing zero offers."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Optional\u003cSet\u003cOffer\u003e\u003e parseOffersForEdit(Collection\u003cString\u003e offers) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assert offers !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (offers.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Collection\u003cString\u003e offerList \u003d offers.size() \u003d\u003d 1 \u0026\u0026 offers.contains(\"\") ? Collections.emptyList() : offers;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Optional.of(ParserUtil.parseOffers(offerList));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 12,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Parses a {@code String goodName} into a {@code goodName}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws ParseException if the given {@code goodName} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static GoodName parseGoodName(String goodName) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(goodName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String trimmedName \u003d goodName.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!GoodName.isValidGoodName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new GoodName(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses a {@code String offer} into a {@code Offer}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @throws ParseException if the given {@code offer} or its constituent is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Offer parseOffer(String offer) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(offer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String trimmedOffer \u003d offer.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (!trimmedOffer.contains(\" \")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new ParseException(Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String[] goodPricePair \u003d splitOnLastWhitespace(trimmedOffer);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String goodString \u003d goodPricePair[0];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String priceString \u003d goodPricePair[1];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodName good \u003d parseGoodName(goodString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Price price \u003d parsePrice(priceString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Offer(good, price);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses a {@code String price} into a {@code price}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e offers} into a {@code Set\u003cOffer\u003e}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Set\u003cOffer\u003e parseOffers(Collection\u003cString\u003e offers) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireAllNonNull(offers);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        final Set\u003cOffer\u003e offerSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        for (String offer : offers) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            offerSet.add(parseOffer(offer));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return offerSet;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns a {@code String} array as if {@code String.split()} is called only on its last whitespace."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Assumes: the {@code String} is already stripped of trailing and leading whitespaces,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * and contains at least one whitespace."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param string the {@code String} to be split"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @return the {@code String} array containing the split result"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static String[] splitOnLastWhitespace(String string) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(string);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String[] words \u003d string.split(\" \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String[] result \u003d new String[2];"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        result[0] \u003d String.join(\" \", Arrays.copyOfRange(words, 0, words.length - 1));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        result[1] \u003d words[words.length - 1];"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns an Object array containing a Good and a Price in indices 0 and 1 respectively."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * It is still subject to the same validation as the class constructors, but assumes that all input is valid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * The {@code Good} and {@code Price} corresponds to the one specified in the string."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param goodAndPrice the string representation of the good and price pair"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @return an {@code Object} array containing the {@code Good} and {@code Price}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Object[] getGoodPricePair(String[] goodAndPrice) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireAllNonNull(goodAndPrice);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Object[] result \u003d new Object[2];"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        result[0] \u003d new GoodName(goodAndPrice[0]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        result[1] \u003d new Price(goodAndPrice[1]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Parses a {@code String goodQuantity} into a {@code goodQuantity}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws ParseException if the given {@code goodQuantity} is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static GoodQuantity parseGoodQuantity(String goodQuantity) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(goodQuantity);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String trimmedQuantity \u003d goodQuantity.trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!GoodQuantity.isValidGoodQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new GoodQuantity(trimmedQuantity);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 74,
      "-": 115,
      "PangJiaDa": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SellCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Parses input arguments and creates a new SellCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class SellCommandParser implements Parser\u003cSellCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public SellCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY, PREFIX_GOOD_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUANTITY, PREFIX_GOOD_NAME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodName goodName \u003d ParserUtil.parseGoodName(argMultimap.getValue(PREFIX_GOOD_NAME).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodQuantity goodQuantity \u003d ParserUtil.parseGoodQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good good \u003d new Good(goodName, goodQuantity);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new SellCommand(good);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Inventory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.UniqueGoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Duplicates are not allowed (by .isSameGood comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class Inventory implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final UniqueGoodList goods;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Inventory() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Creates an Inventory using the Goods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Inventory(ReadOnlyInventory toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the contents of the good list with {@code goods}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code goods} must not contain duplicate goods."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods(List\u003cGood\u003e goods) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goods.setGoods(goods);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public int index(Good toFind) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return goods.indexOf(toFind);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Resets the existing data of this {@code Inventory} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData(ReadOnlyInventory newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        setGoods(newData.getGoodList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //// good-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a good with the same identity as {@code good} exists in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(good);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods.contains(good);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a good to the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void addGood(Good p) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods.add(p);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the given good {@code target} in the list with {@code editedGood}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good identity of {@code editedGood} must not be the same as another existing good in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(editedGood);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods.setGood(target, editedGood);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Removes {@code key} from this {@code Inventory}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void removeGood(Good key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods.asUnmodifiableObservableList().size() + \" goods\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cGood\u003e getGoodList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof Inventory // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 goods.equals(((Inventory) other).goods));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 122,
      "PangJiaDa": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Predicate\u003cGood\u003e PREDICATE_SHOW_ALL_GOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void setInventoryFilePath(Path inventoryFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces inventory data with the data in {@code inventory}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void setInventory(ReadOnlyInventory inventory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns the Inventory */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a good with the same identity as {@code good} exists in the inventory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    boolean hasGood(Good good);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Deletes the given good."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good must exist in the inventory."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void deleteGood(Good target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds the given good."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code good} must not already exist in the inventory."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void addGood(Good good);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns the zero-based index of the first occurance of good if found, -1 otherwise."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param good to be found"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return zero based index of good to be found"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    int indexOfGood(Good good);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the given good {@code target} with {@code editedGood}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code target} must exist in the inventory."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good identity of {@code editedGood} must not be the same as another existing good in the inventory."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void setGood(Good target, Good editedGood);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns an unmodifiable view of the filtered good list */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ObservableList\u003cGood\u003e getFilteredGoodList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Updates the filter of the filtered good list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void updateFilteredGoodList(Predicate\u003cGood\u003e predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 56,
      "-": 86,
      "PangJiaDa": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Inventory inventory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final FilteredList\u003cGood\u003e filteredGoods;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, inventory and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyInventory inventory,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(addressBook, inventory, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                + \", inventory: \" + inventory + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventory \u003d new Inventory(inventory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        filteredGoods \u003d new FilteredList\u003c\u003e(this.inventory.getGoodList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this(new AddressBook(), new Inventory(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return userPrefs.getInventoryFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        userPrefs.setInventoryFilePath(inventoryFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventory(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventory.resetData(inventory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(good);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory.hasGood(good);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void deleteGood(Good target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.removeGood(target);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void addGood(Good good) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.addGood(good);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public int indexOfGood(Good good) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return inventory.index(good);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(target, editedGood);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.setGood(target, editedGood);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Good List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Good} backed by the internal list of"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code versionedInventory}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return filteredGoods;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void updateFilteredGoodList(Predicate\u003cGood\u003e predicate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        filteredGoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 inventory.equals(other.inventory)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 filteredGoods.equals(other.filteredGoods);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 79,
      "-": 145,
      "PangJiaDa": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInventory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Unmodifiable view of an inventory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public interface ReadOnlyInventory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns an unmodifiable view of the goods list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * This list will not contain any duplicate goods."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ObservableList\u003cGood\u003e getGoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path inventoryFilePath \u003d Paths.get(\"data\", \"inventory.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        setInventoryFilePath(newUserPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventoryFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventoryFilePath \u003d inventoryFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 inventoryFilePath.equals(o.inventoryFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, inventoryFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sb.append(\"\\nLocal address book data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sb.append(\"\\nLocal inventory data file location : \" + inventoryFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 16,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/Good.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a Good in the inventory."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Method summary:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Currently, the good class works as empty object for the inventory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * More methods may be added to enhance the functionality."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class Good {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final GoodName goodName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final GoodQuantity goodQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Good(GoodName goodName, GoodQuantity goodQuantity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(goodName, goodQuantity);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodName \u003d goodName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodQuantity \u003d goodQuantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodName getGoodName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goodName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodQuantity getGoodQuantity() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goodQuantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if both goods have the same name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean isSameGood(Good otherGood) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (otherGood \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherGood !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherGood.getGoodName().equals(getGoodName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!(other instanceof Good)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good otherGood \u003d (Good) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherGood.getGoodName().equals(getGoodName())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherGood.goodQuantity.equals(getGoodQuantity());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Objects.hash(goodName, goodQuantity);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        builder.append(getGoodName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .append(goodQuantity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 29,
      "FangShaoHua94": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/GoodName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a Good\u0027s name in the inventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGoodName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"Good\u0027s name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The first character of the good name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public final String fullGoodName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Constructs a {@code GoodName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param name A valid good name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        checkArgument(isValidGoodName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        fullGoodName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a given string is a valid good name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static boolean isValidGoodName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return fullGoodName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof GoodName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 fullGoodName.equals(((GoodName) other).fullGoodName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return fullGoodName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/GoodNameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Tests that a {@code Good}\u0027s {@code GoodName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodNameContainsKeywordsPredicate implements Predicate\u003cGood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean test(Good good) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(good.getGoodName().fullGoodName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof GoodNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 keywords.equals(((GoodNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/GoodQuantity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a Good\u0027s quantity in the inventory."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGoodQuantity(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodQuantity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \"Good\u0027s quantity should only contain numeric characters that is greater than or equals to zero and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                    + \"less than 1 million. It should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Only accept non-negative integers"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    // digits can only be 1 to 9 characters long, for a value of 0 - 999,999"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{1,6}$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public final int goodQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Constructs a {@code GoodQuantity} from an int."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodQuantity(int quantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        checkArgument(isValidGoodQuantity(String.valueOf(quantity)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity \u003d quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Constructs a {@code GoodQuantity} from a string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param quantity"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public GoodQuantity(String quantity) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        checkArgument(isValidGoodQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        goodQuantity \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns true if a given string is a valid good quantity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static boolean isValidGoodQuantity(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Integer.toString(goodQuantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof GoodQuantity // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 goodQuantity \u003d\u003d (((GoodQuantity) other).goodQuantity)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Integer.toString(goodQuantity).hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 46,
      "PangJiaDa": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/UniqueGoodList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.DuplicateGoodException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.GoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A list of goods that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A good is considered unique by comparing using {@code Good#isSameGood(Good)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * persons uses Good#isSameGood(Good) for equality so as to ensure that the good being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * unique in terms of identity in the UniqueGoodList. However, the removal of a good uses Good#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * as to ensure that the good with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * @see Good#isSameGood(Good)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class UniqueGoodList implements Iterable\u003cGood\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final ObservableList\u003cGood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final ObservableList\u003cGood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if the list contains an equivalent good as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean contains(Good toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameGood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a good to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add(Good toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DuplicateGoodException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the good {@code target} in the list with {@code editedGood}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good identity of {@code editedGood} must not be the same as another existing good in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(target, editedGood);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new GoodNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!target.isSameGood(editedGood) \u0026\u0026 contains(editedGood)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DuplicateGoodException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.set(index, editedGood);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Removes the equivalent good from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove(Good toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new GoodNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods(UniqueGoodList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the contents of this list with {@code goods}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code goods} must not contain duplicate goods."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods(List\u003cGood\u003e goods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(goods);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!goodsAreUnique(goods)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DuplicateGoodException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.setAll(goods);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cGood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Iterator\u003cGood\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof UniqueGoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueGoodList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private boolean goodsAreUnique(List\u003cGood\u003e goods) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (int i \u003d 0; i \u003c goods.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            for (int j \u003d i + 1; j \u003c goods.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                if (goods.get(i).isSameGood(goods.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns the index of the first occurrence of the specified element in this list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * or -1 if this list does not contain the element, Used to find the index of an existing good"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * so it\u0027s quantity can be retreived."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param toFind good to be found"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return index of good to be found in the internal list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public int indexOf(Good toFind) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); ++i) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            if (internalList.get(i).isSameGood(toFind)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 138,
      "PangJiaDa": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/exceptions/DuplicateGoodException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Signals that the operation will result in duplicate Goods (Goods are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class DuplicateGoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public DuplicateGoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(\"Operation would result in duplicate goods\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/exceptions/GoodNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Signals that the operation is unable to find the specified good."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(\"Operation can not find the good.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/offer/Offer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.offer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Represents an offer given by a supplier for supplying a certain good at a certain price."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class Offer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Offer must consist of a valid good name and a valid price, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"separated by a whitespace\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final GoodName good;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Constructs an {@code Offer}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param good the good to be offered"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param price the price of the good in the offer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Offer(GoodName good, Price price) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireAllNonNull(good, price);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public GoodName getGood() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return good;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return \"Good: \" + good + \" | Price: \" + price;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d (Offer) o;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return getGood().equals(offer.getGood());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Objects.hash(getGood());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 44,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/offer/Price.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.offer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Represents a price for a {@code Good} in buying or selling of goods."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Price should only be\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"1. a positive number with\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"2. at most 2 digits after the decimal point and\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"3. at most 10 digits before the decimal point and\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"4. no special characters, including the dollar sign.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{1,10}(\\\\.(\\\\d{0,2})?)?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    final long centValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Constructs a {@code Price}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param dollars the string representation of the price in dollars"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Price(String dollars) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(dollars);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        checkArgument(isValidPrice(dollars), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        centValue \u003d parseCents(dollars);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns the value in cents of the given value in dollars."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param dollars the string representation of the value in dollars"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @return the value in cents"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private long parseCents(String dollars) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // rounding is necessary due to floating point approximation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        double dollarValue \u003d Double.parseDouble(dollars);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Math.round(dollarValue * 100);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns the value of the price in cents for accurate calculations."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public long getCentValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return centValue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return String.format(\"%d.%02d\", centValue / 100, centValue % 100);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns if a given string is a valid price."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return String.format(\"$%d.%02d\", centValue / 100, centValue % 100);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final Set\u003cOffer\u003e offers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cOffer\u003e offers) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireAllNonNull(name, phone, email, address, offers);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.offers.addAll(offers);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns an immutable offer set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Set\u003cOffer\u003e getOffers() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Collections.unmodifiableSet(offers);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                \u0026\u0026 otherPerson.getOffers().equals(getOffers());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Objects.hash(name, phone, email, address, offers);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .append(\" Offers: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        getOffers().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 12,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} and {@code Inventory} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                getOfferSet(\"banana 4.5\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                getOfferSet(\"toilet paper 2\", \"tissue 70.50\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                getOfferSet(\"hand sanitiser 3.25\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                getOfferSet(\"instant noodle 0.45\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                getOfferSet(\"facial mask 5.75\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                getOfferSet(\"apple 50.3\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static Good[] getSampleGoods() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new Good[] {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Fuji apple\"), new GoodQuantity(15)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Cavendish banana\"), new GoodQuantity(150)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Brazil citrus\"), new GoodQuantity(20)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Malaysia durian\"), new GoodQuantity(11)),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Indonesia entawak\"), new GoodQuantity(0)),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"India fig\"), new GoodQuantity(10)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Spain grape\"), new GoodQuantity(20)),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Turkey hazelnut\"), new GoodQuantity(20)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Africa imbe\"), new GoodQuantity(20)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Philippines jackfruit\"), new GoodQuantity(20)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"New Zealand kiwi\"), new GoodQuantity(20)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Good(new GoodName(\"Mexico lemon\"), new GoodQuantity(90))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static ReadOnlyInventory getSampleInventory() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory sampleInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (Good sampleGood : getSampleGoods()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            sampleInventory.addGood(sampleGood);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return sampleInventory;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns an offer set containing the set of strings given."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Set\u003cOffer\u003e getOfferSet(String... strings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(ParserUtil::splitOnLastWhitespace)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(ParserUtil::getGoodPricePair)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(x -\u003e new Offer((GoodName) x[0], (Price) x[1]))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 15,
      "FangShaoHua94": 27,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Inventory}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public interface InventoryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns Inventory data as a {@link ReadOnlyInventory}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @see #getInventoryFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Saves the given {@link ReadOnlyInventory} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param inventory cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @see #saveInventory(ReadOnlyInventory)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Jackson-friendly version of {@link Good}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "class JsonAdaptedGood {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Good\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final String goodName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final int goodQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Constructs a {@code JsonAdaptedGood} with the given good details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonAdaptedGood(@JsonProperty(\"goodName\") String goodName,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           @JsonProperty(\"goodQuantity\") int goodQuantity) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodName \u003d goodName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodQuantity \u003d goodQuantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts a given {@code Good} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonAdaptedGood(Good source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodName \u003d source.getGoodName().fullGoodName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity \u003d source.getGoodQuantity().goodQuantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts this Jackson-friendly adapted good object into the model\u0027s {@code Good} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted good."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Good toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (goodName \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    GoodName.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!GoodName.isValidGoodName(goodName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final GoodName modelGoodName \u003d new GoodName(goodName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!GoodQuantity.isValidGoodQuantity(String.valueOf(goodQuantity))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final GoodQuantity modelGoodQuantity \u003d new GoodQuantity(goodQuantity);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new Good(modelGoodName, modelGoodQuantity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 61,
      "PangJiaDa": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedOffer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Jackson-friendly version of {@link Offer}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "class JsonAdaptedOffer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Offer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final String good;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Constructs a {@code JsonAdaptedOffer} with the given {@code good} and {@price}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public JsonAdaptedOffer(@JsonProperty(\"good\") String good, @JsonProperty(\"price\") String price) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Converts a given {@code Offer} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public JsonAdaptedOffer(Offer source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        good \u003d source.getGood().fullGoodName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        price \u003d source.getPrice().getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Converts this Jackson-friendly adapted offer object into the model\u0027s {@code Offer} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted offer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Offer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (good \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                    GoodName.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (!GoodName.isValidGoodName(good)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new IllegalValueException(GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        final GoodName modelGood \u003d new GoodName(good);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Offer(modelGood, modelPrice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 38,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final Set\u003cJsonAdaptedOffer\u003e offers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            @JsonProperty(\"offers\") Set\u003cJsonAdaptedOffer\u003e offers) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (offers !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            this.offers.addAll(offers);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        offers.addAll(source.getOffers().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(JsonAdaptedOffer::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        final Set\u003cOffer\u003e personOffers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        for (JsonAdaptedOffer offer : offers) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            personOffers.add(offer.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        final Set\u003cOffer\u003e modelOffers \u003d new HashSet\u003c\u003e(personOffers);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelOffers);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 13,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInventoryStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A class to access Inventory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonInventoryStorage implements InventoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventoryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return readInventory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Similar to {@link #readInventory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Optional\u003cJsonSerializableInventory\u003e jsonInventory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                filePath, JsonSerializableInventory.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!jsonInventory.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return Optional.of(jsonInventory.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Similar to {@link #saveInventory(ReadOnlyInventory)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventory(inventory), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInventory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * An Immutable Inventory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "@JsonRootName(value \u003d \"inventory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "class JsonSerializableInventory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GOOD \u003d \"Goods list contains duplicate good(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final List\u003cJsonAdaptedGood\u003e goods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Constructs a {@code JsonSerializableInventory} with the given goods."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonSerializableInventory(@JsonProperty(\"goods\") List\u003cJsonAdaptedGood\u003e goods) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goods.addAll(goods);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts a given {@code ReadOnlyInventory} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonSerializableInventory(ReadOnlyInventory source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods.addAll(source.getGoodList().stream().map(JsonAdaptedGood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts this inventory into the model\u0027s {@code Inventory} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Inventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (JsonAdaptedGood jsonAdaptedGood : goods) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            Good good \u003d jsonAdaptedGood.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (inventory.hasGood(good)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GOOD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            inventory.addGood(good);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public interface Storage extends AddressBookStorage, InventoryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                          InventoryStorage inventoryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventoryStorage.getInventoryFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return readInventory(inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventoryStorage.readInventory(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        saveInventory(inventory, inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventoryStorage.saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 34,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GoodInformation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * An UI component that displays information of a {@code Good}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodInformation extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String FXML \u003d \"GoodInformation.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public final Good good;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private HBox goodPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label goodName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label goodQuantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodInformation(Good good, int displayedIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodName.setText(good.getGoodName().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity.setText(good.getGoodQuantity().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!(other instanceof GoodInformation)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodInformation information \u003d (GoodInformation) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return id.getText().equals(information.id.getText())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 good.equals(information.good);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GoodListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Panel containing the list of goods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String FXML \u003d \"GoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private ListView\u003cGood\u003e goodListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodListPanel(ObservableList\u003cGood\u003e goodList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodListView.setItems(goodList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodListView.setCellFactory(listView -\u003e new GoodListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Good} using a {@code GoodInformation}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    class GoodListViewCell extends ListCell\u003cGood\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        protected void updateItem(Good good, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            super.updateItem(good, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (empty || good \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setGraphic(new GoodInformation(good, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private GoodListPanel goodListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private StackPane goodListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodListPanel \u003d new GoodListPanel(logic.getFilteredGoodList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodListPanelPlaceholder.getChildren().add(goodListPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodListPanel getGoodListPanel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goodListPanel;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 11,
      "-": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OfferCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * A box containing the details of an offer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class OfferCard extends VBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String FXML \u003d \"/view/OfferCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public final Offer offer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Label good;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public OfferCard(Offer offer) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(FXML));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.offer \u003d offer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        good.setText(\"Good: \" + offer.getGood().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        price.setText(\"Price: \" + offer.getPrice().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private VBox offers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        person.getOffers().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .sorted(Comparator.comparing(offer -\u003e offer.getGood().toString()))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .forEach(offer -\u003e offers.getChildren().add(new OfferCard(offer)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 5,
      "-": 69
    }
  },
  {
    "path": "src/main/resources/view/GoodInformation.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"id\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cLabel fx:id\u003d\"goodName\" styleClass\u003d\"cell_big_label\" text\u003d\"goodName\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cLabel fx:id\u003d\"goodQuantity\" styleClass\u003d\"cell_small_label\" text\u003d\"goodQuantity\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 38
    }
  },
  {
    "path": "src/main/resources/view/GoodListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003cListView fx:id\u003d\"goodListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 10
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"500.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cHBox fx:id\u003d\"triplePanel\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                   \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"250.0\" prefWidth\u003d\"250.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cVBox fx:id\u003d\"personList1\" minWidth\u003d\"250.0\" prefWidth\u003d\"250.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"goodListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 21,
      "-": 49
    }
  },
  {
    "path": "src/main/resources/view/OfferCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_LEFT\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003cLabel fx:id\u003d\"good\" text\u003d\"$good\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003cLabel fx:id\u003d\"price\" text\u003d\"$price\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 18
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "      \u003cLabel fx:id\u003d\"offer_label\" styleClass\u003d\"cell_small_label\" text\u003d\"Offers:\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "      \u003cVBox fx:id\u003d\"offers\" spacing\u003d\"10\" alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 2,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonInventoryStorage(temporaryFolder.resolve(\"inventory.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonInventoryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInventory.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withOffers().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getFilteredGoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredGoodList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static class JsonInventoryIoExceptionThrowingStub extends JsonInventoryStorage {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        private JsonInventoryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "FangShaoHua94": 28,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 3,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void setInventory(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void deleteGood(Good target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void addGood(Good good) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public int indexOfGood(Good good) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void updateFilteredGoodList(Predicate\u003cGood\u003e predicate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * A Model stub that contains a single good."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private class ModelStubWithGood extends ModelStub {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        private final Good good;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ModelStubWithGood(Good good) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            requireNonNull(good);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            this.good \u003d good;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            requireNonNull(good);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return this.good.isSameGood(good);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * A Model stub that always accept the good being added."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private class ModelStubAcceptingGoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final ArrayList\u003cGood\u003e goodsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            requireNonNull(good);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return goodsAdded.stream().anyMatch(good::isSameGood);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void addGood(Good good) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            requireNonNull(good);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            goodsAdded.add(good);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return new Inventory();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 95,
      "-": 194,
      "PangJiaDa": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_GOOD_APPLE \u003d \"apple\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_GOOD_BANANA \u003d \"banana\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_PRICE_CHEAP \u003d \"0.50\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_PRICE_EXPENSIVE \u003d \"5.00\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_OFFER_APPLE \u003d VALID_GOOD_APPLE + \" \" + VALID_PRICE_CHEAP;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_OFFER_BANANA \u003d VALID_GOOD_BANANA + \" \" + VALID_PRICE_EXPENSIVE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String VALID_GOOD_NAME_AVOCADO \u003d \"Mexican avocado\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String VALID_GOOD_NAME_BLUEBERRY \u003d \"USA blueberry\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final int VALID_GOOD_QUANTITY_ZERO \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final int VALID_GOOD_QUANTITY_ONE \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String OFFER_DESC_APPLE \u003d \" \" + PREFIX_OFFER + VALID_OFFER_APPLE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String OFFER_DESC_BANANA \u003d \" \" + PREFIX_OFFER + VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    // no space separator"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_FORMAT_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"invalid3.45\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //invalid good name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_GOOD_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"inv@lid 404\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //invalid good name and price"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_GOOD_AND_PRICE_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"inv@lid -404\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //invalid good name and format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_GOOD_AND_FORMAT_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"inv@lid404\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    // invalid price"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_PRICE_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"invalid -1.0\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    // invalid price and format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_PRICE_AND_FORMAT_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"invalid-1.0\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_APPLE, VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 25,
      "FangShaoHua94": 5,
      "-": 119,
      "PangJiaDa": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 4,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "FangShaoHua94": 10,
      "-": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // different offers -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 3,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FORMAT_OFFER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOOD_AND_FORMAT_OFFER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOOD_AND_PRICE_OFFER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOOD_OFFER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_AND_FORMAT_OFFER_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_OFFER_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFER_DESC_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFER_DESC_BANANA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_APPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withOffers(VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // multiple offers - all accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person expectedPersonMultipleOffers \u003d new PersonBuilder(BOB).withOffers(VALID_OFFER_APPLE, VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_APPLE + OFFER_DESC_BANANA, new AddCommand(expectedPersonMultipleOffers));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // zero offers"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withOffers().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_BANANA + OFFER_DESC_APPLE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_BANANA + OFFER_DESC_APPLE, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_BANANA + OFFER_DESC_APPLE, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_BANANA + OFFER_DESC_APPLE, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid good name in offer"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_GOOD_OFFER_DESC + OFFER_DESC_APPLE, GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid price in offer"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_PRICE_OFFER_DESC + OFFER_DESC_APPLE, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid format in offer"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_FORMAT_OFFER_DESC + OFFER_DESC_APPLE, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid good name precedes invalid price in offer"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_GOOD_AND_PRICE_OFFER_DESC + OFFER_DESC_APPLE, GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid format precedes invalid good name in offer"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_GOOD_AND_FORMAT_OFFER_DESC + OFFER_DESC_APPLE, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid format precedes invalid price in offer"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_PRICE_AND_FORMAT_OFFER_DESC + OFFER_DESC_APPLE, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // two invalid offers, only first invalid offer reported"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_PRICE_OFFER_DESC + INVALID_FORMAT_OFFER_DESC, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_BANANA + OFFER_DESC_APPLE,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 53,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BuyCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "class BuyCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME \u003d \"Durian\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_EXTRA \u003d \"Durian123\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_NAME \u003d \"Dur@_an\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_EXTRA \u003d \"11\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE \u003d \"-1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_OVERFLOW_INT \u003d \"9999999999999\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_DESC \u003d \" \" + PREFIX_GOOD_NAME + VALID_GOOD_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_EXTRA_DESC \u003d \" \" + PREFIX_GOOD_NAME + VALID_GOOD_NAME_EXTRA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_NAME_DESC \u003d \" \" + PREFIX_GOOD_NAME + INVALID_GOOD_NAME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_EXTRA_DESC \u003d \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY_EXTRA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE_DESC \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + INVALID_GOOD_QUANTITY_NEGATIVE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_OVERFLOW_INT_DESC \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + INVALID_GOOD_QUANTITY_OVERFLOW_INT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private BuyCommandParser parser \u003d new BuyCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Good validGood \u003d new Good(new GoodName(VALID_GOOD_NAME), new GoodQuantity(VALID_GOOD_QUANTITY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand expectedCommand \u003d new BuyCommand(validGood);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // Happy case"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new BuyCommand(validGood));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new BuyCommand(validGood));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // multiple goodNames, only last one accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_GOOD_NAME_EXTRA_DESC + VALID_GOOD_NAME_DESC"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_QUANTITY_DESC, new BuyCommand(validGood));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // multiple quantities, only last one accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_EXTRA_DESC"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_QUANTITY_DESC, new BuyCommand(validGood));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing good name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing good quantity"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_NAME_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // invalid good name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, INVALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // invalid good quantities"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_NAME_DESC + INVALID_GOOD_QUANTITY_NEGATIVE_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_NAME_DESC + INVALID_GOOD_QUANTITY_OVERFLOW_INT_DESC,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FORMAT_OFFER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOOD_OFFER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_OFFER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFER_DESC_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFER_DESC_BANANA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_APPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String OFFER_EMPTY \u003d \" \" + PREFIX_OFFER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GOOD_OFFER_DESC, GoodName.MESSAGE_CONSTRAINTS); // invalid good name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_OFFER_DESC, Price.MESSAGE_CONSTRAINTS); // invalid offer price"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FORMAT_OFFER_DESC, Offer.MESSAGE_CONSTRAINTS); // invalid offer price"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // while parsing {@code PREFIX_OFFER} alone will reset the offers of the {@code Person} being edited,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // parsing it together with a valid offer results in error"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + OFFER_DESC_APPLE + OFFER_DESC_BANANA + OFFER_EMPTY, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + OFFER_DESC_APPLE + OFFER_EMPTY + OFFER_DESC_BANANA, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + OFFER_EMPTY + OFFER_DESC_APPLE + OFFER_DESC_BANANA, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + OFFER_DESC_BANANA"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + OFFER_DESC_APPLE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_BANANA, VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // offers"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OFFER_DESC_APPLE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withOffers(VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //Todo: implement offers as HashSet again"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_APPLE + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + OFFER_DESC_APPLE"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + OFFER_DESC_BANANA;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_APPLE, VALID_OFFER_APPLE, VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parse_resetOffers_success() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + OFFER_EMPTY;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withOffers().build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 34,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_OFFER \u003d \"nospace420\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_1 \u003d \"potato\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_2 \u003d \"chicken\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_1 \u003d \"6.0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_2 \u003d \"4\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_OFFER_1 \u003d VALID_GOOD_1 + \" \" + VALID_PRICE_1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_OFFER_2 \u003d VALID_GOOD_2 + \" \" + VALID_PRICE_2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOffer(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOffer(INVALID_OFFER));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffer_validValueWithoutWhitespace_returnsOffer() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer expectedOffer \u003d new Offer(new GoodName(VALID_GOOD_1), new Price(VALID_PRICE_1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedOffer, ParserUtil.parseOffer(VALID_OFFER_1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffer_validValueWithWhitespace_returnsTrimmedOffer() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String offerWithWhitespace \u003d WHITESPACE + VALID_OFFER_1 + WHITESPACE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer expectedOffer \u003d new Offer(new GoodName(VALID_GOOD_1), new Price(VALID_PRICE_1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedOffer, ParserUtil.parseOffer(offerWithWhitespace));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffers_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOffers(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffers_collectionWithInvalidOffers_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOffers(Arrays.asList(VALID_OFFER_1, INVALID_OFFER)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffers_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(ParserUtil.parseOffers(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffers_collectionWithValidOffers_returnsOfferSet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cOffer\u003e actualOfferSet \u003d ParserUtil.parseOffers(Arrays.asList(VALID_OFFER_1, VALID_OFFER_2));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cOffer\u003e expectedOfferSet \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new Offer(new GoodName(VALID_GOOD_1), new Price(VALID_PRICE_1)),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new Offer(new GoodName(VALID_GOOD_2), new Price(VALID_PRICE_2))"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(actualOfferSet, expectedOfferSet);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 34,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SellCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "class SellCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME \u003d \"Durian\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_EXTRA \u003d \"Durian123\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_NAME \u003d \"Dur@_an\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_EXTRA \u003d \"11\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE \u003d \"-1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_OVERFLOW_INT \u003d \"9999999999999\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_DESC \u003d \" \" + PREFIX_GOOD_NAME + VALID_GOOD_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_EXTRA_DESC \u003d \" \" + PREFIX_GOOD_NAME + VALID_GOOD_NAME_EXTRA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_NAME_DESC \u003d \" \" + PREFIX_GOOD_NAME + INVALID_GOOD_NAME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_EXTRA_DESC \u003d \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY_EXTRA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE_DESC \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + INVALID_GOOD_QUANTITY_NEGATIVE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_OVERFLOW_INT_DESC \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + INVALID_GOOD_QUANTITY_OVERFLOW_INT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private SellCommandParser parser \u003d new SellCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Good validGood \u003d new Good(new GoodName(VALID_GOOD_NAME), new GoodQuantity(VALID_GOOD_QUANTITY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand expectedCommand \u003d new SellCommand(validGood);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // Happy case"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SellCommand(validGood));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SellCommand(validGood));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // multiple goodNames, only last one accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_GOOD_NAME_EXTRA_DESC + VALID_GOOD_NAME_DESC"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_QUANTITY_DESC, new SellCommand(validGood));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // multiple quantities, only last one accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_EXTRA_DESC"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_QUANTITY_DESC, new SellCommand(validGood));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing good name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing good quantity"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_NAME_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // invalid good name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, INVALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // invalid good quantities"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_NAME_DESC + INVALID_GOOD_QUANTITY_NEGATIVE_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_NAME_DESC + INVALID_GOOD_QUANTITY_OVERFLOW_INT_DESC,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InventoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.DuplicateGoodException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class InventoryTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(Collections.emptyList(), inventory.getGoodList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData_withValidReadOnlyInventory_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory newData \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(newData, inventory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData_withDuplicateGoods_throwsDuplicateGoodException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Two goods with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedAlice \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cGood\u003e newGoods \u003d Arrays.asList(APPLE, editedAlice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        InventoryStub newData \u003d new InventoryStub(newGoods);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateGoodException.class, () -\u003e inventory.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.hasGood(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodNotInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(inventory.hasGood(APPLE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.addGood(APPLE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(inventory.hasGood(APPLE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodWithSameIdentityFieldsInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.addGood(APPLE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedAlice \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(inventory.hasGood(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getGoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e inventory.getGoodList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * A stub ReadOnlyInventory whose goods list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static class InventoryStub implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        private final ObservableList\u003cGood\u003e goods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        InventoryStub(Collection\u003cGood\u003e goods) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            this.goods.setAll(goods);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public ObservableList\u003cGood\u003e getGoodList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return goods;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GOODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.InventoryBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(new Inventory(), new Inventory(modelManager.getInventory()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"inventory/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"new/inventory/book/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryFilePath_validPath_setsInventoryFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Path path \u003d Paths.get(\"inventory/book/file/path\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager.setInventoryFilePath(path);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(path, modelManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasGood(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodNotInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.hasGood(APPLE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager.addGood(APPLE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(modelManager.hasGood(APPLE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getFilteredGoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredGoodList().remove(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory inventory \u003d new InventoryBuilder().withGood(APPLE).withGood(BANANA).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory differentInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, inventory, userPrefs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, inventory, userPrefs);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentInventory, userPrefs)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, inventory, userPrefs)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        keywords \u003d APPLE.getGoodName().fullGoodName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager.updateFilteredGoodList(new GoodNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, inventory, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager.updateFilteredGoodList(PREDICATE_SHOW_ALL_GOODS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, inventory, differentUserPrefs)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 56,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodNameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new GoodNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new GoodNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new GoodNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different goods -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void test_goodNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new GoodNameContainsKeywordsPredicate(Collections.singletonList(\"Fuji\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new GoodBuilder().withGoodName(\"Fuji apple\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new GoodNameContainsKeywordsPredicate(Arrays.asList(\"Fuji\", \"Apple\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new GoodBuilder().withGoodName(\"Fuji Apple\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new GoodNameContainsKeywordsPredicate(Arrays.asList(\"Fuji\", \"Apple\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new GoodBuilder().withGoodName(\"China Apple\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new GoodNameContainsKeywordsPredicate(Arrays.asList(\"fUJi\", \"aPPlE\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new GoodBuilder().withGoodName(\"Fuji Apple\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void test_goodNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate predicate \u003d new GoodNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new GoodBuilder().withGoodName(\"Apple\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new GoodNameContainsKeywordsPredicate(Arrays.asList(\"Cranberry\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new GoodBuilder().withGoodName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_AVOCADO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_BLUEBERRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodNameTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GoodName(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new GoodName(invalidName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isValidGoodName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e GoodName.isValidGoodName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\"apple*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"fuji apple\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"2nd Gen fuji apple\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"Fuji apple\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"fuji apple with very very very long name\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodName sampleGoodName \u003d new GoodName(VALID_GOOD_NAME_AVOCADO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(sampleGoodName.equals(new GoodName(VALID_GOOD_NAME_BLUEBERRY)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(sampleGoodName.equals(new GoodName(VALID_GOOD_NAME_AVOCADO)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodName sampleGoodName \u003d new GoodName(VALID_GOOD_NAME_AVOCADO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(sampleGoodName.toString(), VALID_GOOD_NAME_AVOCADO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sampleGoodName.toString(), VALID_GOOD_NAME_BLUEBERRY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodQuantityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_QUANTITY_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_QUANTITY_ZERO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodQuantityTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        int invalidGoodQuantity \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new GoodQuantity(invalidGoodQuantity));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isValidGoodQuantity() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(GoodQuantity.isValidGoodQuantity(String.valueOf(-1))); // negative value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // valid quantity"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(GoodQuantity.isValidGoodQuantity(String.valueOf(0)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(GoodQuantity.isValidGoodQuantity(String.valueOf(1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(GoodQuantity.isValidGoodQuantity(String.valueOf(+1))); // positive value with plus sign"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(GoodQuantity.isValidGoodQuantity(String.valueOf(100)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodQuantity sampleGoodQuantity \u003d new GoodQuantity(VALID_GOOD_QUANTITY_ONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(sampleGoodQuantity.equals(new GoodQuantity(VALID_GOOD_QUANTITY_ZERO)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(sampleGoodQuantity.equals(new GoodQuantity(VALID_GOOD_QUANTITY_ONE)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodQuantity sampleGoodQuantity \u003d new GoodQuantity(VALID_GOOD_QUANTITY_ONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(sampleGoodQuantity.toString(), String.valueOf(VALID_GOOD_QUANTITY_ONE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sampleGoodQuantity.toString(), String.valueOf(VALID_GOOD_QUANTITY_ZERO));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 43,
      "PangJiaDa": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_AVOCADO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_QUANTITY_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class to help with building Good objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Good(null, new GoodQuantity(VALID_GOOD_QUANTITY_ONE)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Good(new GoodName(VALID_GOOD_NAME_AVOCADO), null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Good(null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isSameGoodTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.isSameGood(APPLE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.isSameGood(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same good quantity, different good name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedApple \u003d new GoodBuilder(APPLE).withGoodName(VALID_GOOD_NAME_AVOCADO).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.isSameGood(editedApple));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same good name, different quantity -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedApple \u003d new GoodBuilder(APPLE).withGoodQuantity(VALID_GOOD_QUANTITY_ONE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.isSameGood(editedApple));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good appleCopy \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good name -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedApple \u003d new GoodBuilder(APPLE).withGoodName(VALID_GOOD_NAME_AVOCADO).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good quantity -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedApple \u003d new GoodBuilder(APPLE).withGoodQuantity(VALID_GOOD_QUANTITY_ONE).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good testGood \u003d new GoodBuilder().withGoodName(VALID_GOOD_NAME_AVOCADO).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(testGood.toString().equals(VALID_GOOD_NAME_AVOCADO));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/UniqueGoodListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.DuplicateGoodException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.GoodNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class UniqueGoodListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final UniqueGoodList uniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_goodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(uniqueGoodList.contains(APPLE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_goodInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(uniqueGoodList.contains(APPLE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_goodWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedApple \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(uniqueGoodList.contains(editedApple));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add_duplicateGood_throwsDuplicateGoodException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateGoodException.class, () -\u003e uniqueGoodList.add(APPLE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_nullTargetGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.setGood(null, APPLE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_nullEditedGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.setGood(APPLE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_targetGoodNotInList_throwsGoodNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(GoodNotFoundException.class, () -\u003e uniqueGoodList.setGood(APPLE, APPLE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_editedGoodIsSameGood_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGood(APPLE, APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_editedGoodHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedApple \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGood(APPLE, editedApple);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(editedApple);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_editedGoodHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGood(APPLE, BANANA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(BANANA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_editedGoodHasNonUniqueIdentity_throwsDuplicateGoodException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(BANANA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateGoodException.class, () -\u003e uniqueGoodList.setGood(APPLE, BANANA));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_goodDoesNotExist_throwsGoodNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(GoodNotFoundException.class, () -\u003e uniqueGoodList.remove(APPLE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_existingGood_removesGood() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.remove(APPLE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_nullUniqueGoodList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.setGoods((UniqueGoodList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_uniqueGoodList_replacesOwnListWithProvidedUniqueGoodList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(BANANA);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGoods(expectedUniqueGoodList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.setGoods((List\u003cGood\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cGood\u003e goodList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGoods(goodList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(BANANA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_listWithDuplicateGoods_throwsDuplicateGoodException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cGood\u003e listWithDuplicateGoods \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateGoodException.class, () -\u003e uniqueGoodList.setGoods(listWithDuplicateGoods));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            -\u003e uniqueGoodList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/offer/OfferTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.offer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class OfferTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_BLUEBERRY \u003d \"blueberry\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_APPLE \u003d \"apple\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_CHEAP \u003d \"0.05\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_EXPENSIVE \u003d \"50\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void constructor_anyNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Offer(null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Offer(new GoodName(VALID_GOOD_BLUEBERRY), null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Offer(null, new Price(VALID_PRICE_CHEAP)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_self_returnsTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(offer, offer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_sameGoodSamePrice_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer same \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(offer, same);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_sameGoodDifferentPrice_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer differentPrice \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_CHEAP));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(offer, differentPrice);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_differentGoodSamePrice_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer differentGood \u003d new Offer(new GoodName(VALID_GOOD_BLUEBERRY), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertNotEquals(offer, differentGood);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_differentGoodDifferentPrice_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer2 \u003d new Offer(new GoodName(VALID_GOOD_BLUEBERRY), new Price(VALID_PRICE_CHEAP));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertNotEquals(offer, offer2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 48,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/offer/PriceTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.offer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_NEGATIVE \u003d \"-1234.56\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_PLUS_SIGN \u003d \"+1234.56\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_ELEVEN_INTEGRAL_DIGITS \u003d \"12345678912.53\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_THREE_DECIMAL_PLACES \u003d \"12.123\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_TEXT \u003d \"one hundred\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_SPECIAL_CHARACTERS \u003d \"@!)#\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_NO_DECIMAL_POINT \u003d \"2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_DECIMAL_POINT_ONLY \u003d \"5.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_ONE_DECIMAL_PLACE \u003d \"3.5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_TWO_DECIMAL_PLACES \u003d \"6.58\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_TEN_INTEGRAL_DIGITS \u003d \"1234567891.12\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final int VALID_CENTS \u003d 123;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_CENTS_IN_DOLLARS \u003d \"1.23\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_null_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_emptyString_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_negativeNumber_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_NEGATIVE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_positiveSign_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_PLUS_SIGN));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_elevenDigitsIntegralPart_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_ELEVEN_INTEGRAL_DIGITS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_moreThanTwoDecimalPlaces_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_THREE_DECIMAL_PLACES));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_alphabeticalText_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_TEXT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_specialCharacters_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_SPECIAL_CHARACTERS)); // special characters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_validPrices_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // valid prices"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_NO_DECIMAL_POINT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_DECIMAL_POINT_ONLY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_ONE_DECIMAL_PLACE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_TWO_DECIMAL_PLACES));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_TEN_INTEGRAL_DIGITS));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseCents_validPrices_shouldConvertToCents() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_CENTS_IN_DOLLARS).getCentValue(), VALID_CENTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toString_shouldHaveDollarSignAndTwoDecimalPlaces() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_PRICE_NO_DECIMAL_POINT).toString(), \"$\" + VALID_PRICE_NO_DECIMAL_POINT + \".00\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_PRICE_DECIMAL_POINT_ONLY).toString(), \"$\" + VALID_PRICE_DECIMAL_POINT_ONLY + \"00\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_PRICE_ONE_DECIMAL_PLACE).toString(), \"$\" + VALID_PRICE_ONE_DECIMAL_PLACE + \"0\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_PRICE_TWO_DECIMAL_PLACES).toString(), \"$\" + VALID_PRICE_TWO_DECIMAL_PLACES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getOffers().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // different offers -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 7,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedGoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.storage.JsonAdaptedGood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonAdaptedGoodTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String INVALID_GOOD_NAME \u003d \"A@pple\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final int INVALID_GOOD_QUANTITY \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_GOOD_NAME \u003d APPLE.getGoodName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final int VALID_GOOD_QUANTITY \u003d APPLE.getGoodQuantity().goodQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_validGoodDetails_returnsGood() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d new JsonAdaptedGood(BANANA);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(BANANA, good.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidGoodName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedGood(INVALID_GOOD_NAME, VALID_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d GoodName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, good::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_nullGoodName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d new JsonAdaptedGood(null, VALID_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, GoodName.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, good::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidGoodQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedGood(VALID_GOOD_NAME, INVALID_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d GoodQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, good::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedOfferTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class JsonAdaptedOfferTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_NAME \u003d \"blueberry\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE \u003d \"5.00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_GOOD_NAME \u003d \"inv@lid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"-55\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_anyNull_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // if both null, GoodName takes precedence"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedOffer offer \u003d new JsonAdaptedOffer(null, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedOffer.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                GoodName.class.getSimpleName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // null good name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        offer \u003d new JsonAdaptedOffer(null, VALID_PRICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedMessage \u003d String.format(JsonAdaptedOffer.MISSING_FIELD_MESSAGE_FORMAT, GoodName.class.getSimpleName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        offer \u003d new JsonAdaptedOffer(VALID_GOOD_NAME, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedMessage \u003d String.format(JsonAdaptedOffer.MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_invalidGoodName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedOffer offer \u003d new JsonAdaptedOffer(INVALID_GOOD_NAME, VALID_PRICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String expectedMessage \u003d GoodName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedOffer offer \u003d new JsonAdaptedOffer(VALID_GOOD_NAME, INVALID_PRICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_invalidGoodNameAndInvalidPrice_throwsIllegalValueExceptionForGoodName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedOffer offer \u003d new JsonAdaptedOffer(INVALID_GOOD_NAME, INVALID_PRICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String expectedMessage \u003d GoodName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"-1.0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD \u003d \"anything\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final Set\u003cJsonAdaptedOffer\u003e VALID_OFFERS \u003d BENSON.getOffers().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .map(JsonAdaptedOffer::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_OFFERS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_invalidOffers_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cJsonAdaptedOffer\u003e invalidOffers \u003d new HashSet\u003c\u003e(VALID_OFFERS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        invalidOffers.add(new JsonAdaptedOffer(VALID_GOOD, INVALID_PRICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidOffers);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 19,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInventoryStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.FIG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.GRAPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonInventoryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonInventoryStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInventory(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInventory\u003e readInventory(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new JsonInventoryStorage(Paths.get(filePath)).readInventory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(readInventory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"notJsonFormatInventory.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readInventory_invalidGoodInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidGoodInventory.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readInventory_invalidAndValidGoodInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidAndValidGoodInventory.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readAndSaveInventory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempInventory.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonInventoryStorage jsonInventoryStorage \u003d new JsonInventoryStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ReadOnlyInventory readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.addGood(FIG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.removeGood(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.addGood(GRAPE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonInventoryStorage.saveInventory(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveInventory_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private void saveInventory(ReadOnlyInventory addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new JsonInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    .saveInventory(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(new Inventory(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableInventoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.TypicalGoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonSerializableInventoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"JsonSerializableInventoryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TYPICAL_GOODS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalGoodsInventory.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path INVALID_GOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidGoodInventory.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path DUPLICATE_GOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateGoodInventory.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_typicalGoodsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_GOODS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory typicalGoodsInventory \u003d TypicalGoods.getTypicalInventory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(addressBookFromFile, typicalGoodsInventory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidGoodFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_GOOD_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_duplicateGoods_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_GOOD_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInventory.MESSAGE_DUPLICATE_GOOD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d new JsonInventoryStorage(getTempFilePath(\"inventory\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getInventoryFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotNull(storageManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void inventoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * {@link JsonInventoryStorage} class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInventoryStorageTest} class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        storageManager.saveInventory(original);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ReadOnlyInventory retrieved \u003d storageManager.readInventory().get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new Inventory(retrieved));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 23,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        descriptor.setOffers(person.getOffers());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses the {@code offers} into a {@code Set\u003cOffer\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public EditPersonDescriptorBuilder withOffers(String... offers) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cOffer\u003e offerSet \u003d Stream.of(offers)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(ParserUtil::splitOnLastWhitespace)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(ParserUtil::getGoodPricePair)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(x -\u003e new Offer((GoodName) x[0], (Price) x[1]))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        descriptor.setOffers(offerSet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 13,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GoodBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class to help with building Good objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String DEFAULT_GOOD_NAME \u003d \"Fuji Apple\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final int DEFAULT_GOOD_QUANTITY \u003d 10;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private GoodName goodName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private GoodQuantity goodQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodName \u003d new GoodName(DEFAULT_GOOD_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity \u003d new GoodQuantity(DEFAULT_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Initializes the GoodBuilder with the data of {@code goodToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder(Good goodToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodName \u003d goodToCopy.getGoodName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity \u003d goodToCopy.getGoodQuantity();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code GoodName} of the {@code Good} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder withGoodName(String goodName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodName \u003d new GoodName(goodName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code GoodQuantity} of the {@code Good} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder withGoodQuantity(int goodQuantity) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodQuantity \u003d new GoodQuantity(goodQuantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Good build() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new Good(goodName, goodQuantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InventoryBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class to help with building Inventory objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " *     {@code Inventory ab \u003d new InventoryBuilder().withGood(\"Apple\", \"Banana\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class InventoryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Inventory inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public InventoryBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public InventoryBuilder(Inventory inventory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a new {@code Good} to the {@code Inventory} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public InventoryBuilder withGood(Good good) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.addGood(good);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Inventory build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Set\u003cOffer\u003e offers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        offers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        offers \u003d new HashSet\u003c\u003e(personToCopy.getOffers());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses the {@code offers} into a {@code Set\u003cOffer\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public PersonBuilder withOffers(String ... offers) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.offers \u003d SampleDataUtil.getOfferSet(offers);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Person(name, phone, email, address, offers);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 8,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        person.getOffers().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            s -\u003e sb.append(PREFIX_OFFER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                    + s.getGood().toString() + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                    + s.getPrice().getValue() + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (descriptor.getOffers().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            Set\u003cOffer\u003e offers \u003d descriptor.getOffers().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            if (offers.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                sb.append(PREFIX_OFFER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                offers.forEach(s -\u003e sb.append(PREFIX_OFFER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                        .append(s.getGood().toString())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                        .append(\" \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                        .append(s.getPrice().getValue())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 15,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGoods.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_AVOCADO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_BLUEBERRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class containing a list of {@code Good} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TypicalGoods {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good APPLE \u003d new GoodBuilder().withGoodName(\"Fuji apple\").withGoodQuantity(15).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good BANANA \u003d new GoodBuilder().withGoodName(\"Cavendish banana\").withGoodQuantity(150).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good CITRUS \u003d new GoodBuilder().withGoodName(\"Brazil citrus\").withGoodQuantity(20).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good DURIAN \u003d new GoodBuilder().withGoodName(\"Malaysia durian\").withGoodQuantity(11).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good ENTAWAK \u003d new GoodBuilder().withGoodName(\"Indonesia entawak\").withGoodQuantity(0).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good FIG \u003d new GoodBuilder().withGoodName(\"India fig\").withGoodQuantity(10).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good GRAPE \u003d new GoodBuilder().withGoodName(\"Spain grape\").withGoodQuantity(10).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Manually added - Good\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good AVOCADO \u003d new GoodBuilder().withGoodName(VALID_GOOD_NAME_AVOCADO).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good BLUEBERRY \u003d new GoodBuilder().withGoodName(VALID_GOOD_NAME_BLUEBERRY).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns an {@code Inventory} with all the typical goods."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static Inventory getTypicalInventory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (Good person : getTypicalGoods()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            inventory.addGood(person);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static List\u003cGood\u003e getTypicalGoods() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA, CITRUS, DURIAN, ENTAWAK));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withOffers(\"hand sanitizer 500.00\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withOffers(\"pear 6\", \"orange 2\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withOffers(\"paper 3.55\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withOffers(VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_APPLE, VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 7,
      "-": 69
    }
  }
]
