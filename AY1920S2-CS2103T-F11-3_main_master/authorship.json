[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "mainClassName \u003d \u0027seedu.foodiebot.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    compile group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    archiveName \u003d \u0027foodiebot.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u0027site-name\u0027: \u0027main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F11-3/main\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "Samanthaseahpl": 3,
      "-": 151
    }
  },
  {
    "path": "out/production/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 9
    }
  },
  {
    "path": "out/production/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 39
    }
  },
  {
    "path": "out/production/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cVBox fx:id\u003d\"canteenList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 60
    }
  },
  {
    "path": "out/production/resources/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 36
    }
  },
  {
    "path": "out/production/resources/view/PersonListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 8
    }
  },
  {
    "path": "out/production/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 9
    }
  },
  {
    "path": "out/production/resources/view/StatusBarFooter.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 12
    }
  },
  {
    "path": "out/test/resources/view/UiPartTest/invalidFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 1
    }
  },
  {
    "path": "out/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 4
    }
  },
  {
    "path": "out/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 6
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents the parsed command-line parameters given to the application. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Parses the application command-line parameters. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        appParameters.setConfigPath("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 9,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cp\u003eThis is a workaround for the following error when MainApp is made the entry point of the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cp\u003eError: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cp\u003eThe reason is that MainApp extends Application. In that case, the LauncherHelper will check"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * for the javafx.graphics module to be present as a named module. We don\u0027t use JavaFX via the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * module system so it can\u0027t find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cp\u003eBy having a separate main class (Main) that doesn\u0027t extend Application to be the entry point"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * of the application, we avoid this issue."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 24
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "// import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.favorites.FavoriteFood;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.FoodieBotStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FoodieBot ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Loads the specified file paths into the main app."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    userPrefs.getStallsFilePath(), userPrefs.getFoodFilePath(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    userPrefs.getBudgetFilePath(), userPrefs.getFavoriteFoodFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        storage \u003d new StorageManager(foodieBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s canteen data and {@code"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * The data from the sample FoodieBot will be used instead if {@code storage}\u0027s FoodieBot"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * is not found, or an empty FoodieBot will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code storage}\u0027s FoodieBot."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Optional\u003cReadOnlyFoodieBot\u003e foodieBotOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ReadOnlyFoodieBot initialData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            storage.readFoodieBot(Canteen.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // storage.readFoodieBot(Budget.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            storage.readFoodieBot(Food.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            storage.readFoodieBot(FavoriteFood.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            foodieBotOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.info(\"Data file not found. Will be starting with a sample FoodieBot\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            initialData \u003d foodieBotOptional.orElseGet(SampleDataUtil::getSampleFoodieBot);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Data file not in the correct format. Will be starting with an empty FoodieBot\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            initialData \u003d new FoodieBot();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty FoodieBot\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            initialData \u003d new FoodieBot();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * configFilePath} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Config file at \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + configFilePathUsed"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \" is not in the correct format. \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * new {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"UserPrefs file at \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + prefsFilePath"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty FoodieBot\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logger.info(\"Starting FoodieBot \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FoodieBot ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 73,
      "lsjxavier": 7,
      "SHAUNGOH97": 4,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Config values used by the app */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { // this handles null as well."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** A Serializable class that contains the GUI settings. Guarantees: immutable. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { // this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * after the log file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a logger with the given name. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a Logger for the given class name. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Remove all the handlers from {@code logger}. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FileHandler fileHandler \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 17,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Container for user visible messages. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"The item index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_ITEMS_LISTED_OVERVIEW \u003d \"%1$d items listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_REPORT_EXPENSE \u003d \"Here are your expenses from %s to %s:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_REPORT_TRANSACTIONS \u003d \"Here are your transactions from %s to %s:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_FOOD_REVIEW \u003d \"Leave a review for the food item\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_BUDGET_SET \u003d \"Your %s budget has been set to $ %.2f.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        + \"You have $%.2f available to spend today.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_BUDGET_VIEW \u003d \"Your %s budget is $%.2f.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"Your remaining budget is $%.2f, with $%.2f to spend today.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"Here is your %s spending:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_NOTAVAILABLE \u003d \"No information available\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Invalid date format!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"Invalid prefix!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_RANGE \u003d \"Invalid date range!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_INVALID_FILEREADER \u003d \"Problem loading file!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_INVALID_CANTEEN_NAME \u003d \"Invalid canteen name!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 7,
      "lsjxavier": 10,
      "Samanthaseahpl": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents a version with major, minor and patch number */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new Version("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 9,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/ConceptualDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Contains an abstraction of a date type. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public enum ConceptualDate {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    START_DATE, END_DATE"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 6
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/DateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Formats an input String into a LocalDate object */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** A list of valid date formats. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static Stream\u003cDateTimeFormatter\u003e dateFormats() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Stream.of(DateTimeFormatter.ofPattern(\"d.M.uu\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d.M.uuuu\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d-M-uu\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d-M-uuuu\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d/M/uu\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d/M/uuuu\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** A list of valid month formats. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static List\u003cString\u003e monthFormats() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return List.of(\"JAN\", \"FEB\", \"MAR\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"APR\", \"MAY\", \"JUN\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"JUL\", \"AUG\", \"SEP\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"OCT\", \"NOV\", \"DEC\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"JANUARY\", \"FEBRUARY\", \"MARCH\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"APRIL\", \"JUNE\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"JULY\", \"AUGUST\", \"SEPTEMBER\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"OCTOBER\", \"NOVEMBER\", \"DECEMBER\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Converts a String representation of a date into a LocalDate object using a strict format resolver."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateString the input String to format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a LocalDate representation of the input String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if all possible DateTimeFormatter patterns are unable to format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * the String into a LocalDate object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static LocalDate formatDate(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return dateFormats()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .map(formatter -\u003e formatDateHelper(dateString, formatter.withResolverStyle(ResolverStyle.STRICT)))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .reduce((a, b) -\u003e a.equals(Optional.empty()) ? b : a)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .get()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException(MESSAGE_INVALID_DATE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** A helper function for formatDate() to parse a string to a LocalDate object with the given formatter."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns a LocalDate object encapsulated in an Optional if successful, otherwise an empty Optional"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * if the parser is unable to parse the date with the given formatter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param date the input String to format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param formatter the DateTimeFormatter to format the date with the required style."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return an Optional describing the date in a LocalDate object, or an empty Optional if this formatter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * is unable to parse the date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static Optional\u003cLocalDate\u003e formatDateHelper(String date, DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.ofNullable(localDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Formats the given String month into an integer. Throws a ParseException if the supplied input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * is not a valid month."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month the input month in a String format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return an integer representation of the month."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if the month cannot be formatted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static int formatMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String monthString \u003d month.toUpperCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        List\u003cString\u003e monthFormats \u003d monthFormats();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (monthFormats.contains(monthString)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int monthIndex \u003d monthFormats.indexOf(monthString.substring(0, 3));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return monthIndex + 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Formats the given String year into an integer. Throws a ParseException if the supplied year is not"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * a valid year."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year the input year in a String format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return an integer representation of the year."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if the year cannot be formatted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static int formatYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Integer.parseInt(year);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 103
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/DateRange.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_DATE_RANGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** An abstraction of a date range represented as a tuple. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DateRange {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructor of the DateRange object. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private DateRange(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructs a new DateRange object with the specified style."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the style is LENIENT, this will return a valid date range between the two supplied dates regardless"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of its position when passed into the method."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the style is SMART, this will return a valid date range only if the following conditions are met:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *     - The end date must not be before the start date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the style is STRICT, this will return a valid date range only if the following conditions are met:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *     - The end date must not be before the start date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *     - The start date must not be after the current system date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * In addition to the STRICT style, if the end date occurs after the current system date, the system"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * date is used as the end date instead."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startDate The start date of the range."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endDate The end date of the range."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The style to set the range to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a DateRange object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(LocalDate startDate, LocalDate endDate, DateRangeStyle style)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch(style) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case LENIENT:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new DateRange(endDate, startDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new DateRange(startDate, endDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case SMART:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new DateRange(startDate, endDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case STRICT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (endDate.isBefore(startDate) || startDate.isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (endDate.isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new DateRange(startDate, LocalDate.now());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new DateRange(startDate, endDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_DATE_RANGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startDate The start date of the date range."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endDate The end date of the date range."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(LocalDate startDate, LocalDate endDate) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startString The start date of the date range."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endString The end date of the date range."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(String startString, String endString, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate startDate \u003d DateFormatter.formatDate(startString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate endDate \u003d DateFormatter.formatDate(endString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, style);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startString The start date of the date range."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endString The end date of the date range."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(String startString, String endString) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startString, endString, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object. This method should be used if only one one date can be supplied,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * with the type whether it is a start or an end date."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateString The start/end date of the date range."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param conceptualDate Specifies if the dateString supplied is a start date or end date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(String dateString, ConceptualDate conceptualDate, DateRangeStyle style)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (conceptualDate.equals(ConceptualDate.START_DATE)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate startDate \u003d DateFormatter.formatDate(dateString);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.of(startDate, LocalDate.now(), style);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (conceptualDate.equals(ConceptualDate.END_DATE)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate endDate \u003d DateFormatter.formatDate(dateString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.of(DefiniteDate.MIN_DATE, endDate, style);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_PREFIX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object. This method should be used if only one one date can be supplied,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * with the type whether it is a start or an end date."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateString The start/end date of the date range."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param conceptualDate Specifies if the dateString supplied is a start date or end date."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(String dateString, ConceptualDate conceptualDate) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(dateString, conceptualDate, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied month and year."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofMonth(int month, int year, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(year, month, 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(year, month, Month.of(month).length(startDate.isLeapYear()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, style);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied month and year."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofMonth(int month, int year) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofMonth(month, year, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied month."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofMonth(int month, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        int year \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofMonth(month, year, style);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied month and year."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofMonth(int month) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofMonth(month, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied year."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofYear(int year, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(year, 1, 1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(year, 12, 31);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, style);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied year."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofYear(int year) throws ParseException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofYear(year, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Generates a new DateRange object with range as a single day."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param date The date."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofSingle(LocalDate date) throws ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(date, date, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object representing an extended period of time."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a DateRange object."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange generate() throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(DefiniteDate.MIN_DATE, DefiniteDate.MAX_DATE);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Gets the start date of the DateRange. */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Gets the end date of the DateRange. */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Returns a boolean value if the supplied date is present in the DateRange object."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param otherDate the other date to compare to."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean contains(LocalDate otherDate) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        boolean isEqual \u003d otherDate.isEqual(this.startDate) || otherDate.isEqual(this.endDate);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        boolean isInBetween \u003d otherDate.isAfter(this.startDate) \u0026\u0026 otherDate.isBefore(this.endDate);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return isEqual || isInBetween;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!(other instanceof DateRange)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        DateRange otherDateRange \u003d (DateRange) other;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return otherDateRange.getStartDate().equals(startDate)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 otherDateRange.getEndDate().equals(endDate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Objects.hash(startDate, endDate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 285
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/DateRangeStyle.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Enumeration of different ways to resolve a date range. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public enum DateRangeStyle {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Style to resolve a date range leniently. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    LENIENT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Style to resolve a date range smartly. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    SMART,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Style to resolve a date range strictly. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    STRICT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 14
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/DefiniteDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Contains static dates with a definite value. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DefiniteDate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate MIN_DATE \u003d LocalDate.of(1970, 1, 1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate MAX_DATE \u003d LocalDate.of(2199, 12, 31);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 9
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cp\u003e{@code Index} should be used right from the start (when parsing in a new user input), so that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * if the current component wants to communicate with another component, it can send an {@code"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Index} to avoid having to know what base the other component is using for its index. However,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * after receiving the {@code Index}, that component can convert it back to an int if the index will"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * not be passed to a different component again."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a new {@code Index} using a zero-based index. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a new {@code Index} using a one-based index. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents an error during conversion of data from one format to another */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Signals that some given data does not fulfill some constraints. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** @param message should contain relevant information on the failed constraint(s) */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** A container for App specific utility functions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Utility methods related to Collections */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Throws NullPointerException if {@code items} or any element of {@code items} is null. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns true if {@code items} contain any elements that are non-null. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** A class for accessing the Config File. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Writes and reads files */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Paths#get(String)}, otherwise returns false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a file if it does not exist along with its missing parent directories. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates parent directories of file if it has a parent directory */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Assumes file exists */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Writes given string to a file. Will create the file if it does not exist yet. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Converts a Java object instance to JSON and vice versa */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static ObjectMapper objectMapper \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new ObjectMapper()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    .findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    .registerModule("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                    .addDeserializer("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                            Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * not found. If any values are missing from the file, default values will be used, as long as"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * the file is a valid json file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     given here."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * new file if it doesn\u0027t."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Contains methods that retrieve logging level from serialized string. */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * \u003cp\u003eReturns null if there are no matches"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 28,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Helper functions for handling strings. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * match is required. \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * examples:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        checkArgument("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns a detailed message of the t, including the stack trace. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return value \u003e 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 !s.startsWith("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            \"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 21,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** API of the Logic component */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see seedu.foodiebot.model.Model#getFoodieBot()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ReadOnlyFoodieBot getFoodieBot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of canteens */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cCanteen\u003e getFilteredCanteenList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of canteens sorted by distance */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Path getFoodieBotFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Set the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Stalls */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Food */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of favorited food */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFavoriteFoodList(boolean isInitialised);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 51,
      "Samanthaseahpl": 2,
      "SHAUNGOH97": 6
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FoodMenuCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.TransactionsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.FoodieBotParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.favorites.FavoriteFood;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.Storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final FoodieBotParser foodieBotParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBotParser \u003d new FoodieBotParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Command command \u003d foodieBotParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (command.needToSaveCommand()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                storage.saveFoodieBot(model.getFoodieBot(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    mapCommandToModelName(commandResult.commandName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Maps the command to the relevant model for storage"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String mapCommandToModelName(String commandName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case GoToCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return Canteen.class.getSimpleName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case EnterCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            if (ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return Stall.class.getSimpleName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                return Food.class.getSimpleName();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case FoodMenuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return Food.class.getSimpleName();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Budget.class.getSimpleName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case RandomizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            //no storage yet."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return Randomize.class.getSimpleName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case FavoritesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return FavoriteFood.class.getSimpleName();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case TransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        case SelectItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the FoodieBot."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see Model#getFoodieBot()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ReadOnlyFoodieBot getFoodieBot() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFoodieBot();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getFilteredCanteenList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of canteens sorted by distance"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFoodieBotFilePath() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFilteredStallList(isInitialised);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredStallList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFilteredStallList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return model.getFilteredFoodList(isInitialised);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFavoriteFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFilteredFavoriteFoodList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 113,
      "lsjxavier": 2,
      "Samanthaseahpl": 4,
      "SHAUNGOH97": 13,
      "-": 52,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/BudgetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_BUDGET_SET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_BUDGET_VIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Manages the budget commands, e.g. view, set. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        COMMAND_WORD + \" VIEW : View the budget. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"SET : Set the budget\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"AMOUNT \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"100 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_SET \u003d MESSAGE_BUDGET_SET;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_VIEW \u003d MESSAGE_BUDGET_VIEW;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No budget stored!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String action;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public BudgetCommand(Budget budget, String action) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public BudgetCommand(String action) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.budget \u003d new Budget();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** A boolean check if the current system date falls inside the date range of the budget."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param budget The budget object to check against."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return true if the system date falls within the date range of the budget, false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static boolean systemDateIsInCycleRange(Budget budget) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return budget.getCycleRange().contains(LocalDate.now());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Helper function to write the budget to the model."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param model The FoodieBot model."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param budget The Budget object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void saveBudget(Model model, Budget budget) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.setBudget(budget);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Helper function to read the budget from the model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param model The FoodieBot model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return The budget stored in the model if it is present, otherwise a new empty budget with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * default values is created."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static Budget loadBudget(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return model.getBudget().isPresent()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                ? model.getBudget().get()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                : new Budget();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Helper function to hold a successful return message for \u0027budget set\u0027."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param budget The budget object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return The command result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static CommandResult commandSetSuccess(Budget budget) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new CommandResult(COMMAND_WORD, String.format(MESSAGE_SET,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                budget.getDurationAsString(), budget.getTotalBudget(), budget.getRemainingDailyBudget()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Helper function to hold a successful return message for \u0027budget view\u0027."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param budget The budget object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return The command result."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static CommandResult commandViewSuccess(Budget budget) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new CommandResult(COMMAND_WORD, String.format(MESSAGE_VIEW,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                budget.getDurationAsString(), budget.getTotalBudget(), budget.getRemainingBudget(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                budget.getRemainingDailyBudget(), budget.getDurationAsString()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (action.equals(\"set\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            saveBudget(model, budget);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return commandSetSuccess(budget);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Budget savedBudget \u003d loadBudget(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (!savedBudget.equals(new Budget())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                if (!systemDateIsInCycleRange(savedBudget)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    savedBudget.resetRemainingBudget();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                saveBudget(model, savedBudget);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return commandViewSuccess(savedBudget);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 30,
      "lsjxavier": 83
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Clears the application output. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Clear successful!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.setFoodieBot(new FoodieBot());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 7,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents a command with hidden internal logic and the ability to be executed. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "Samanthaseahpl": 2,
      "-": 12,
      "ignatiusong": 5
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents the result of a command execution. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public final String commandName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final boolean isLocationSpecified;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code CommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult(String commandName, String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.isLocationSpecified \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code CommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult(String commandName, String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                         boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.isLocationSpecified \u003d isLocationSpecified;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult(String commandName, String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this(commandName, feedbackToUser,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return isLocationSpecified;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return commandName.equals(otherCommandResult.commandName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 30,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Deletes a person identified using it\u0027s displayed index from the address book. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cCanteen\u003e lastShownList \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteenToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.deleteCanteen(canteenToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD, String.format(MESSAGE_DELETE_PERSON_SUCCESS, canteenToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 54
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/DirectionsCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class DirectionsCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public final Canteen canteen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * fields set to their default value."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public DirectionsCommandResult(Canteen canteen, String feedbackToUser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(\"goto\" , feedbackToUser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 19
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.CanteenStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Edits the details of an existing person in the address book. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \" 1 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final EditCanteenDescriptor editCanteenDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param editCanteenDescriptor details to edit the person with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EditCommand(Index index, EditCanteenDescriptor editCanteenDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(editCanteenDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.editCanteenDescriptor \u003d new EditCanteenDescriptor(editCanteenDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cCanteen\u003e lastShownList \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteenToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CanteenStub editedCanteen \u003d createEditedPerson(canteenToEdit, editCanteenDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*if (!canteenToEdit.isSameCanteen(editedCanteen) \u0026\u0026 model.hasCanteen(editedCanteen)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.setCanteen(canteenToEdit, editedCanteen);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.updateFilteredCanteenList(PREDICATE_SHOW_ALL_CANTEENS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD, String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedCanteen));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit} edited with"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static CanteenStub createEditedPerson("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Canteen canteenToEdit, EditCanteenDescriptor editCanteenDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert canteenToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Name updatedName \u003d editCanteenDescriptor.getName().orElse(canteenToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        int updatedNumberOfStalls \u003d editCanteenDescriptor.getNumberOfStalls();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        int updatedDistance \u003d editCanteenDescriptor.getDistance();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String updatedBlockName \u003d editCanteenDescriptor.getNearestBlockName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCanteenDescriptor.getTags().orElse(canteenToEdit.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CanteenStub("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updatedName, updatedNumberOfStalls, updatedTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editCanteenDescriptor.equals(e.editCanteenDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static class EditCanteenDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private int numberOfStalls;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private int distance;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private String nearestblockName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public EditCanteenDescriptor() {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /** Copy constructor. A defensive copy of {@code tags} is used internally. */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public EditCanteenDescriptor(EditCanteenDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            setNumberOfStalls(toCopy.numberOfStalls);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            setDistance(toCopy.distance);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            setNearestBlockName(toCopy.nearestblockName);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /** Returns true if at least one field is edited. */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setNumberOfStalls(int numberOfStalls) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.numberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setDistance(int distance) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.distance \u003d distance;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setNearestBlockName(String blockName) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.nearestblockName \u003d blockName;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public int getNumberOfStalls() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return numberOfStalls;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public int getDistance() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return distance;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public String getNearestBlockName() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return nearestblockName;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * modification is attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return (tags !\u003d null)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (!(other instanceof EditCanteenDescriptor)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            EditCanteenDescriptor e \u003d (EditCanteenDescriptor) other;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 getNumberOfStalls() \u003d\u003d (e.getNumberOfStalls())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 getDistance() \u003d\u003d (e.getDistance())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 getNearestBlockName().equals(e.getNearestBlockName())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 220
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/EnterCanteenCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Selects a canteen to view the food stalls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class EnterCanteenCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enter\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"CANTEEN_NAME \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"deck \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EnterCanteenCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Optional\u003cString\u003e canteenName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param index of the canteen in the filtered stall list to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EnterCanteenCommand(Index index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param canteenName from the given canteen name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EnterCanteenCommand(String canteenName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(canteenName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d Optional.of(canteenName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* All the stalls are retrieved as they contain the canteen name field"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "           which we filter the canteen name that specified in enter {canteenName}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.updateFilteredStallList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            List\u003cCanteen\u003e canteenList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (model.isLocationSpecified()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                canteenList \u003d model.getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                canteenList \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Canteen canteen \u003d canteenList.get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            logger.info(\"Enter \" + canteen.getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.updateFilteredStallList(s -\u003e s.getCanteenName().equalsIgnoreCase("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    canteen.getName().toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (canteenName.isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            List\u003cCanteen\u003e canteens \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            for (Canteen c : canteens) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                if (c.getName().toString().equalsIgnoreCase(canteenName.get())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    ParserContext.setCanteenContext(c);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    model.updateFilteredStallList(s -\u003e s.getCanteenName().equalsIgnoreCase(c.getName().toString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 75,
      "SHAUNGOH97": 1,
      "ignatiusong": 10
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/EnterStallCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Represents a command telling the user to enter a particular stall"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class EnterStallCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enter\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            + \"STALL_NAME \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            + \"Taiwanese \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EnterCanteenCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final Optional\u003cString\u003e stallName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @param index of the canteen in the filtered stall list to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public EnterStallCommand(Index index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.stallName \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @param stallName from the given canteen name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public EnterStallCommand(String stallName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(stallName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.stallName \u003d Optional.of(stallName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            Stall stall \u003d model.getFilteredStallList().get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            logger.info(\"Enter \" + stall.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            model.updateFilteredFoodList(f -\u003e f.getStallName().equalsIgnoreCase(stall.getName().toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        } else if (stallName.isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            List\u003cStall\u003e stalls \u003d model.getFilteredStallList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            for (Stall s : stalls) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                if (s.getName().toString().equalsIgnoreCase(stallName.get())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    ParserContext.setStallContext(s);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    model.updateFilteredFoodList(f -\u003e f.getStallName().equalsIgnoreCase(s.getName().toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SHAUNGOH97": 3,
      "ignatiusong": 73
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Terminates the program. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String CHANGE_CONTEXT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \"Exited from menu : \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String context \u003d ParserContext.getCurrentContext();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        switch (context) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case ParserContext.CANTEEN_CONTEXT:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCurrentCanteen(Optional.empty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new CommandResult(COMMAND_WORD, CHANGE_CONTEXT_ACKNOWLEDGEMENT + context,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case ParserContext.STALL_CONTEXT:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCurrentStall(Optional.empty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new CommandResult(COMMAND_WORD, CHANGE_CONTEXT_ACKNOWLEDGEMENT + context,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 11,
      "ignatiusong": 27
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/FavoritesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.Model.PREDICATE_SHOW_ALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Displays the food items favorited by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FavoritesCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"favorites\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Listed all favorites\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_SET_SUCCESS \u003d \"Favorited %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FavoritesCommand.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param index of the canteen in the filtered stall list to edit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FavoritesCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FavoritesCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            List\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Food food \u003d foodList.get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.setFavorite(food);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, String.format(MESSAGE_SET_SUCCESS, food.getName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.updateFilteredFavoriteList(PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_VIEW_SUCCESS, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 59
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/FilterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Filters a list of canteens or stalls to only display things which have a particular keyword"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"TAG \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Western\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public FilterCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 30
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Finds and lists all canteens in FoodieBot whose block name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \": Finds all canteens from given block name (case-insensitive)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Parameters: block_name\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \" com1 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.updateFilteredCanteenList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        Messages.MESSAGE_ITEMS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        model.getFilteredCanteenList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 49
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/FoodMenuCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Display the food items for the food stall */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FoodMenuCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"menu\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage :\" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully Printed Menu\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.setFoodieBot(new FoodieBot());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 20,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/GoToCanteenCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Get the directions to the canteen through a given location specified with prefix: /f."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class GoToCanteenCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \": Get the directions to the canteen. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"CANTEEN_NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"[\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_FROM_DATE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"NEAREST_BLOCK_NAME]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"deck \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_FROM_DATE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"com1 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GoToCanteenCommand.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Optional\u003cString\u003e canteenName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String nearestBlockName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param index of the canteen in the filtered canteen list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public GoToCanteenCommand(Index index, String nearestBlockName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.nearestBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public GoToCanteenCommand(String canteenName, String nearestBlockName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(canteenName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d Optional.of(canteenName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.nearestBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cCanteen\u003e lastShownList \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Optional\u003cCanteen\u003e result \u003d Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Canteen canteen \u003d lastShownList.get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            result \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .filter(c -\u003e c.getBlockName().equalsIgnoreCase(nearestBlockName)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 c.getName().equals(canteen.getName()))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (canteenName.filter(Predicate.not(String::isEmpty)).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            result \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .filter(c -\u003e c.getBlockName().equalsIgnoreCase(nearestBlockName)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 c.getName().equals(new Name(canteenName.get())))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTAVAILABLE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new DirectionsCommandResult(result.get(), MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 84,
      "lsjxavier": 3
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Format full help instructions for every command for display. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COMMAND_WORD + \": Shows program usage instructions.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD, SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Lists all canteens in FoodieBot to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all canteens\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_NEAREST_BLOCK \u003d \"Canteens near you\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String nearestBlockName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.nearestBlockName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListCommand(String nearestBlockName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.nearestBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean isLocationSpecified \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (nearestBlockName.isBlank()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.updateFilteredCanteenList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.setLocationSpecified(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS, false, false, isLocationSpecified);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.updateFilteredCanteenList(c -\u003e c.getBlockName().equalsIgnoreCase(nearestBlockName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            isLocationSpecified \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.setLocationSpecified(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_NEAREST_BLOCK, false, false,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    isLocationSpecified);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 30,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/RandomizeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Randomize a food item for the user based on index. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class RandomizeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"randomize\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generate a random food option.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the choices: \\n%s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private final Randomize randomize;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeCommand(String prefix, String action) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.randomize \u003d new Randomize(prefix, action);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        FileReader fileC \u003d model.listOfCanteens();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        FileReader fileS \u003d model.listOfStalls();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (prefix.contains(\"c\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            randomize.setCanteens(fileC);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            randomize.getOptionsByCanteen(fileS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            randomize.getOptions(fileS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return new CommandResult(COMMAND_WORD, String.format(MESSAGE_SUCCESS, randomize.output()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 16,
      "Samanthaseahpl": 27,
      "SHAUNGOH97": 2,
      "ignatiusong": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ReportCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_REPORT_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TO_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Get the latest expenses within a date range and output in report format */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_FROM_DATE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" FROM_DATE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_TO_DATE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" TO_DATE\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" MONTH\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_FROM_DATE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"14/2/2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_TO_DATE + \"24/2/2020\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"jan\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d MESSAGE_REPORT_EXPENSE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final DateRange dateRange;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ReportCommand(DateRange dateRange) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new CommandResult(COMMAND_WORD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        dateRange.getStartDate().toString(), dateRange.getEndDate().toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 17,
      "lsjxavier": 41
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/SelectItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.storage.JsonAdaptedBudget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Select the current list view item. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class SelectItemCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            + \"FOOD_INDEX \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            + \"1 \";;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have selected: %s, this costs: $%.2f\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_BUDGET \u003d \"You have selected: %s, this costs: $%.2f\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            + \"Your remaining budget is $%.2f\\nYou still have $%.2f to spend today:)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SelectItemCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final Optional\u003cString\u003e foodName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @param index of the food in the filtered food list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public SelectItemCommand(Index index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foodName \u003d Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @param foodName from the given food name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public SelectItemCommand(String foodName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foodName \u003d Optional.of(foodName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public CommandResult execute(Model model) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        String nameOfFood \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        float priceOfFood \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            List\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            Food food \u003d foodList.get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            nameOfFood \u003d food.getName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            priceOfFood \u003d food.getPrice();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            logger.info(\"Enter \" + food.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        } else if (foodName.isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            List\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            for (Food f : foodList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                if (f.getName().equalsIgnoreCase(foodName.get())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    nameOfFood \u003d foodName.get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    priceOfFood \u003d f.getPrice();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (model.getBudget().isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            Budget savedBudget \u003d model.getBudget().get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            savedBudget.subtractFromRemainingBudget(priceOfFood);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            model.setBudget(savedBudget);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            ReadOnlyFoodieBot foodieBot \u003d model.getFoodieBot();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            Path budgetFilePath \u003d new UserPrefs().getBudgetFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonAdaptedBudget(foodieBot), budgetFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            Budget newBudget \u003d model.getBudget().get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return new CommandResult(COMMAND_WORD, String.format("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    MESSAGE_SUCCESS_BUDGET, nameOfFood,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    priceOfFood,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    newBudget.getRemainingBudget(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    newBudget.getRemainingDailyBudget()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return new CommandResult(COMMAND_WORD, String.format("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    MESSAGE_SUCCESS, nameOfFood, priceOfFood));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 16,
      "SHAUNGOH97": 91
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/TransactionsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_REPORT_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TO_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Gets the latest food transactions where reviews and single-user ratings can be added. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class TransactionsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"transactions\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_FROM_DATE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" FROM_DATE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_TO_DATE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" TO_DATE\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" MONTH\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_FROM_DATE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"14/2/2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_TO_DATE + \"24/2/2020\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"jan\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d MESSAGE_REPORT_TRANSACTIONS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final DateRange dateRange;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public TransactionsCommand(DateRange dateRange) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new CommandResult(COMMAND_WORD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        dateRange.getStartDate().toString(), dateRange.getEndDate().toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 17,
      "lsjxavier": 41
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents an error which occurs during execution of a {@link Command}. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code cause}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * multiple argument values. Values for a given key are stored in a list, and the insertion ordering"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * is maintained. Keys are unique, but the list of argument values may contain duplicate argument"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * values, i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments* */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the last value of {@code prefix}. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * will return an empty list. Modifying the returned list will not affect the underlying data"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns a set view of all present {@code prefix} in the ArgumentMultimap."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Set\u003cPrefix\u003e prefixSet() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Set\u003cPrefix\u003e keySet \u003d argMultimap.keySet();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        keySet.remove(new Prefix(\"\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return keySet;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the size of the ArgumentMultimap, including the preamble (text before the first valid prefix)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the size of the ArgumentMultimap, including or excluding the preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * (text before the first valid prefix)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int size(boolean includePreamble) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return includePreamble ? argMultimap.size() : argMultimap.size() - 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns true if the set of supplied prefixes is a subset of the ArgumentMultimap key set"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * excluding the preamble."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean containsAll(Prefix... prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return prefixSet().containsAll(Set.of(prefixes));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns true if the set of supplied prefixes is an exact copy of the ArgumentMultimap key set"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * excluding the preamble."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean containsExact(Prefix... prefixes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return prefixSet().equals(Set.of(prefixes));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns true if any member in the set of supplied prefixes exists in the ArgumentMultimap key set,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * excluding the preamble."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean containsAny(Prefix... prefixes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .anyMatch(p -\u003e prefixSet().contains(p));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 12,
      "lsjxavier": 51,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July} where prefixes are {@code t/ k/ m/}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * prefixes to their respective argument values. Only the given prefixes will be recognized in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * the arguments string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** {@see findAllPrefixPositions} */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * from index {@code fromIndex}. An occurrence is valid if there is a whitespace before {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * prefix}. Returns -1 if no such occurrence can be found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * \u003cp\u003eE.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * this method returns -1 as there are no valid occurrences of \"p/\" with whitespace before it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * However, if {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1 : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * that maps the extracted prefixes to their respective arguments. Prefixes are extracted based"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * on their zero-based positions in {@code argsString}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static ArgumentMultimap extractArguments("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        prefixPositions.sort(("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String argValue \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    extractArgumentValue("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * currentPrefixPosition}. The end position of the value is determined by {@code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * nextPrefixPosition}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static String extractArgumentValue("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String argsString,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Represents a prefix\u0027s position in an arguments string. */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 43,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/BudgetCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_WEEK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Parses input arguments and creates a new BudgetCommand object */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand and returns a"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * BudgetCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE_BY_DAY,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PREFIX_DATE_BY_WEEK, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String action \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch(action) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                Budget budget \u003d setBudget(argMultimap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new BudgetCommand(budget, action);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IndexOutOfBoundsException oobe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new BudgetCommand(action);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sets the budget to the specified values given by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param argMultimap the map storing all arguments by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new Budget object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if any input by the user is unable to be parsed into the Budget object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget setBudget(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (argMultimap.size(false) \u003d\u003d 1 \u0026\u0026 argMultimap.containsAny("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PREFIX_DATE_BY_DAY, PREFIX_DATE_BY_WEEK, PREFIX_DATE_BY_MONTH)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                Prefix firstPrefix \u003d argMultimap.prefixSet()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .findFirst()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String argValue \u003d getArgString(argMultimap, firstPrefix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                float value \u003d Float.parseFloat(argValue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new Budget(value, firstPrefix.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (NullPointerException | NumberFormatException ne) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Extracts the argument tagged to the given prefix. Throws {@code ParseException}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * if no value is present."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String getArgString(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return argMultimap.getValue(prefix)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 19,
      "lsjxavier": 64
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Contains Command Line Interface (CLI) syntax definitions common to multiple commands */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Prefix PREFIX_DATE_BY_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Prefix PREFIX_DATE_BY_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Prefix PREFIX_DATE_BY_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Prefix PREFIX_DATE_BY_WEEK \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Prefix PREFIX_FROM_DATE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Prefix PREFIX_TO_DATE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Prefix PREFIX_NOOFSTALLS \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final Prefix PREFIX_CANTEEN \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 13,
      "lsjxavier": 3,
      "Samanthaseahpl": 2
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Parses input arguments and creates a new DeleteCommand object */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * a DeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 9,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EditCommand.EditCanteenDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Parses input arguments and creates a new EditCommand object */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor editCanteenDescriptor \u003d new EditCanteenDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            editCanteenDescriptor.setName("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .ifPresent(editCanteenDescriptor::setTags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!editCanteenDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new EditCommand(index, editCanteenDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 72
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/EnterCanteenCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class EnterCanteenCommandParser implements Parser\u003cEnterCanteenCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EnterCanteenCommand and returns a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * EnterCanteenCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EnterCanteenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            index \u003d ParserUtil.parseIndex(enteredText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new EnterCanteenCommand(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String canteenName \u003d ParserUtil.parseCanteenName(enteredText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new EnterCanteenCommand(canteenName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 43,
      "ignatiusong": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/EnterStallCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterStallCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Parses a enter stall command to tell if it is valid"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class EnterStallCommandParser implements Parser\u003cEnterStallCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EnterStallCommand and returns a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * EnterStallCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public EnterStallCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.CANTEEN_CONTEXT)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(enteredText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new EnterStallCommand(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            String stallName \u003d ParserUtil.parseStallName(enteredText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return new EnterStallCommand(stallName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SHAUNGOH97": 5,
      "ignatiusong": 43
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/FavoritesCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * ."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FavoritesCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavoritesCommand and returns a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * FavoritesCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FavoritesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String[] enteredText \u003d argMultimap.getPreamble().split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String action \u003d enteredText[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new FavoritesCommand(ParserUtil.parseIndex(enteredText[1]));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (IndexOutOfBoundsException oobe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new FavoritesCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoritesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 43
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Parses input arguments and creates a new FindCommand object */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 9,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/FoodMenuCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FoodMenuCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Parses input arguments and creates a new FoodMenuCommand object */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FoodMenuCommandParser implements Parser\u003cFoodMenuCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FoodMenuCommand and returns a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * FoodMenuCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodMenuCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FoodMenuCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new FoodMenuCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 27,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/FoodieBotParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FoodMenuCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.TransactionsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Parses user input. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FoodieBotParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Used for initial separation of command word and args. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case GoToCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new GoToCanteenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case EnterCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            if (ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new EnterCanteenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                return new EnterStallCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case FoodMenuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new FoodMenuCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case SelectItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return new SelectItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case RandomizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return new RandomizeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case FavoritesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new FavoritesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new FilterCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case TransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new TransactionsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 55,
      "Samanthaseahpl": 1,
      "SHAUNGOH97": 1,
      "-": 47,
      "ignatiusong": 8
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/GoToCanteenCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Parses input arguments and creates a new GoToCanteenCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class GoToCanteenCommandParser implements Parser\u003cGoToCanteenCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoToCanteenCommand and returns a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * GoToCanteenCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public GoToCanteenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FROM_DATE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCanteenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String nearestBlockName \u003d ParserUtil.parseBlockName(argMultimap.getValue(PREFIX_FROM_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            index \u003d ParserUtil.parseIndex(enteredText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new GoToCanteenCommand(index, nearestBlockName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String canteenName \u003d ParserUtil.parseCanteenName(enteredText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new GoToCanteenCommand(canteenName, nearestBlockName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 47,
      "lsjxavier": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Parses input arguments and creates a new GoToCanteenCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoToCanteenCommand and returns a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * GoToCanteenCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_FROM_DATE)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String nearestBlockName \u003d ParserUtil.parseBlockName(argMultimap.getValue(PREFIX_FROM_DATE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ListCommand(nearestBlockName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ListCommand(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 36,
      "lsjxavier": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ParserContext.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Shows the context that the Parser is currently parsing in"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class ParserContext {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MAIN_CONTEXT \u003d \"MAIN\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String CANTEEN_CONTEXT \u003d \"CANTEEN\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String STALL_CONTEXT \u003d \"STALL\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String INVALID_CONTEXT_MESSAGE \u003d \"Wrong Context to Call Message. Current Context: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private static String currentContext \u003d ParserContext.MAIN_CONTEXT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private static Optional\u003cCanteen\u003e currentCanteen \u003d Optional.empty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private static Optional\u003cStall\u003e currentStall \u003d Optional.empty();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static String getCurrentContext() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return currentContext;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static void setCurrentContext(String context) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        currentContext \u003d context;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static Optional\u003cCanteen\u003e getCurrentCanteen() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return currentCanteen;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static void setCurrentCanteen(Optional\u003cCanteen\u003e canteen) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        currentCanteen \u003d canteen;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static Optional\u003cStall\u003e getCurrentStall() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return currentStall;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static void setCurrentStall(Optional\u003cStall\u003e stall) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        currentStall \u003d stall;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static void setCanteenContext(Canteen canteen) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        //ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        /**I comment this out because in EnterCanteenCommand, if you"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "         * enter the canteen with text eg. enter The Deck, you change canteen context"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "         * inside the command. However, you cannot change the currentContext as"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "         * there is a check in MainWindow for EnterCanteenCommand, whether it is MAIN or"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "         * CANTEEN, so should only change currentContext after it passes through check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        ParserContext.setCurrentCanteen(Optional.of(canteen));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static void setStallContext(Stall stall) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        //ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        ParserContext.setCurrentStall(Optional.of(stall));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHAUNGOH97": 12,
      "ignatiusong": 50
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Block;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Contains utility methods used for parsing strings in the various *Parser classes. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses a {@code String name} into a numberOfStalls. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static int parseNoOfStalls(String numberOfStalls) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(numberOfStalls);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Integer.parseInt(numberOfStalls);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses a {@code String blockName} into an {@code blockName}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the given {@code blockName} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static String parseBlockName(String blockName) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(blockName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String trimmedBlockName \u003d blockName.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!Block.isValidBlock(trimmedBlockName)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException(Block.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return trimmedBlockName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses a {@code String canteenName} into an {@code canteenName}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the given {@code canteenName} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static String parseCanteenName(String canteenName) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(canteenName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String trimmedCanteenName \u003d canteenName.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!Canteen.isValidCanteen(trimmedCanteenName)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException(Canteen.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return trimmedCanteenName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Parses a {@code String stallName} into a {@code stallName}. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * be trimmed"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @throws ParseException if the given {@code stallName} is invalid"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static String parseStallName(String stallName) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(stallName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String trimmedStallName \u003d stallName.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!Stall.isValidStall(trimmedStallName)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new ParseException(Stall.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return trimmedStallName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Parses a {@code String foodName} into a {@code foodName}. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * be trimmed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @throws ParseException if the given {@code foodName} is invalid"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static String parseFoodName(String foodName) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        String trimmedFoodName \u003d foodName.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (!Food.isValidFood(trimmedFoodName)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            throw new ParseException(Food.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return trimmedFoodName;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}. */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 58,
      "SHAUNGOH97": 17,
      "-": 75,
      "ignatiusong": 17
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/RandomizeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_CANTEEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/** Process the arguments for Randomize */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "public class RandomizeCommandParser implements Parser\u003cRandomizeCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method process the input for the correct execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param args This is the given input from the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return RandomizeCommand for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws ParseException when the input provided is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CANTEEN, PREFIX_TAG);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (arePrefixesPresent(argMultimap)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return separatePrefix(argMultimap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return new RandomizeCommand(\"\", \"all\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method separate the argument from the prefix."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param argMultimap given argMultimap"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return RandomizeCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws ParseException when the input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeCommand separatePrefix(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            Prefix firstPrefix \u003d argMultimap.prefixSet().stream().findFirst().get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            String argValue \u003d getArgString(argMultimap, firstPrefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return new RandomizeCommand(firstPrefix.toString(), argValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method checks if there are Prefixes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param argumentMultimap arguments for testing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return Boolean true is there are prefix, false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (argumentMultimap.size(false) \u003d\u003d 1 \u0026\u0026 argumentMultimap.containsAny("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                PREFIX_TAG, PREFIX_CANTEEN)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method extract the argument attached to the prefix."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param argMultimap The arguments provided."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param prefix the prefix available for this method."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return String of the arguement attach to the prefix."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws ParseException If no value is present."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static String getArgString(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return argMultimap.getValue(prefix)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "Samanthaseahpl": 69
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ReportCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TO_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.ConceptualDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRangeStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Parses input arguments and creates a new ReportCommand object */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ReportCommandParser implements Parser\u003cReportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReportCommand and returns a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ReportCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM_DATE, PREFIX_TO_DATE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PREFIX_DATE_BY_MONTH, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (argMultimap.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // The multimap only contains the preamble. No prefixes are present."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.generate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_FROM_DATE, PREFIX_TO_DATE)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String start \u003d getArgString(argMultimap, PREFIX_FROM_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String end \u003d getArgString(argMultimap, PREFIX_TO_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.of(start, end, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_FROM_DATE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String start \u003d getArgString(argMultimap, PREFIX_FROM_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.of(start, ConceptualDate.START_DATE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_TO_DATE)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String end \u003d getArgString(argMultimap, PREFIX_TO_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.of(end, ConceptualDate.END_DATE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_MONTH)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String monthString \u003d getArgString(argMultimap, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int month \u003d DateFormatter.formatMonth(monthString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.ofMonth(month, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_YEAR)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String yearString \u003d getArgString(argMultimap, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int year \u003d DateFormatter.formatYear(yearString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.ofYear(year, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_MONTH, PREFIX_DATE_BY_YEAR)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String monthString \u003d getArgString(argMultimap, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String yearString \u003d getArgString(argMultimap, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int month \u003d DateFormatter.formatMonth(monthString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int year \u003d DateFormatter.formatYear(yearString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.ofMonth(month, year, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Extracts the argument tagged to the given prefix. Throws {@code ParseException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * if no value is present."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String getArgString(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return argMultimap.getValue(prefix)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReportCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 22,
      "lsjxavier": 59
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/SelectItemCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": " * Parses a enter stall command to tell if it is valid"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "public class SelectItemCommandParser implements Parser\u003cSelectItemCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EnterStallCommand and returns a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * EnterStallCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public SelectItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.STALL_CONTEXT)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(enteredText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return new SelectItemCommand(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            String foodName \u003d ParserUtil.parseFoodName(enteredText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return new SelectItemCommand(foodName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "SHAUNGOH97": 45
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/TransactionsCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TO_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.ConceptualDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRangeStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.TransactionsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Parses input arguments and creates a new TransactionsCommand object */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class TransactionsCommandParser implements Parser\u003cTransactionsCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TransactionsCommand and returns a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * TransactionsCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public TransactionsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM_DATE, PREFIX_TO_DATE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PREFIX_DATE_BY_MONTH, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (argMultimap.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // The multimap only contains the preamble. No prefixes are present."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.generate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_FROM_DATE, PREFIX_TO_DATE)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String start \u003d getArgString(argMultimap, PREFIX_FROM_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String end \u003d getArgString(argMultimap, PREFIX_TO_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.of(start, end, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_FROM_DATE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String start \u003d getArgString(argMultimap, PREFIX_FROM_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.of(start, ConceptualDate.START_DATE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_TO_DATE)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String end \u003d getArgString(argMultimap, PREFIX_TO_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.of(end, ConceptualDate.END_DATE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_MONTH)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String monthString \u003d getArgString(argMultimap, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int month \u003d DateFormatter.formatMonth(monthString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.ofMonth(month, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_YEAR)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String yearString \u003d getArgString(argMultimap, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int year \u003d DateFormatter.formatYear(yearString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.ofYear(year, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_MONTH, PREFIX_DATE_BY_YEAR)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String monthString \u003d getArgString(argMultimap, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String yearString \u003d getArgString(argMultimap, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int month \u003d DateFormatter.formatMonth(monthString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int year \u003d DateFormatter.formatYear(yearString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.ofMonth(month, year, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TransactionsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Extracts the argument tagged to the given prefix. Throws {@code} ParseException if no value is present.*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String getArgString(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return argMultimap.getValue(prefix)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, TransactionsCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 22,
      "lsjxavier": 53
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents a parse error encountered by a parser. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/FoodieBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.CanteenStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.UniqueCanteenList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.favorites.FavoriteFood;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.UniqueStallList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Wraps all data at the application level Duplicates are not allowed (by .isSame_____ comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FoodieBot implements ReadOnlyFoodieBot {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final UniqueCanteenList canteens;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final UniqueStallList stalls;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final UniqueFoodList foods;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final UniqueFoodList favoritedFoods;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private boolean isLocationSpecified;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteens \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stalls \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        foods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoritedFoods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        budget \u003d new Budget();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        isLocationSpecified \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBot() {}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates an FoodieBot using the Canteens in the {@code toBeCopied} */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBot(ReadOnlyFoodieBot toBeCopied) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Replaces the contents of the canteen list with {@code canteens}. {@code canteens} must not"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * contain duplicate canteens."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteens(List\u003cCanteen\u003e canteens) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteens.setCanteens(canteens);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStalls(List\u003cStall\u003e stalls) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stalls.setStalls(stalls);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public void setFood(List\u003cFood\u003e food) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foods.setFood(food);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFavoritedFoods(List\u003cFood\u003e stalls) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.foods.setFood(stalls);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setLocationSpecified(boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.isLocationSpecified \u003d isLocationSpecified;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Resets the existing data of this {@code FoodieBot} with {@code newData}. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void resetData(ReadOnlyFoodieBot newData) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        setCanteens(newData.getCanteenList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        setStalls(newData.getStallList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        setFood(newData.getFoodList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //// canteen-level operations"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if a canteen with the same identity as {@code canteen} exists in the address"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean hasCanteen(Canteen canteen) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(canteen);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteens.contains(canteen);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Adds a canteen to the foodiebot. The canteen must not already exist in the foodiebot."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void addCanteen(Canteen p) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteens.add(p);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Adds a canteen to the foodiebot. The canteen must not already exist in the foodiebot."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void addCanteen(CanteenStub p) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteens.add(new Canteen(p.getName(), 0, 0,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \"name\", \"\", \"\", p.getTags(), \"\", new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Replaces the given canteen {@code target} in the list with {@code editedCanteen}. {@code"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * target} must exist in the foodiebot. The canteen identity of {@code editedCanteen} must"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * not be the same as another existing canteen in the foodiebot."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen(Canteen target, Canteen editedCanteen) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(editedCanteen);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteens.setCanteen(target, editedCanteen);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Removes {@code key} from this {@code FoodieBot}. {@code key} must exist in the address"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void removeCanteen(Canteen key) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteens.remove(key);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteens.asUnmodifiableObservableList().size() + \" canteens\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getCanteenList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteens.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return isLocationSpecified;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //// stall-level operations"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns true if a canteen with the same identity as {@code Stall} exists in the address"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean hasStall(Stall stall) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(stall);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return stalls.contains(stall);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the address"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return foods.contains(food);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cStall\u003e getStallList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return stalls.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Adds a stall to the foodiebot. The stall must not already exist in the foodiebot."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void addStall(Stall s) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stalls.add(s);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return foods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cFood\u003e getFavoriteList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favoritedFoods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Adds a food to the foodiebot. The food must not already exist in the foodiebot"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @param f"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void addFood(Food f) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        foods.add(f);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                || (other instanceof FoodieBot // instanceof handles nulls"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 canteens.equals(((FoodieBot) other).canteens) \u0026\u0026 stalls.equals(((FoodieBot) other).stalls));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteens.hashCode();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFavorite(Food food) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoritedFoods.add(food);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cFood\u003e getFavoriteFoodList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favoritedFoods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void addFavoriteFood(FavoriteFood f) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoritedFoods.add(f);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 188,
      "lsjxavier": 14,
      "Samanthaseahpl": 1,
      "SHAUNGOH97": 15,
      "ignatiusong": 19
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** The API of the Model component. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Predicate PREDICATE_SHOW_ALL \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Replaces user prefs data with the data in {@code userPrefs}. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the user prefs. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Sets the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Sets the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Replaces address book data with the data in {@code addressBook}. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setFoodieBot(ReadOnlyFoodieBot foodieBot);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ReadOnlyFoodieBot getFoodieBot();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if a canteen with the same identity as {@code canteen} exists in the address"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    boolean hasCanteen(Canteen canteen);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Deletes the given canteen. The canteen must exist in the address book. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void deleteCanteen(Canteen target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Adds the given canteen. {@code canteen} must not already exist in the address book. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void addCanteen(Canteen canteen);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Replaces the given canteen {@code target} with {@code editedPerson}. {@code target} must"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * exist in the address book. The canteen identity of {@code editedPerson} must not be the same"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * as another existing canteen in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setCanteen(Canteen target, Canteen editedCanteen);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    void setBudget(Budget budget);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Optional\u003cBudget\u003e getBudget();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Return a FileReader of the list of canteen in json file */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    FileReader listOfCanteens() throws FileNotFoundException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Return a FileReader of the list of Stalls in json file */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    FileReader listOfStalls() throws FileNotFoundException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns an unmodifiable view of the filtered canteen list */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cCanteen\u003e getFilteredCanteenList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns an unmodifiable view of the filtered canteen list sorted by distance */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setLocationSpecified(boolean isLocationSpecified);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Updates the filter of the filtered canteen list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void updateFilteredCanteenList(Predicate\u003cCanteen\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered stall list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cStall\u003e getFilteredStallList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered stall list */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Updates the filter of the filtered stall list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void updateFilteredStallList(Predicate\u003cStall\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food list */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food list */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    boolean isLocationSpecified();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setFavorite(Food food);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFavoriteFoodList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void updateFilteredFavoriteList(Predicate\u003cFood\u003e predicateShowAll);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 89,
      "Samanthaseahpl": 8,
      "lsjxavier": 6,
      "SHAUNGOH97": 12,
      "ignatiusong": 7
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.FoodieBotStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final FoodieBot foodieBot;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final FilteredList\u003cCanteen\u003e filteredCanteens;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final FilteredList\u003cStall\u003e filteredStalls;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFavoriteFoodList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager(ReadOnlyFoodieBot foodieBot, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(foodieBot, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logger.fine(\"Initializing with food data: \" + foodieBot + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.foodieBot \u003d new FoodieBot(foodieBot);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        filteredCanteens \u003d new FilteredList\u003c\u003e(this.foodieBot.getCanteenList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        filteredStalls \u003d new FilteredList\u003c\u003e(this.foodieBot.getStallList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.foodieBot.getFoodList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        filteredFavoriteFoodList \u003d new FilteredList\u003c\u003e(this.foodieBot.getFavoriteFoodList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        budget \u003d this.foodieBot.getBudget();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this(new FoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return userPrefs.getFoodieBotFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userPrefs.setFoodieBotFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ReadOnlyFoodieBot getFoodieBot() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFoodieBot(ReadOnlyFoodieBot foodieBot) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.foodieBot.resetData(foodieBot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean hasCanteen(Canteen canteen) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(canteen);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot.hasCanteen(canteen);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void deleteCanteen(Canteen target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.removeCanteen(target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void addCanteen(Canteen canteen) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.addCanteen(canteen);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        updateFilteredCanteenList(PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen(Canteen target, Canteen editedCanteen) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(target, editedCanteen);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.setCanteen(target, editedCanteen);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Reads the stored budget in the Json file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return The budget object stored in the Json file. If the file is not present,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * returns an empty Optional value."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Optional\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    new JsonFoodieBotStorage(userPrefs.getBudgetFilePath());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage storage \u003d new StorageManager(foodieBotStorage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Optional\u003cReadOnlyFoodieBot\u003e newBot \u003d storage.readFoodieBot(Budget.class.getSimpleName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (newBot.equals(Optional.empty())) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Budget budget \u003d newBot.get().getBudget();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.of(budget);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(budget);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.setBudget(budget);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This function return a FileReader of the jsonfile (foodiebot.json)."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return FileReader of the jsonfile"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public FileReader listOfCanteens() throws FileNotFoundException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return new FileReader(String.valueOf(foodieBotStorage.getCanteensFilePath()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * This function return a FileReader of the jsonfile (foodiebot-stalls.json)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return FileReader of the jsonfile"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public FileReader listOfStalls() throws FileNotFoundException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath(), userPrefs.getStallsFilePath(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        userPrefs.getBudgetFilePath(), userPrefs.getFoodieBotFilePath(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        userPrefs.getFavoriteFoodFilePath());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return new FileReader(String.valueOf(foodieBotStorage.getStallsFilePath()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Canteen List Accessors"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Canteen}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getFilteredCanteenList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        SortedList\u003cCanteen\u003e sortedCanteenList \u003d new SortedList\u003c\u003e(filteredCanteens);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        sortedCanteenList.setComparator(Comparator.comparing((Canteen c) -\u003e c.getName().fullName));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return sortedCanteenList;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Get filtered canteen list sorted by distance"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        SortedList\u003cCanteen\u003e sortedCanteenList \u003d new SortedList\u003c\u003e(filteredCanteens);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        sortedCanteenList.setComparator(Comparator.comparingInt(Canteen::getDistance));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return sortedCanteenList;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void updateFilteredCanteenList(Predicate\u003cCanteen\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        filteredCanteens.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Stall} backed by the internal list of"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!isInitialised) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            updateModelManagerStalls();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return filteredStalls;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Stall} backed by the internal list of"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredStallList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return filteredStalls;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (!isInitialised) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            updateModelManagerFood();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        //List\u003cFood\u003e filterCopy \u003d new ArrayList\u003c\u003e(filteredFoods);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        //filteredFoods.removeAll(filterCopy);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        //filteredFoods.addAll(foods);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Updates the filter of the filtered stall list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void updateFilteredStallList(Predicate\u003cStall\u003e predicate) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        filteredStalls.setPredicate(predicate);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot.isLocationSpecified();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setLocationSpecified(boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.setLocationSpecified(isLocationSpecified);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFavorite(Food food) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(food);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.setFavorite(food);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFavoriteFoodList() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return filteredFavoriteFoodList;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void updateFilteredFavoriteList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        filteredFavoriteFoodList.setPredicate(predicate);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void updateModelManagerStalls() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    new JsonFoodieBotStorage(userPrefs.getStallsFilePath());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Storage storage \u003d new StorageManager(foodieBotStorage);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Optional\u003cReadOnlyFoodieBot\u003e newBot \u003d storage.readFoodieBot(Stall.class.getSimpleName());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            foodieBot.setStalls(newBot.get().getStallList());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public void updateModelManagerFood() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    new JsonFoodieBotStorage("
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                            userPrefs.getStallsFilePath(), userPrefs.getBudgetFilePath(), userPrefs.getFoodFilePath());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            Storage storage \u003d new StorageManager(foodieBotStorage);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            Optional\u003cReadOnlyFoodieBot\u003e newBot \u003d storage.readFoodieBot(Food.class.getSimpleName());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            foodieBot.setFood(newBot.get().getFoodList());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot.equals(other.foodieBot)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 filteredCanteens.equals(other.filteredCanteens);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 250,
      "Samanthaseahpl": 25,
      "lsjxavier": 33,
      "SHAUNGOH97": 54,
      "ignatiusong": 17
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/ReadOnlyFoodieBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Unmodifiable view of an foodiebot"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public interface ReadOnlyFoodieBot {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an unmodifiable view of the canteens list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * canteens."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cCanteen\u003e getCanteenList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cStall\u003e getStallList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cFood\u003e getFavoriteList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Budget getBudget();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    boolean isLocationSpecified();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 27,
      "lsjxavier": 2,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Unmodifiable view of user prefs. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Path getFoodieBotFilePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 13
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents User\u0027s preferences. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path foodieBotFilePath \u003d Paths.get(\"foodiebot.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path stallsFilePath \u003d Paths.get(\"foodiebot-stalls.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Path budgetFilePath \u003d Paths.get(\"foodiebot-budget.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private Path foodFilePath \u003d Paths.get(\"foodiebot-food.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path favoriteFoodFilePath \u003d Paths.get(\"foodiebot-favorites.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a {@code UserPrefs} with default values. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a {@code UserPrefs} with the prefs in {@code userPrefs}. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        setFoodieBotFilePath(newUserPrefs.getFoodieBotFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFoodieBotFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBotFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getStallsFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return stallsFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public Path getFoodFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return foodFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Path getBudgetFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return budgetFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFavoriteFoodFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favoriteFoodFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFoodieBotFilePath(Path foodieBotFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(foodieBotFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.foodieBotFilePath \u003d foodieBotFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 foodieBotFilePath.equals(o.foodieBotFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Objects.hash(guiSettings, foodieBotFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + foodieBotFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 27,
      "lsjxavier": 5,
      "SHAUNGOH97": 5,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/budget/Budget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_DAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * Represents a person\u0027s budget."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String DAILY \u003d PREFIX_DATE_BY_DAY.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String WEEKLY \u003d PREFIX_DATE_BY_WEEK.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String MONTHLY \u003d PREFIX_DATE_BY_MONTH.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final float totalBudget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private float remainingBudget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate dateOfCreation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private DateRange cycleRange;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructs a {@code Budget} object. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget(float totalBudget, float remainingBudget,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                  String duration, LocalDate dateOfCreation, DateRange cycleRange) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d remainingBudget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateOfCreation \u003d dateOfCreation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d cycleRange;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget(float totalBudget, float remainingBudget,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                  String duration, LocalDate dateOfCreation) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d remainingBudget;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateOfCreation \u003d dateOfCreation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d setCycleRange(duration);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget(float totalBudget, float remainingBudget,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                  String duration, LocalDate dateOfCreation, LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d remainingBudget;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateOfCreation \u003d dateOfCreation;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        DateRange range;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            range \u003d DateRange.of(startDate, endDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            range \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d range;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructs a {@code Budget} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param totalBudget The value of the budget."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param duration The duration cycle of the budget."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget(float totalBudget, String duration) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this(totalBudget, totalBudget, duration, LocalDate.now());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this(Float.MAX_VALUE, DAILY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Sets a DateRange based on the duration of the budget cycle and the system date. */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private DateRange setCycleRange(String duration) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (duration.equals(DAILY)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return DateRange.ofSingle(LocalDate.now());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else if (duration.equals(WEEKLY)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return DateRange.of(LocalDate.now(), LocalDate.now().plusWeeks(1).minusDays(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else if (duration.equals(MONTHLY)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return DateRange.of(LocalDate.now(), LocalDate.now().plusMonths(1).minusDays(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Resets the remaining budget to  */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void resetRemainingBudget() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d this.totalBudget;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d setCycleRange(this.duration);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Divides the remaining budget by 5 if set to weekly or 20 if set to monthly,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * to get an average daily budget for weekdays."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return An average daily budget."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public float getRemainingDailyBudget() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (duration.equals(WEEKLY)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return this.remainingBudget / 5;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (duration.equals(MONTHLY)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return this.remainingBudget / 20;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return this.remainingBudget;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public float getTotalBudget() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.totalBudget;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public float getRemainingBudget() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.remainingBudget;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getDurationAsString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.duration.equals(DAILY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                ? \"daily\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                : this.duration.equals(WEEKLY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    ? \"weekly\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    : \"monthly\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Return the date where the budget is created */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getDateOfCreation() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.dateOfCreation;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Return the cycle for which this budget is for. */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public DateRange getCycleRange() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.cycleRange;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** . */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void subtractFromRemainingBudget(float expenses) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget -\u003d expenses;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (this.remainingBudget \u003c 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.remainingBudget \u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** . */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void addToRemainingBudget(float expenses) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget +\u003d expenses;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (this.remainingBudget \u003e this.totalBudget) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.remainingBudget \u003d this.totalBudget;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Check if this is a default value */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean isDefaultBudget() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.totalBudget \u003d\u003d Float.MAX_VALUE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return otherBudget.getTotalBudget() \u003d\u003d totalBudget"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 otherBudget.getRemainingBudget() \u003d\u003d remainingBudget"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 otherBudget.getDuration().equals(duration);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Objects.hash(totalBudget, remainingBudget, duration, dateOfCreation, cycleRange);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 187,
      "Samanthaseahpl": 3,
      "leslieharland": 2
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents a Person\u0027s address in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns true if a given string is a valid email. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 7,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/Block.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents the nearest block to the canteen in FoodieBot. Guarantees: details are present and not null"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class Block {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String[] BLOCKS \u003d new String[]{\"PGPR\", \"UHC\", \"S17\", \"COM1\", \"UTown\"};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"Block name should be from \" + Arrays.toString(BLOCKS);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Block(Name name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** checks if the block matches one of the listed names */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static boolean isValidBlock(String trimmedBlockName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Arrays.stream(BLOCKS)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .anyMatch(trimmedBlockName::equalsIgnoreCase);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 29
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/Canteen.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents a Canteen in FoodieBot. Guarantees: details are present and not null, field"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class Canteen {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String[] CANTEENS \u003d new String[]{\"The Deck\", \"Fine Food\", \"NUS Flavors\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String IMAGE_FOLDER \u003d \"/images/canteen/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Canteen name should be from \" + Arrays.toString(CANTEENS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Canteen.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int numberOfStalls;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int distance;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String blockName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String canteenImageName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String directionImageName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String directionText;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final List\u003cStall\u003e stallsList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Set\u003cTag\u003e cuisines \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Every field must be present and not null. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Canteen("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Name name, int numberOfStalls, int distance, String blockName, String directionImageName,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String directionText, Set\u003cTag\u003e tags, String canteenImageName, List\u003cStall\u003e stallList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireAllNonNull(name, numberOfStalls, tags, stallList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.numberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.distance \u003d distance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.blockName \u003d blockName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.directionImageName \u003d directionImageName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenImageName \u003d canteenImageName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.directionText \u003d directionText;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.stallsList \u003d stallList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.cuisines.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** checks if the canteen matches one of the listed names */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static boolean isValidCanteen(String trimmedCanteenName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Arrays.stream(CANTEENS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .anyMatch(trimmedCanteenName::equalsIgnoreCase);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int getNumberOfStalls() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return numberOfStalls;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public List\u003cStall\u003e getStallsList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return stallsList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int getDistance() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return distance;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getBlockName() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return blockName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getDirectionImageName() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return directionImageName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Image getDirectionImage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String mImageUrl \u003d IMAGE_FOLDER + directionImageName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Image image \u003d new Image(Canteen.class.getResourceAsStream((mImageUrl)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getDirectionsText() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return directionText;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Image getCanteenImage() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String mImageUrl \u003d IMAGE_FOLDER + canteenImageName;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Image image \u003d new Image(Canteen.class.getResourceAsStream((mImageUrl)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getCanteenImageName() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteenImageName;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Collections.unmodifiableSet(cuisines);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * the same. This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isSameCanteen(Canteen otherCanteen) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (otherCanteen \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherCanteen !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 (otherCanteen.getDistance() \u003d\u003d (getDistance())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        || otherCanteen.getNumberOfStalls() \u003d\u003d (getNumberOfStalls()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if both canteens have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * notion of equality between two canteens."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof Canteen)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen otherCanteen \u003d (Canteen) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherCanteen.getName().equals(getName())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getDistance() \u003d\u003d (getDistance())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getNumberOfStalls() \u003d\u003d (getNumberOfStalls())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getBlockName().equals(getBlockName())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getTags().equals(getTags());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Objects.hash(name, distance, numberOfStalls, blockName, cuisines);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" NumberOfStalls: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getNumberOfStalls())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" Distance: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getDistance())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" NearestBlockName: \")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getBlockName())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" DirectionsImageUrl: \")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getDirectionImageName())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" CanteenImageUrl: \")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getCanteenImageName())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" DirectionsText: \")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getDirectionsText())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 172,
      "ignatiusong": 9
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/CanteenStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * FoodieBot does not allow new canteens to be added/ edited yet. This stub is used by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * @code AddCommandParser to recognise only the relevant prefix. Guarantees: details are present and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *     not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class CanteenStub {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int numberOfStalls;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Set\u003cTag\u003e cuisines \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Every field must be present and not null. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenStub(Name name, int numberOfStalls, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.numberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.cuisines.addAll(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Set\u003cTag\u003e getCuisines() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return cuisines;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int getNumberOfStalls() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return numberOfStalls;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Collections.unmodifiableSet(cuisines);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * notion of equality between two persons."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof CanteenStub)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CanteenStub otherCanteen \u003d (CanteenStub) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherCanteen.getName().equals(getName()) \u0026\u0026 otherCanteen.getTags().equals(getTags());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Objects.hash(name, cuisines);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        builder.append(getName()).append(\" Name: \").append(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(\" NumberOfStalls: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getNumberOfStalls()).append(\" Tags: \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 89
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns true if a given string is a valid name. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Tests that a {@code Block}\u0027s {@code Name} matches any of the keywords given. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cCanteen\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean test(Canteen canteen) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .anyMatch("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                keyword -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        canteen.getBlockName(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 keywords.equals(("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                (NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 11,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/Stall.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents a Stall in FoodieBot. Guarantees: details are present and not null, field"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class Stall {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String[] STALLS \u003d new String[]{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \"Duck and Chicken Rice\", \"Five Grains Bee Hoon\", \"Indian Cuisine\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \"Japenese Korean\", \"Mala Hot Pot\", \"Minced Meat Noodle\", \"Mixed Veg Rice\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \"Taiwan Cuisine\", \"Thai Street Food\", \"Western\", \"Wok Fried\", \"Xiao Long Bao\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \"Yong Tau Foo\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String IMAGE_FOLDER \u003d \"/images/canteen/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Stall.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Stall name should be from \" + Arrays.toString(STALLS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String canteenName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int stallNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String stallImageName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String cuisine;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String overallPriceRating;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int favorite;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final List\u003cFood\u003e foodMenu;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Stall("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Name name, String canteenName, int stallNumber, String stallImageName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String cuisine, String overallPriceRating, int favorite, List\u003cFood\u003e foodMenu) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(name, canteenName, stallNumber, stallImageName, cuisine, overallPriceRating, favorite);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d canteenName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallNumber \u003d stallNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallImageName \u003d stallImageName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.overallPriceRating \u003d overallPriceRating;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favorite \u003d favorite;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.foodMenu \u003d foodMenu;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getCanteenName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteenName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int getStallNumber() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return stallNumber;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getStallImageName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return stallImageName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getCuisine() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return cuisine;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getOverallPriceRating() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return overallPriceRating;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Retrieves the images within the folder with the canteen name."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *  e.g. Stall in The Deck with appear in The Deck folder"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Image getStallImage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String mImageUrl \u003d IMAGE_FOLDER + canteenName + \"/\" + stallImageName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Image image \u003d new Image(Stall.class.getResourceAsStream((mImageUrl)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int getFavorite() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favorite;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public List\u003cFood\u003e getFoodMenu() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return foodMenu;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Returns true if the {@code trimmedStallName} is a valid stall name"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static boolean isValidStall(String trimmedStallName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return Arrays.stream(STALLS)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            .anyMatch(trimmedStallName::equalsIgnoreCase);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * the same. This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isSameStall(Stall otherStall) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (otherStall \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherStall !\u003d null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherStall.getName().equals(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 (otherStall.getCanteenName().equals(getCanteenName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            || otherStall.getStallNumber() \u003d\u003d (getStallNumber()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if both stalls have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * notion of equality between two stalls."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof Stall)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Stall otherStall \u003d (Stall) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherStall.getName().equals(getName())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherStall.getCanteenName().equals(getCanteenName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherStall.getStallNumber() \u003d\u003d (getStallNumber())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherStall.getCuisine().equals(getCuisine())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherStall.getOverallPriceRating().equals(getOverallPriceRating());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Objects.hash(name, canteenName, stallNumber, cuisine);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(getName())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(\" CanteenName: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(getCanteenName())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(\" StallNumber: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(getStallNumber())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(\" StallImageName: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(getStallImageName())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(\" Cuisine: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(getCuisine())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(\" OverallPriceRating: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(getOverallPriceRating())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(\" Favorite: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .append(getFavorite());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 142,
      "SHAUNGOH97": 5,
      "ignatiusong": 19
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/UniqueCanteenList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.CanteenNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.DuplicateCanteenException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A list of canteens that enforces uniqueness between its elements and does not allow nulls. A"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * canteen is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * adding and updating of canteens uses Person#isSamePerson(Person) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * that the canteen being added or updated is unique in terms of identity in the UniquePersonList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * However, the removal of a canteen uses Person#equals(Object) so as to ensure that the canteen"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cp\u003eSupports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * @see Canteen#isSameCanteen(Canteen)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class UniqueCanteenList implements Iterable\u003cCanteen\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final ObservableList\u003cCanteen\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final ObservableList\u003cCanteen\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns true if the list contains an equivalent canteen as the given argument. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean contains(Canteen toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCanteen);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Adds a canteen to the list. The canteen must not already exist in the list. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add(Canteen toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new DuplicateCanteenException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Replaces the canteen {@code target} in the list with {@code editedPerson}. {@code target}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * must exist in the list. The canteen identity of {@code editedPerson} must not be the same as"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * another existing canteen in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen(Canteen target, Canteen editedCanteen) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(target, editedCanteen);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new CanteenNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!target.isSameCanteen(editedCanteen) \u0026\u0026 contains(editedCanteen)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new DuplicateCanteenException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        internalList.set(index, editedCanteen);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Removes the equivalent canteen from the list. The canteen must exist in the list. */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove(Canteen toRemove) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new CanteenNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteens(UniqueCanteenList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Replaces the contents of this list with {@code canteens}. {@code canteens} must not contain"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * duplicate canteens."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteens(List\u003cCanteen\u003e canteens) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(canteens);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!canteensAreUnique(canteens)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new DuplicateCanteenException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        internalList.setAll(canteens);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the backing list as an unmodifiable {@code ObservableList}. */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cCanteen\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Iterator\u003cCanteen\u003e iterator() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                || (other instanceof UniqueCanteenList // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCanteenList) other).internalList));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns true if {@code canteens} contains only unique canteens. */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private boolean canteensAreUnique(List\u003cCanteen\u003e canteens) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (int i \u003d 0; i \u003c canteens.size() - 1; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            for (int j \u003d i + 1; j \u003c canteens.size(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (canteens.get(i).isSameCanteen(canteens.get(j))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 126
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/exceptions/CanteenNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Signals that the operation is unable to find the specified person. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class CanteenNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/exceptions/DuplicateCanteenException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class DuplicateCanteenException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public DuplicateCanteenException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 11
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/favorites/FavoriteFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.favorites;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** .*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FavoriteFood extends Food {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param price"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param foodImageName"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param stallNo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param canteen"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param stallName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FavoriteFood(String name, int price, String description, String foodImageName,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            int stallNo, String canteen, String stallName, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(name, price, description, foodImageName, stallNo, canteen, stallName, tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 26
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/food/Food.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents a Food in the address book. Guarantees: details are present and not null, field values"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String[] FOOD \u003d new String[]{\"Combo Set\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String IMAGE_FOLDER \u003d \"/images/canteen/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Food name should be from \" + Arrays.toString(FOOD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final String foodImageName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String canteen;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final String stallName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int stallNo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Every field must be present and not null. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Food("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String name,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            int price,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            String foodImageName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            int stallNo,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String canteen,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            String stallName,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(name, price, description, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallNo \u003d stallNo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foodImageName \u003d foodImageName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.stallName \u003d stallName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int getPrice() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String getCanteen() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteen;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public String getStallName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return stallName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public Image getFoodImage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        String mImageUrl \u003d IMAGE_FOLDER + canteen + \"/\" + stallName + \"/\" + foodImageName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        Image image \u003d new Image(Food.class.getResourceAsStream(\"/images/canteen/Nus Flavors/Western/ComboSet.png\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int getStallNo() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return stallNo;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if both food of the same name have at least one other identity field that is the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * same. This defines a weaker notion of equality between two food."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isSameFood(Food otherCanteen) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (otherCanteen \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherCanteen !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getName().equals(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 (otherCanteen.getPrice() \u003d\u003d (getPrice()))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getTags().equals(getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns true if the {@code trimmedFoodName} is a valid Food name"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static boolean isValidFood(String trimmedFoodName) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return Arrays.stream(FOOD)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                .anyMatch(trimmedFoodName::equalsIgnoreCase);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if both food have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * notion of equality between two food."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Food otherCanteen \u003d (Food) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherCanteen.getName().equals(getName())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getPrice() \u003d\u003d (getPrice())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getTags().equals(getTags());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Objects.hash(name, price, description, tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 128,
      "SHAUNGOH97": 29
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/food/UniqueFoodList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.DuplicateCanteenException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.DuplicateStallException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.StallNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * List of Food Available while ensuring no duplicates"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Adds a food to the list. The food must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new DuplicateStallException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Replaces the canteen {@code target} in the list with {@code editedPerson}. {@code target}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * must exist in the list. The canteen identity of {@code editedPerson} must not be the same as"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * another existing canteen in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new StallNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new DuplicateStallException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedPerson}. {@code target}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * must exist in the list. The food identity of {@code editedPerson} must not be the same as"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * another existing food in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void setFood(List\u003cFood\u003e food) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireAllNonNull(food);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!foodsAreUnique(food)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new DuplicateCanteenException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.setAll(food);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Removes the equivalent food from the list. The food must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new StallNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Replaces the contents of this list with {@code food}. {@code food} must not contain"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * duplicate food."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new DuplicateStallException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Returns true if {@code food} contains only unique foods."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SHAUNGOH97": 7,
      "ignatiusong": 138
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/randomize/Randomize.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "package seedu.foodiebot.model.randomize;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": " * Randomize a canteen, stall and food choice for the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "public class Randomize {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String selectedCanteen \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String selectedStall \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private List\u003cString[]\u003e listOutput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String output \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private JSONArray stallList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Map\u003cString, Object\u003e mapStalls \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Boolean isLessThanFiveOption \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Random rand \u003d new Random();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String prefix;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public Randomize(String prefix, String action) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.listOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method return the output list option."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return String of options."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public String output() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        for (int i \u003d 0; i \u003c listOutput.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            String[] text \u003d listOutput.get(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            output \u003d output + String.format(\"%d. %s: %s\\n\", i + 1, text[0], text[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (isLessThanFiveOption) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            output +\u003d \"There are less than 5 stores in this canteen. This is all the result.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This function select a canteen from the jsonfile (foodiebot.json)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param file which is provided from the RandomizeCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void setCanteens(FileReader file) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONObject obj \u003d (JSONObject) parser.parse(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONArray canteenList \u003d (JSONArray) obj.get(\"canteens\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            int listSize \u003d canteenList.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            String canteenName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            Object numOfStalls;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                JSONObject canteen \u003d (JSONObject) canteenList.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                canteenName \u003d (String) canteen.get(\"name\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                numOfStalls \u003d canteen.get(\"numberOfStalls\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                mapStalls.put(canteenName, numOfStalls);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILEREADER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method produce a list of options by Canteen from jsonfile (foodiebot-stalls.json)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param file which is provided from the RandomizeCommand."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void getOptions(FileReader file) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        int listSize;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONObject obj \u003d (JSONObject) parser.parse(file);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            stallList \u003d (JSONArray) obj.get(\"stalls\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            listSize \u003d stallList.size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            while (listOutput.size() \u003c 5) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                index \u003d rand.nextInt(listSize);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                JSONObject stall \u003d (JSONObject) stallList.get(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                selectedStall \u003d (String) stall.get(\"name\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                selectedCanteen \u003d (String) stall.get(\"canteenName\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                if (isNotInList(selectedCanteen, selectedStall)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    listOutput.add(new String[]{selectedCanteen, selectedStall});"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILEREADER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method produce a list of options from the jsonfile (foodiebot-stalls.json)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param file which is provided from the RandomizeCommand."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void getOptionsByCanteen(FileReader file) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONObject obj \u003d (JSONObject) parser.parse(file);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            stallList \u003d (JSONArray) obj.get(\"stalls\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (prefix.contains(\"c\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                generateListByCanteen(action);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILEREADER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method generate the list od options by the selected canteen."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param canteenName The user input on the selected canteen."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private void generateListByCanteen(String canteenName) throws CommandException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            int canteenSize \u003d ((Number) mapStalls.get(canteenName)).intValue();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (canteenSize \u003e\u003d 5) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                isLessThanFiveOption \u003d false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                addNewStallToOption(canteenSize, canteenName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                isLessThanFiveOption \u003d true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                for (int i \u003d 0; i \u003c canteenSize; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    JSONObject stall \u003d (JSONObject) stallList.get(i);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    selectedCanteen \u003d (String) stall.get(\"canteenName\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    if (selectedCanteen.equals(canteenName)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        selectedStall \u003d (String) stall.get(\"name\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        listOutput.add(new String[]{selectedCanteen, selectedStall});"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CANTEEN_NAME);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method check if the current option already exist in the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param canteen This is the selected canteen"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param stall This is the selected stall"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return Boolean true if option is not on the list, false otherwise"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Boolean isNotInList(String canteen, String stall) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        boolean state \u003d true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        for (int i \u003d 0; i \u003c listOutput.size(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            String[] text \u003d listOutput.get(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (canteen.equals(text[0]) \u0026\u0026 stall.equals(text[1])) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                state \u003d false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method add the option to the list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param canteenSize The size of the inputted canteen."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param canteenName The name of the canteen."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private void addNewStallToOption(int canteenSize, String canteenName) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        while (listOutput.size() \u003c 5) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            int index \u003d rand.nextInt(canteenSize);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONObject stall \u003d (JSONObject) stallList.get(index);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            selectedCanteen \u003d (String) stall.get(\"canteenName\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (selectedCanteen.equals(canteenName)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                selectedStall \u003d (String) stall.get(\"name\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                if (isNotInList(selectedCanteen, selectedStall)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    listOutput.add(new String[]{selectedCanteen, selectedStall});"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 191
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/stall/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.stall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Tests that a {@code Block}\u0027s {@code Name} matches any of the keywords given. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStall\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean test(Stall stall) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .anyMatch("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        stall.getCanteenName().replaceAll(\"\\\\s+\", \"\"), keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 keywords.equals(("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                (NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 33
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/stall/UniqueStallList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.stall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.DuplicateStallException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.StallNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A list of stalls that enforces uniqueness between its elements and does not allow nulls. A"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * canteen is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * adding and updating of stalls uses Person#isSamePerson(Person) for equality so as to ensure"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * that the canteen being added or updated is unique in terms of identity in the UniquePersonList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * However, the removal of a canteen uses Person#equals(Object) so as to ensure that the canteen"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * \u003cp\u003eSupports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * @see Stall#isSameStall(Stall)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class UniqueStallList implements Iterable\u003cStall\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final ObservableList\u003cStall\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final ObservableList\u003cStall\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if the list contains an equivalent canteen as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean contains(Stall toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStall);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Adds a canteen to the list. The canteen must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add(Stall toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new DuplicateStallException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Replaces the canteen {@code target} in the list with {@code editedPerson}. {@code target}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * must exist in the list. The canteen identity of {@code editedPerson} must not be the same as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * another existing canteen in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStall(Stall target, Stall editedStall) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(target, editedStall);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new StallNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!target.isSameStall(editedStall) \u0026\u0026 contains(editedStall)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new DuplicateStallException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        internalList.set(index, editedStall);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Removes the equivalent stall from the list. The stall must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove(Stall toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new StallNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStalls(UniqueStallList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Replaces the contents of this list with {@code stalls}. {@code stalls} must not contain"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * duplicate stalls."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStalls(List\u003cStall\u003e stalls) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(stalls);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!stallsAreUnique(stalls)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new DuplicateStallException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        internalList.setAll(stalls);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cStall\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Iterator\u003cStall\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            || (other instanceof UniqueStallList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueStallList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if {@code stalls} contains only unique stalls."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private boolean stallsAreUnique(List\u003cStall\u003e stalls) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (int i \u003d 0; i \u003c stalls.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            for (int j \u003d i + 1; j \u003c stalls.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (stalls.get(i).isSameStall(stalls.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 138
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/stall/exceptions/DuplicateStallException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.stall.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Signals that the operation will result in duplicate Stalls (Stalls are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class DuplicateStallException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public DuplicateStallException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(\"Operation would result in duplicate stall\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 11
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/stall/exceptions/StallNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.stall.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Signals that the operation is unable to find the specified person. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class StallNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents a Tag in the address book. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns true if a given string is a valid tag name. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Format state as text for viewing. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.favorites.FavoriteFood;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COM1_TO_DECK_DIRECTIONS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"1. From Com1 entrance main entrance (facing car park), turn right\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"2. Walk up the steps \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COM1_TO_NUSFLAVORS_DIRECTIONS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"1. From Com1, take shuttle D2 to Utown\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"2. Follow the path to Stephen Riady Centre \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"3. Walk straight and the canteen appears to your right\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static Canteen[] getSampleCanteens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        ArrayList\u003cStall\u003e deckStalls \u003d new ArrayList\u003cStall\u003e("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Taiwanese\"), \"The Deck\", 1, \"muslim.png\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                        \"$\", 0, new ArrayList\u003c\u003e())));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        ArrayList\u003cStall\u003e flavourStalls \u003d new ArrayList\u003cStall\u003e("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                Arrays.asList ("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Duck and Chicken Rice\"), \"Nus Flavors\", 1, \"DuckandChickenRice.png\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                new Stall(new Name(\"Five Grains Bee Hoon\"), \"Nus Flavors\", 2, \"FiveGrainsBeeHoon.png\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                        new Stall(new Name(\"Indian Cuisine\"), \"Nus Flavors\", 3, \"Indian Cuisine.png\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"Indian\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Japenese and Korean\"), \"Nus Flavors\", 3, \"JapKor.png\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"Fusion\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Mala Hot Pot\"), \"Nus Flavors\", 5, \"MalaHotPot.png\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Minced Meat Noodle\"), \"Nus Flavors\", 6, \"MincedMeatNoodle.png\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Mixed Veg Rice\"), \"Nus Flavors\", 7, \"MixedVegRice.png\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Taiwan Cuisine\"), \"Nus Flavors\", 8, \"TaiwanCuisine.png\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Western\"), \"Nus Flavors\", 9, \"Western.png\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"Western\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Wok Fried\"), \"Nus Flavors\", 10, \"WokFried.png\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Xiao Long Bao\"), \"Nus Flavors\", 11, \"XiaoLongBao.png\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                                \"$\", 0, new ArrayList\u003c\u003e())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new Canteen[]{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new Canteen("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new Name(\"Nus Flavors\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                11,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                3200,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"COM1\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"utown_flavors.png\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                COM1_TO_NUSFLAVORS_DIRECTIONS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                getTagSet(\"asian\", \"western\", \"muslim\"), \"utown.jpg\", new ArrayList\u003c\u003e(flavourStalls)),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Canteen("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                new Name(\"The Deck\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                1000,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"COM1,\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"com1_deck.png\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                COM1_TO_DECK_DIRECTIONS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                getTagSet(\"asian\"), \"deck.jpg\", new ArrayList\u003c\u003e(deckStalls)),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static Stall[] getSampleStalls() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new Stall[]{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new Stall(new Name(\"Taiwanese\"), \"The Deck\", 3, \"muslim.png\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Duck and Chicken Rice\"), \"Nus Flavors\", 3, \"DuckandChickenRice.png\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Five Grains Bee Hoon\"), \"Nus Flavors\", 5, \"FiveGrainsBeeHoon.png\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Indian Cuisine\"), \"Nus Flavors\", 3, \"Indian Cuisine.png\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"Indian\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Japenese and Korean\"), \"Nus Flavors\", 5, \"JapKor.png\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"Fusion\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Mala Hot Pot\"), \"Nus Flavors\", 3, \"MalaHotPot.png\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Minced Meat Noodle\"), \"Nus Flavors\", 5, \"MincedMeatNoodle.png\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Mixed Veg Rice\"), \"Nus Flavors\", 3, \"MixedVegRice.png\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Taiwan Cuisine\"), \"Nus Flavors\", 5, \"TaiwanCuisine.png\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Western\"), \"Nus Flavors\", 3, \"Western.png\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"Western\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Wok Fried\"), \"Nus Flavors\", 5, \"WokFried.png\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            new Stall(new Name(\"Xiao Long Bao\"), \"Nus Flavors\", 3, \"XiaoLongBao.png\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                \"$\", 0, new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        };"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return new Food[] { new Food(\"Combo Set\", 6, \"1 Meat, 1 Pasta, 2 Sides\", \"ComboSet.png\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                        1, \"Nus Flavors\", \"Western\", getTagSet(\"1\"))};"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static FavoriteFood[] getSampleFavoriteFood() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new FavoriteFood[] { new FavoriteFood(\"Combo Set\", 6, \"1 Meat, 1 Pasta, 2 Sides\", \"ComboSet.png\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                1, \"Nus Flavors\", \"Western\", getTagSet(\"1\"))};"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static ReadOnlyFoodieBot getSampleFoodieBot() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot sampleFb \u003d new FoodieBot();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (Canteen sampleCanteen : getSampleCanteens()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            sampleFb.addCanteen(sampleCanteen);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (Stall sampleStall : getSampleStalls()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            sampleFb.addStall(sampleStall);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            sampleFb.addFood(sampleFood);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (FavoriteFood sampleFood: getSampleFavoriteFood()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            sampleFb.addFavoriteFood(sampleFood);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return sampleFb;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 76,
      "Samanthaseahpl": 13,
      "SHAUNGOH97": 76,
      "ignatiusong": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/FoodieBotStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents a storage for {@link FoodieBot}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public interface FoodieBotStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the file path of the data file. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Path getCanteensFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Path getStallsFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Path getFavoritesFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    Path getFoodFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyFoodieBot}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(String modelType) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** @see #getCanteensFilePath() */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(Path filePath, String modelType)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Path getModelFilePath(String modelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodieBot} to the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param foodieBot cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void saveFoodieBot(ReadOnlyFoodieBot foodieBot) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void saveFoodieBot(ReadOnlyFoodieBot foodieBot, String modelType) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ///** @see #saveFoodieBot(ReadOnlyFoodieBot) */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void saveFoodieBot(ReadOnlyFoodieBot foodieBot, Path filePath, String modelType)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 48,
      "lsjxavier": 4,
      "SHAUNGOH97": 2
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedBudget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Jackson-friendly version of {@link Budget}. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final float totalBudget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final float remainingBudget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate dateOfCreation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate cycleRangeStart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate cycleRangeEnd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a {@code JsonAdaptedBudget} with the given person details. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public JsonAdaptedBudget("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"totalBudget\") String totalBudget,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"remainingBudget\") String remainingBudget,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"budgetDuration\") String duration,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"dateOfCreation\") String dateOfCreation,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"cycleRangeStart\") String cycleRangeStart,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"cycleRangeEnd\") String cycleRangeEnd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.totalBudget \u003d Float.parseFloat(totalBudget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d Float.parseFloat(remainingBudget);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateOfCreation \u003d LocalDate.parse(dateOfCreation);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRangeStart \u003d LocalDate.parse(cycleRangeStart);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRangeEnd \u003d LocalDate.parse(cycleRangeEnd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Converts a given {@code Budget} into this class for Jackson use. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        totalBudget \u003d source.getTotalBudget();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        remainingBudget \u003d source.getRemainingBudget();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        duration \u003d source.getDuration();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dateOfCreation \u003d source.getDateOfCreation();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        cycleRangeStart \u003d source.getCycleRange().getStartDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        cycleRangeEnd \u003d source.getCycleRange().getEndDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Converts a given {@code Budget} into this class for Jackson use. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public JsonAdaptedBudget(ReadOnlyFoodieBot foodieBot) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this(foodieBot.getBudget());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Converts this Jackson-friendly adapted person object into the model\u0027s {@code Budget} object. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public FoodieBot toModelType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Do some checks here?"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Budget budget \u003d new Budget(totalBudget, remainingBudget, duration, dateOfCreation,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                cycleRangeStart, cycleRangeEnd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        foodieBot.setBudget(budget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 67
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedCanteen.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Jackson-friendly version of {@link Canteen}. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonAdaptedCanteen {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Canteen\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int numberOfStalls;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String nearestBlockName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int distance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String directionsImageName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String canteenImageName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String directionsText;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonAdaptedCanteen} with the given person details. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonAdaptedCanteen("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"distance\") String distance,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"numberOfStalls\") String numberOfStalls,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"nearestBlockName\") String nearestBlockName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"directionsImageName\") String directionsImageName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"canteenImageName\") String canteenImageName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"directionsText\") String directionsText,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.numberOfStalls \u003d Integer.parseInt(numberOfStalls);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.nearestBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.distance \u003d Integer.parseInt(distance);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.directionsImageName \u003d directionsImageName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenImageName \u003d canteenImageName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.directionsText \u003d directionsText;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Converts a given {@code Canteen} into this class for Jackson use. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonAdaptedCanteen(Canteen source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        numberOfStalls \u003d source.getNumberOfStalls();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        nearestBlockName \u003d source.getBlockName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        distance \u003d source.getDistance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        tagged.addAll("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        directionsImageName \u003d source.getDirectionImageName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteenImageName \u003d source.getCanteenImageName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        directionsText \u003d source.getDirectionsText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Canteen} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Canteen toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final List\u003cTag\u003e canteenTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            canteenTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final int modelNumberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final String modelBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (modelBlockName \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Block\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(canteenTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new Canteen(modelName, modelNumberOfStalls, distance, modelBlockName, directionsImageName,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            directionsText, modelTags, canteenImageName, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 104,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "/** Jackson-friendly version of {@link Food}. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final int price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final String foodImageName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final String canteen;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final String stallName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final int stallNo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /** Constructs a {@code JsonAdaptedFood} with the given person details. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public JsonAdaptedFood("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            @JsonProperty(\"foodImageName\") String foodImageName,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            @JsonProperty(\"stallNo\") String stallNo,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            @JsonProperty(\"canteen\") String canteen,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            @JsonProperty(\"stallName\") String stallName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.price \u003d Integer.parseInt(price);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foodImageName \u003d foodImageName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.stallNo \u003d Integer.parseInt(stallNo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.stallName \u003d stallName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /** Converts a given {@code Food} into this class for Jackson use. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.price \u003d source.getPrice();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.description \u003d source.getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foodImageName \u003d source.getFoodImage().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.stallNo \u003d source.getStallNo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.canteen \u003d source.getCanteen();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.stallName \u003d source.getStallName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        final String modelName \u003d name;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        final String modelStallName \u003d stallName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return new Food(modelName, price, description, foodImageName, stallNo,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "               canteen, modelStallName, getTagSet(\"1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHAUNGOH97": 93
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedStall.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Jackson-friendly version of {@link Stall}. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonAdaptedStall {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Stall\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String canteenName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int stallNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String stallImageName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String cuisine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String overallPriceRating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final int favorite;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonAdaptedStall} with the given person details. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonAdaptedStall("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"canteenName\") String canteenName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"stallNumber\") String stallNumber,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"stallImageName\") String stallImageName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"cuisine\") String cuisine,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"overallPriceRating\") String overallPriceRating,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            @JsonProperty(\"favorite\") String favorite) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallNumber \u003d Integer.parseInt(stallNumber);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d canteenName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallImageName \u003d stallImageName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.overallPriceRating \u003d overallPriceRating;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favorite \u003d Integer.parseInt(favorite);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Converts a given {@code Stall} into this class for Jackson use. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonAdaptedStall(Stall source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stallNumber \u003d source.getStallNumber();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d source.getCanteenName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallImageName \u003d source.getStallImageName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.cuisine \u003d source.getCuisine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.overallPriceRating \u003d source.getOverallPriceRating();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favorite \u003d source.getFavorite();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Stall} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Stall toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final String modelCanteenName \u003d canteenName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new Stall(modelName, modelCanteenName, stallNumber, stallImageName, cuisine,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                overallPriceRating, favorite, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 80,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Jackson-friendly version of {@link Tag}. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTag} with the given {@code tagName}. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Converts a given {@code Tag} into this class for Jackson use. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonFoodieBotStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class JsonFoodieBotStorage implements FoodieBotStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodieBotStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path canteensFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path stallsFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path favoritesFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Path budgetFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private Path foodFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonFoodieBotStorage(Path filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteensFilePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public JsonFoodieBotStorage(Path stallsFilePath, Path budgetFilePath, Path foodFilePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.stallsFilePath \u003d stallsFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.budgetFilePath \u003d budgetFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foodFilePath \u003d foodFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonFoodieBotStorage(Path canteensFilePath, Path stallsFilePath, Path budgetFilePath,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Path foodFilePath, Path favoritesFilePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.canteensFilePath \u003d canteensFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.stallsFilePath \u003d stallsFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.budgetFilePath \u003d budgetFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foodFilePath \u003d foodFilePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favoritesFilePath \u003d favoritesFilePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getCanteensFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteensFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getStallsFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return stallsFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public Path getFoodFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return foodFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFavoritesFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favoritesFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(String modelType) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return readFoodieBot(getModelFilePath(modelType), modelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Similar to {@link #readFoodieBot(String modelType)}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(Path filePath, String modelType) throws DataConversionException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"Canteen\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Optional\u003cJsonSerializableFoodieBot\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                JsonSerializableFoodieBot.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (jsonAddressBook.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"FavoriteFood\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Optional\u003cJsonSerializableFavorites\u003e json1 \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    JsonSerializableFavorites.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (json1.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return Optional.of(json1.get().toModelType());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"Stall\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Optional\u003cJsonSerializableStall\u003e json2 \u003d JsonUtil.readJsonFile(filePath, JsonSerializableStall.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (json2.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return Optional.of(json2.get().toModelType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case \"Budget\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Optional\u003cJsonAdaptedBudget\u003ejsonAdaptedBudget \u003d JsonUtil.readJsonFile(filePath, JsonAdaptedBudget.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (jsonAdaptedBudget.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.of(jsonAdaptedBudget.get().toModelType());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        case \"Food\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            Optional\u003cJsonSerializableFood\u003e json3 \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    JsonSerializableFood.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (json3.isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                return Optional.of(json3.get().toModelType());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getModelFilePath(String modelType) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Path path \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"Canteen\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new UserPrefs().getFoodieBotFilePath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"Stall\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new UserPrefs().getStallsFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case \"Budget\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new UserPrefs().getBudgetFilePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        case \"Food\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return new UserPrefs().getFoodFilePath();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"FavoriteFood\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new UserPrefs().getFavoriteFoodFilePath();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodieBot} to the storage."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param foodieBot cannot be null."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        saveFoodieBot(foodieBot, \"Canteen\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Save foodiebot according to the model supplied."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot, String modelType) throws IOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        saveFoodieBot(foodieBot, getModelFilePath(modelType), modelType);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Similar to {@link #saveFoodieBot(ReadOnlyFoodieBot)}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * TIP: When adding a new entity, a new {@link JsonSerialiablexxx} needs to be created"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * and filePath has to be specified in {@link JsonFoodieBotStorage}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveFoodieBot("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ReadOnlyFoodieBot foodieBot, Path filePath,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String modelType) throws IOException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"Canteen\":"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFoodieBot(foodieBot), filePath);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"Stall\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableStall(foodieBot), filePath);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case \"Budget\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonAdaptedBudget(foodieBot), filePath);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        case \"Food\":"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFood(foodieBot), filePath);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"FavoriteFood\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFavorites(foodieBot), filePath);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFoodieBot(foodieBot), filePath);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 142,
      "lsjxavier": 15,
      "SHAUNGOH97": 33,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonSerializableFavorites.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** An Immutable AddressBook that is serializable to JSON format. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@JsonRootName(value \u003d \"favoriteList\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableFavorites {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FAVORITE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Food list contains duplicate favorites(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e favoriteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonSerializableAddressBook} with the given stalls. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonSerializableFavorites(@JsonProperty(\"favoriteList\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favoriteList.addAll(foods);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonSerializableFavorites(ReadOnlyFoodieBot source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoriteList.addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                source.getFavoriteList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : favoriteList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (foodieBot.hasFood(food)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FAVORITE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            foodieBot.addFood(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 61
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonSerializableFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** An Immutable FoodieBot that is serializable to JSON format. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "@JsonRootName(value \u003d \"foods\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "class JsonSerializableFood {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonSerializableFoodieBot} with the given stalls. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public JsonSerializableFood(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts a given {@code ReadOnlyFoodieBot} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     JsonSerializableFoodieBot}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public JsonSerializableFood(ReadOnlyFoodieBot source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        foods.addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                source.getFoodList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                        .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts this address book into the model\u0027s {@code FoodieBot} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public FoodieBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            if (foodieBot.hasFood(food)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            foodieBot.addFood(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "SHAUNGOH97": 56
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonSerializableFoodieBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** An Immutable AddressBook that is serializable to JSON format. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@JsonRootName(value \u003d \"canteens\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableFoodieBot {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CANTEEN \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Canteens list contains duplicate canteen(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final List\u003cJsonAdaptedCanteen\u003e canteens \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final List\u003cJsonAdaptedCanteen\u003e stalls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonSerializableAddressBook} with the given canteens. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonSerializableFoodieBot(@JsonProperty(\"canteens\") List\u003cJsonAdaptedCanteen\u003e canteens) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteens.addAll(canteens);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonSerializableFoodieBot(ReadOnlyFoodieBot source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteens.addAll("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                source.getCanteenList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .map(JsonAdaptedCanteen::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (JsonAdaptedCanteen jsonAdaptedCanteen : canteens) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Canteen canteen \u003d jsonAdaptedCanteen.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (foodieBot.hasCanteen(canteen)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CANTEEN);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            foodieBot.addCanteen(canteen);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 62
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonSerializableStall.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** An Immutable AddressBook that is serializable to JSON format. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@JsonRootName(value \u003d \"stalls\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableStall {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STALL \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Stall list contains duplicate stalls(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final List\u003cJsonAdaptedStall\u003e stalls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonSerializableAddressBook} with the given stalls. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonSerializableStall(@JsonProperty(\"stalls\") List\u003cJsonAdaptedStall\u003e stalls) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stalls.addAll(stalls);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonSerializableStall(ReadOnlyFoodieBot source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stalls.addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                source.getStallList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .map(JsonAdaptedStall::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (JsonAdaptedStall jsonAdaptedStall : stalls) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Stall stall \u003d jsonAdaptedStall.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (foodieBot.hasStall(stall)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STALL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            foodieBot.addStall(stall);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 61
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** A class to access UserPrefs stored in the hard disk as a json file */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 7,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** API of the Storage component */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public interface Storage extends FoodieBotStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    //Path getFoodieBotFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void saveFoodieBot(ReadOnlyFoodieBot addressBook) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 24,
      "SHAUNGOH97": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Manages storage of AddressBook data in local storage. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FoodieBotStorage foodieBotStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StorageManager(FoodieBotStorage foodieBotStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.foodieBotStorage \u003d foodieBotStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StorageManager(FoodieBotStorage foodieBotStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.foodieBotStorage \u003d foodieBotStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    //public Path getFoodieBotFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //    TODO Not Implemented"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    //    return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getCanteensFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBotStorage.getCanteensFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getStallsFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBotStorage.getStallsFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFavoritesFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBotStorage.getFavoritesFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public Path getFoodFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return foodieBotStorage.getFoodFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(String modelType) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // return readFoodieBot(foodieBotStorage.getCanteensFilePath(), modelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return readFoodieBot(foodieBotStorage.getModelFilePath(modelType), modelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(Path filePath, String modelType)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBotStorage.readFoodieBot(modelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Path getModelFilePath(String modelType) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return foodieBotStorage.getModelFilePath(modelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBotStorage.saveFoodieBot(foodieBot, foodieBotStorage.getCanteensFilePath(), \"Canteen\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot, String modelType) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBotStorage.saveFoodieBot(foodieBot, modelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot, Path filePath, String modelType) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBotStorage.saveFoodieBot(foodieBot, filePath, modelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 97,
      "lsjxavier": 7,
      "SHAUNGOH97": 10
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Represents a storage for {@link seedu.foodiebot.model.UserPrefs}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the file path of the UserPrefs data file. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Saves the given {@link seedu.foodiebot.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 11,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/CanteenCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** An UI component that displays information of a {@code Canteen}. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class CanteenCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String FXML \u003d \"CanteenListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public final Canteen canteen;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private ImageView iv;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label numberOfStalls;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label distance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label distanceText;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label nearestBlockName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private FlowPane tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenCard(Canteen canteen, int displayedIndex, boolean showDistanceField) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        iv.setImage(canteen.getCanteenImage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        name.setText(canteen.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        nearestBlockName.setText(canteen.getBlockName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        numberOfStalls.setText(String.valueOf(canteen.getNumberOfStalls()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        distance.setText(String.valueOf(canteen.getDistance()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        distance.setVisible(showDistanceField);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        distanceText.setVisible(showDistanceField);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        nearestBlockName.setVisible(showDistanceField);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteen.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof CanteenCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CanteenCard card \u003d (CanteenCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 canteen.equals(card.canteen);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 70
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/CanteenListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Panel containing the list of canteens. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class CanteenListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String FXML \u003d \"SimpleListViewPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CanteenListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private ListView\u003cCanteen\u003e simpleListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenListPanel(ObservableList\u003cCanteen\u003e canteenList, boolean showDistanceField) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        simpleListView.setItems(canteenList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        simpleListView.setCellFactory(listView -\u003e new CanteenListViewCell(showDistanceField));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Canteen} using a {@code"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * CanteenCard}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    class CanteenListViewCell extends ListCell\u003cCanteen\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private final boolean showDistanceField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        protected CanteenListViewCell(boolean showDistanceField) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.showDistanceField \u003d showDistanceField;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        protected void updateItem(Canteen canteen, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            super.updateItem(canteen, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (empty || canteen \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                setGraphic(new CanteenCard(canteen, getIndex() + 1, showDistanceField).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 47
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** The UI component that is responsible for receiving user command inputs. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandTextField"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .textProperty()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Handles the Enter button pressed event. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Sets the command box style to use the default style. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Sets the command box style to indicate a failed command. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Represents a function that can execute commands. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * @see seedu.foodiebot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 14,
      "Samanthaseahpl": 5,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/DirectionsToCanteenPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** An UI component that displays information of a {@code Canteen}. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class DirectionsToCanteenPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DirectionsToCanteenPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String FXML \u003d \"DirectionsToCanteenCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Canteen canteen;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private HBox id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private ImageView iv;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label textArea;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private FlowPane tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public DirectionsToCanteenPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void fillView(Canteen canteen) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        iv.setImage(canteen.getDirectionImage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        textArea.setText(canteen.getDirectionsText());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof DirectionsToCanteenPanel)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DirectionsToCanteenPanel card \u003d (DirectionsToCanteenPanel) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return id.equals(card.id) \u0026\u0026 canteen.equals(card.canteen);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 63
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/FoodCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private ImageView iv;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private Label stallName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    //private Label cuisine;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        iv.setImage(food.getFoodImage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        name.setText(food.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        price.setText(\"$\" + food.getPrice());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        stallName.setText(food.getStallName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        description.setText(food.getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHAUNGOH97": 71
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/FoodListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": " * Panel containing the list of foods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private static final String FXML \u003d \"SimpleListViewPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private ListView\u003cFood\u003e simpleListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        simpleListView.setItems(foodList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        simpleListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * FoodCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHAUNGOH97": 47
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Controller for a help page */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103T-F11-3/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Button copyButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label helpMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a new HelpWindow. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cul\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *       \u003cli\u003eif this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *       \u003cli\u003eif this method is called during animation or layout processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *       \u003cli\u003eif this method is called on the primary stage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *       \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/ul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns true if the help window is currently being shown. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Hides the help window. */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Focuses on the help window. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Copies the URL to the user guide to the clipboard. */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 17,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.DirectionsCommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CanteenListPanel canteenListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DirectionsToCanteenPanel directionsToCanteenPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private boolean isStallInitialised;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    private boolean isFoodInitialised;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        isStallInitialised \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        getRoot()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .addEventFilter("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                KeyEvent.KEY_PRESSED,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    if (event.getTarget() instanceof TextInputControl"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                        event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteenListPanel \u003d new CanteenListPanel(logic.getFilteredCanteenList(), false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().add(canteenListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFoodieBotFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the directionsToCanteen region."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleGoToCanteen() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        directionsToCanteenPanel \u003d new DirectionsToCanteenPanel();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().add(directionsToCanteenPanel.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the canteenListPanel region."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListCanteens(boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().add(new CanteenListPanel("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            isLocationSpecified"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                ? logic.getFilteredCanteenListSortedByDistance()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                : logic.getFilteredCanteenList(), isLocationSpecified).getRoot());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the stallListPanel region."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListStalls() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().add(new StallsListPanel(logic.getFilteredStallList(isStallInitialised))"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        isStallInitialised \u003d true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     * Fills the foodListPanel region."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    public void handleListFood() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        listPanelPlaceholder.getChildren().add(new FoodListPanel(logic.getFilteredFoodList(isFoodInitialised))"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                .getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        isFoodInitialised \u003d true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the foodListPanel region."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListFavorites() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().add(new FoodListPanel(logic.getFilteredFavoriteFoodList(false))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .getRoot());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        GuiSettings guiSettings \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new GuiSettings("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                primaryStage.getWidth(),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                primaryStage.getHeight(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                (int) primaryStage.getY());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenListPanel getCanteenListPanel() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteenListPanel;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see seedu.foodiebot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (commandResult instanceof DirectionsCommandResult) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                handleGoToCanteen();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                directionsToCanteenPanel.fillView(((DirectionsCommandResult) commandResult).canteen);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            switch (commandResult.commandName) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                if (ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListCanteens(commandResult.isLocationSpecified());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    resultDisplay.setFeedbackToUser(ParserContext.INVALID_CONTEXT_MESSAGE);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            case EnterCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                if (ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListStalls();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                } else if (ParserContext.getCurrentContext().equals(ParserContext.CANTEEN_CONTEXT)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    handleListFood();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            case FavoritesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                handleListFavorites();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                if (ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    handleListCanteens(commandResult.isLocationSpecified());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                } else if (ParserContext.getCurrentContext().equals(ParserContext.CANTEEN_CONTEXT)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    handleListStalls();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                } else if (ParserContext.getCurrentContext().equals(ParserContext.STALL_CONTEXT)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    handleListFood();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 125,
      "Samanthaseahpl": 3,
      "SHAUNGOH97": 25,
      "-": 148,
      "ignatiusong": 8
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** A ui for the status bar that is displayed at the header of the application. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private TextArea resultDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/StallCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * An UI component that displays information of a {@code Stall}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class StallCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String FXML \u003d \"StallListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public final Stall stall;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ImageView iv;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Label stallNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Label cuisine;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Label overallPriceRating;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallCard(Stall stall, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stall \u003d stall;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        iv.setImage(stall.getStallImage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        name.setText(stall.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stallNumber.setText(String.valueOf(stall.getStallNumber()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        cuisine.setText(stall.getCuisine());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        overallPriceRating.setText(stall.getOverallPriceRating());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof StallCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StallCard card \u003d (StallCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 stall.equals(card.stall);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 69
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/StallsListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Panel containing the list of stalls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class StallsListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String FXML \u003d \"SimpleListViewPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StallsListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ListView\u003cStall\u003e simpleListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallsListPanel(ObservableList\u003cStall\u003e stallList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        simpleListView.setItems(stallList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        simpleListView.setCellFactory(listView -\u003e new StallListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Stall} using a {@code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * CanteenCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    class StallListViewCell extends ListCell\u003cStall\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        protected void updateItem(Stall stall, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            super.updateItem(stall, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (empty || stall \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                setGraphic(new StallCard(stall, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 47
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** A ui for the status bar that is displayed at the footer of the application. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label saveLocationStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** API of UI component */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Starts the UI (and the App). */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** The manager of the UI component. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the application icon."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void showAlertDialogAndWait("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * after the user has closed the alert dialog."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static void showAlertDialogAndWait("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Stage owner, AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 14,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the root object of the scene graph of this UiPart. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 14,
      "-": 75
    }
  },
  {
    "path": "src/main/resources/view/CanteenListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "   \u003cImageView fx:id\u003d\"iv\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003cLabel fx:id\u003d\"distance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$distance\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003cLabel fx:id\u003d\"distanceText\" styleClass\u003d\"cell_small_label\" text\u003d\"m from\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cLabel fx:id\u003d\"nearestBlockName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nearestBlockName\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "               \u003cLabel text\u003d\"Food Stalls: \" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cLabel fx:id\u003d\"numberOfStalls\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$numberOfStalls\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 53
    }
  },
  {
    "path": "src/main/resources/view/DirectionsToCanteenCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cHBox id\u003d\"id\" fx:id\u003d\"id\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" nodeOrientation\u003d\"LEFT_TO_RIGHT\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cImageView fx:id\u003d\"iv\"  fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cLabel fx:id\u003d\"textArea\" prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"label-bright\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 17
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    \u003cImageView fx:id\u003d\"iv\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003cLabel fx:id\u003d\"stallName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$stallName\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    \u003cLabel text\u003d\"Description: \" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SHAUNGOH97": 48
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         title\u003d\"FoodieBot\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cVBox fx:id\u003d\"canteenList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/SimpleListViewPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "  \u003cListView fx:id\u003d\"simpleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StallListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "   \u003cImageView fx:id\u003d\"iv\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cLabel text\u003d\"Stall Number :\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cLabel fx:id\u003d\"stallNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$stallNumber\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cLabel fx:id\u003d\"cuisine\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cuisine\" visible\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "               \u003cLabel text\u003d\"Price Rating: \" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cLabel fx:id\u003d\"overallPriceRating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$overallPriceRating\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 53
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String defaultConfigAsString \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Current log level : INFO\\n\" + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            IllegalArgumentException.class, ("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // number"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // number"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // first"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void verifyVersionParsedCorrectly("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String versionString, int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 15,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/date/DateFormatterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DateFormatterTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void formatDates() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with valid pattern \u0027-\u0027 -\u003e equals"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2019, 6, 15), formatValidDate(\"15-6-2019\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with valid pattern \u0027.\u0027 -\u003e equals"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2008, 1, 23), formatValidDate(\"23.1.2008\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with valid pattern \u0027/\u0027 -\u003e equals"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(1884, 2, 6), formatValidDate(\"6/2/1884\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with invalid pattern -\u003e throw"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"13,5,2000\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with valid 2-digit date (representing 2020), compare with 4-digit version -\u003e equals"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2020, 5, 19), formatValidDate(\"19/5/20\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with 4-digit date (in m/d/y), compare with 4-digit version (d/m/y) -\u003e not equals"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertNotEquals(LocalDate.of(2020, 3, 4), formatValidDate(\"3/4/2020\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format invalid date (31/6/2020) -\u003e throws"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"31/6/2020\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format invalid date (29/2/2019) -\u003e throws"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"29/2/2019\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format invalid date (44/22/2020) -\u003e throws"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"44/22/2020\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format invalid date (some string) -\u003e throws"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"string\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void formatMonths() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"jan\" -\u003e equals"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(Month.JANUARY.getValue(), formatValidMonth(\"jan\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"may\" -\u003e equals"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(Month.MAY.getValue(), formatValidMonth(\"May\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"september\" -\u003e equals"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(Month.SEPTEMBER.getValue(), formatValidMonth(\"september\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"test\" -\u003e throws"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidMonth(\"test\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"maybe\" -\u003e throws"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidMonth(\"maybe\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"junit\" -\u003e throws"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidMonth(\"junit\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Format a valid date. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static LocalDate formatValidDate(String string) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateFormatter.formatDate(string);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Attempt to format an invalid date. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static LocalDate formatInvalidDate(String string) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateFormatter.formatDate(string);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Format a valid month. */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static int formatValidMonth(String string) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateFormatter.formatMonth(string);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Attempt to format an invalid month. */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static int formatInvalidMonth(String string) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateFormatter.formatMonth(string);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 101
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/date/DateRangeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_END_TODAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_LONG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_MONTH_MAY_2020;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_SHORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_START_IN_DISTANT_FUTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_YEAR_2020;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DateRangeTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void testDateRange() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check simple creation of DateRange"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_SHORT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRange(LocalDate.of(2020, 5, 3),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2020, 7, 9)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // invalid DateRange with default DateRangeStyle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e createInvalidDateRange("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2020, 12, 31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2019, 1, 1)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check conversion of invalid DateRange to valid DateRange"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_SHORT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRangeWithStyle(LocalDate.of(2020, 7, 9),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        LocalDate.of(2020, 5, 3), DateRangeStyle.LENIENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check simple creation of DateRange"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_START_IN_DISTANT_FUTURE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRange(LocalDate.of(2150, 1, 1),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        LocalDate.of(2150, 3, 3)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // invalid DateRange with strict DateRangeStyle, if start date is after system date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e createInvalidDateRangeWithStyle("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2150, 1, 1),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2150, 3, 3), DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check strict DateRangeStyle truncating range to current system date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_END_TODAY,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRangeWithStyle("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        LocalDate.of(1999, 12, 31),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        LocalDate.of(2150, 12, 31),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check creation of year"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_YEAR_2020, createValidDateRangeYear(2020));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check creation of month"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_MONTH_MAY_2020, createValidDateRangeMonthYear(5, 2020));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check creation of month"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2020, 2, 29),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRangeMonthYear(2, 2020).getEndDate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check creation of month"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2019, 2, 28),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRangeMonthYear(2, 2019).getEndDate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void rangeContainsDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // system date falls within DateRange -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(DATE_RANGE_LONG.contains(LocalDate.now()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // system date falls within DateRange starting from distant future -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertFalse(DATE_RANGE_START_IN_DISTANT_FUTURE.contains(LocalDate.now()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // system date falls on the end date of a DateRange -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(DATE_RANGE_END_TODAY.contains(LocalDate.now()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // a date falls on the start date of a DateRange -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(DATE_RANGE_YEAR_2020.contains(LocalDate.of(2020, 1, 1)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range with specified style. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeWithStyle(LocalDate start, LocalDate end, DateRangeStyle style) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.of(start, end, style);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range with default style. */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRange(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return createValidDateRangeWithStyle(start, end, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Attempt to create an invalid date range with specified style. */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createInvalidDateRangeWithStyle(LocalDate start, LocalDate end, DateRangeStyle style)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(start, end, style);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Attempt to create an invalid date range with default style. */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createInvalidDateRange(LocalDate start, LocalDate end) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return createInvalidDateRangeWithStyle(start, end, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range of month in year with specified style. */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeMonthYearWithStyle(int month, int year, DateRangeStyle style) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.ofMonth(month, year, style);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range of month in year with default style. */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeMonthYear(int month, int year) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return createValidDateRangeMonthYearWithStyle(month, year, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range of month in year with specified style. */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeYearWithStyle(int year, DateRangeStyle style) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.ofYear(year, style);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range of month in year with default style. */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeYear(int year) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return createValidDateRangeYearWithStyle(year, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 143
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            IllegalArgumentException.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            errorMessage, ("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * NullPointerException} if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * NullPointerException} if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 7,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            JsonUtil.deserializeObjectFromJsonFile("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            serializableTestClass.getListOfLocalDateTimes(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            serializableTestClass.getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 53
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            IllegalArgumentException.class,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Word parameter cannot be empty\", ("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            IllegalArgumentException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Word parameter should be a single word\", ("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 38,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonFoodieBotStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new JsonFoodieBotStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         JsonFoodieBotStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                 new JsonFoodieBotIoExceptionThrowingStub("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                         temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                 new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         // Execute add command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_DECK;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         Canteen expectedCanteen \u003d new CanteenBuilder(DECK).withTags().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         expectedModel.addCanteen(expectedCanteen);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e logic.getFilteredCanteenList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String inputCommand,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String inputCommand,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static class JsonFoodieBotIoExceptionThrowingStub extends JsonFoodieBotStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private JsonFoodieBotIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void saveFoodieBot(ReadOnlyFoodieBot addressBook, Path filePath, String modelType)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 169,
      "Samanthaseahpl": 1
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen validCanteen \u003d new CanteenBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.addCanteen(validCanteen);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new AddCommand(validCanteen),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validCanteen),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen personInList \u003d model.getFoodieBot().getCanteenList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 46
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ModelStubAcceptingCanteenAdded modelStub \u003d new ModelStubAcceptingCanteenAdded();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen validCanteen \u003d new CanteenBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validCanteen).execute(modelStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validCanteen),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(Arrays.asList(validCanteen), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_duplicateCanteen_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen validCanteen \u003d new CanteenBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validCanteen);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCanteen(validCanteen);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen alice \u003d new CanteenBuilder().withName(\"Deck\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen bob \u003d new CanteenBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void addCanteen(Canteen person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ReadOnlyFoodieBot getFoodieBot() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setFoodieBot(ReadOnlyFoodieBot newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean hasCanteen(Canteen person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void deleteCanteen(Canteen target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setCanteen(Canteen target, Canteen editedCanteen) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cCanteen\u003e getFilteredCanteenList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * Returns an unmodifiable view of the filtered canteen list sorted by distance"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setLocationSpecified(boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void updateFilteredCanteenList(Predicate\u003cCanteen\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cStall\u003e getFilteredStallList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public Optional\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        public FileReader listOfCanteens() throws FileNotFoundException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        public FileReader listOfStalls() throws FileNotFoundException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * Updates the filter of the filtered stall list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * @param predicate"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void updateFilteredStallList(Predicate\u003cStall\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setFavorite(Food food) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFavoriteFoodList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void updateFilteredFavoriteList(Predicate\u003cFood\u003e predicateShowAll) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            throw new AssertionError(\"This method is a placeholder\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private class ModelStubWithCanteen extends ModelStub {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private final Canteen person;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ModelStubWithCanteen(Canteen person) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean hasCanteen(Canteen person) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return this.person.isSameCanteen(person);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private class ModelStubAcceptingCanteenAdded extends ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final ArrayList\u003cCanteen\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean hasCanteen(Canteen person) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSameCanteen);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void addCanteen(Canteen person) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ReadOnlyFoodieBot getFoodieBot() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new FoodieBot();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 106,
      "Samanthaseahpl": 12,
      "lsjxavier": 12,
      "SHAUNGOH97": 6,
      "-": 142,
      "ignatiusong": 9
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/BudgetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.BudgetCommand.MESSAGE_VIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class BudgetCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate startDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate endDate \u003d LocalDate.of(2020, 2, 20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DateRange dr \u003d DateRange.of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (startDate, endDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Budget budget \u003d new Budget(15, 10, \"daily\", LocalDate.now(), dr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private BudgetCommand budgetView \u003d new BudgetCommand(\"view\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private BudgetCommand budgetSet \u003d new BudgetCommand(budget, \"set\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    BudgetCommandTest() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void systemDateIsInCycleRange() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert !budget.getCycleRange().equals(BudgetCommand.systemDateIsInCycleRange(budget));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void saveBudget() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        BudgetCommand.saveBudget(expectedModel, budget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Budget b \u003d BudgetCommand.loadBudget(expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assert b.getTotalBudget() \u003d\u003d budget.getTotalBudget();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void loadBudget_modelIsNotPresent() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assert BudgetCommand.loadBudget(model).getTotalBudget() \u003d\u003d Float.MAX_VALUE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void commandSetSuccess() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(budgetSet, BudgetCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(BudgetCommand.MESSAGE_SET, budget.getDurationAsString(), budget.getTotalBudget(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        budget.getRemainingBudget()), expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void commandViewSuccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String display \u003d String.format(MESSAGE_VIEW,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                budget.getDurationAsString(), budget.getTotalBudget(), budget.getRemainingBudget(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                budget.getRemainingDailyBudget(), budget.getDurationAsString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* assertCommandSuccess(budgetView, BudgetCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                display , expectedModel); */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 71
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ClearCommand command \u003d new ClearCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "             command , ClearCommand.COMMAND_WORD, model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.setFoodieBot(new FoodieBot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ClearCommand command \u003d new ClearCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            command , ClearCommand.COMMAND_WORD, model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 35
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String command \u003d \"somecommand\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CommandResult commandResult \u003d new CommandResult(command, \"feedback\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(command, \"feedback\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(command, \"feedback\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(command, \"feedback\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            false, false)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(command, \"different\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(command, \"feedback\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            true, false)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(command, \"feedback\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            false, true)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(command, \"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(command, \"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(command, \"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            commandResult.hashCode(), new CommandResult(command, \"feedback\", true, false)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            commandResult.hashCode(), new CommandResult(command, \"feedback\", false, true)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void isShowHelp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.isExit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void isLocationSpecified() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.isLocationSpecified());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 37,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.EditCanteenDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String VALID_NAME_DECK \u003d \"The Deck\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String VALID_NAME_NUSFLAVORS \u003d \"NUS flavors\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String VALID_TAG_ASIAN \u003d \"asian\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String VALID_TAG_INDIAN \u003d \"indian\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String NAME_DESC_DECK \u003d \" \" + PREFIX_NAME + VALID_NAME_DECK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String NAME_DESC_NUSFLAVORS \u003d \" \" + PREFIX_NAME + VALID_NAME_NUSFLAVORS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String TAG_DESC_ASIAN \u003d \" \" + PREFIX_TAG + VALID_TAG_ASIAN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String TAG_DESC_INDIAN \u003d \" \" + PREFIX_TAG + VALID_TAG_INDIAN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \" \" + PREFIX_NAME + \"Pizza\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final EditCommand.EditCanteenDescriptor DESC_DECK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final EditCommand.EditCanteenDescriptor DESC_NUSFLAVORS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DESC_DECK \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .withName(VALID_NAME_DECK)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .withTags(VALID_TAG_ASIAN)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DESC_NUSFLAVORS \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .withName(VALID_NAME_NUSFLAVORS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .withTags(VALID_TAG_ASIAN)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Command command,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model actualModel,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (CommandException | IOException ce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Command command, String commandName, Model actualModel, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(commandName, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * unchanged"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void assertCommandFailure("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot expectedFoodieBot \u003d new FoodieBot(actualModel.getFoodieBot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cCanteen\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCanteenList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedFoodieBot, actualModel.getFoodieBot());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCanteenList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the canteen at the given {@code"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /* public static void showCanteenAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCanteenList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d model.getFilteredCanteenList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final String[] splitName \u003d canteen.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.updateFilteredCanteenList("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(1, model.getFilteredCanteenList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 122,
      "Samanthaseahpl": 2
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen personToDelete \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.getFilteredCanteenList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.deleteCanteen(personToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(deleteCommand, DeleteCommand.COMMAND_WORD, model, expectedMessage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCanteenList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(deleteCommand, model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showCanteenAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteenToDelete \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.getFilteredCanteenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, canteenToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.deleteCanteen(canteenToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showCanteenAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFoodieBot().getCanteenList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.updateFilteredCanteenList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(model.getFilteredCanteenList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 40,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/EditCanteenDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.DESC_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.DESC_NUSFLAVORS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_NAME_NUSFLAVORS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_TAG_ASIAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.EditCanteenDescriptorBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class EditCanteenDescriptorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand.EditCanteenDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new EditCommand.EditCanteenDescriptor(DESC_DECK);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertTrue(DESC_DECK.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(DESC_DECK.equals(DESC_DECK));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(DESC_DECK.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(DESC_DECK.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(DESC_DECK.equals(DESC_NUSFLAVORS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand.EditCanteenDescriptor editCanteen \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new EditCanteenDescriptorBuilder(DESC_DECK).withName(VALID_NAME_NUSFLAVORS).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(DESC_DECK.equals(editCanteen));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        editCanteen \u003d new EditCanteenDescriptorBuilder(DESC_DECK).withTags(VALID_TAG_ASIAN).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertFalse(DESC_DECK.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 44
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * tests for EditCommand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen editedCanteen \u003d new CanteenBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand.EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder(editedCanteen).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCanteen);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new ModelManager(new FoodieBot(model.getFoodieBot()), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedCanteen);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CanteenBuilder personInList \u003d new CanteenBuilder(lastPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Person editedPerson \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                personInList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new ModelManager(new FoodieBot(model.getFoodieBot()), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditCanteenDescriptor());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new ModelManager(new FoodieBot(model.getFoodieBot()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Person personInFilteredList \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Person editedPerson \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new CanteenBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        new EditCanteenDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new ModelManager(new FoodieBot(model.getFoodieBot()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand.EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Person personInList \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model.getFoodieBot().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        INDEX_FIRST_PERSON, new EditCanteenDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but smaller than size of"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * address book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFoodieBot().getPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        new EditCanteenDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor copyDescriptor \u003d new EditCanteenDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 182
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/EnterCanteenCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class EnterCanteenCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String invalidCanteenName \u003d \"My House\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String validCanteenName \u003d \"The Deck\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*assertCommandSuccess(new EnterCanteenCommand(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                EnterCanteenCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                EnterCanteenCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*assertCommandSuccess(new EnterCanteenCommand(validCanteenName),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                EnterCanteenCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                EnterCanteenCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 37
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/EnterStallCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class EnterStallCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new EnterStallCommand(\"The Deck\"), EnterStallCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"\", expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 29
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new CommandResult(COMMAND_WORD, MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 22
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/FavoritesCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FavoritesCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_viewFavorite_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new FavoritesCommand(), FavoritesCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                FavoritesCommand.MESSAGE_VIEW_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 30
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_ITEMS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.updateFilteredCanteenList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(command, FindCommand.COMMAND_WORD, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCanteenList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.updateFilteredCanteenList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(Arrays.asList(DECK), model.getFilteredCanteenList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 19,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/GoToCanteenCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.GoToCanteenCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class GoToCanteenCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String nearestBlockName \u003d \"COM1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String canteenName \u003d \"The Deck\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private List\u003cCanteen\u003e canteens \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ModelManager expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model.getFilteredCanteenList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new GoToCanteenCommand(Index.fromOneBased(1), nearestBlockName),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                GoToCanteenCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model, MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_indexIsPresent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* Optional\u003cCanteen\u003e result \u003d canteens.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .filter(c -\u003e c.getBlockName().equalsIgnoreCase(nearestBlockName)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 c.getName().equals(canteenName))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new GoToCanteenCommand(index, nearestBlockName), GoToCanteenCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model, expectedMessage,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_canteenNameIsPresent() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new GoToCanteenCommand(canteenName, nearestBlockName), GoToCanteenCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model, expectedMessage,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_noValuesPresent() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(new GoToCanteenCommand(\"\", \"\"), model,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Messages.MESSAGE_NOTAVAILABLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 75
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(COMMAND_WORD, SHOWING_HELP_MESSAGE, true,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 8,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(command, ListCommand.COMMAND_WORD, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ListCommand(), ListCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_nearestBlockIsNotBlank() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ListCommand command \u003d new ListCommand(\"COM1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(command, ListCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                ListCommand.MESSAGE_NEAREST_BLOCK, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 48
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/ReportCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReportCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate startDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate endDate \u003d LocalDate.of(2020, 2, 20);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DateRange dr \u003d DateRange.of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (startDate, endDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ReportCommandTest() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ReportCommand(dr),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "              ReportCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(ReportCommand.MESSAGE_SUCCESS, startDate, endDate), model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void needToSaveCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert(!new ReportCommand(dr).needToSaveCommand());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 48
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/TransactionsCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class TransactionsCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate startDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate endDate \u003d LocalDate.of(2020, 2, 20);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DateRange dr \u003d DateRange.of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (startDate, endDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    TransactionsCommandTest() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ReportCommand(dr),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                ReportCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(ReportCommand.MESSAGE_SUCCESS, startDate, endDate), model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void needToSaveCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert (!new ReportCommand(dr).needToSaveCommand());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 48
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * expectedValues} and only the last value is returned upon calling {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void assertArgumentPresent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix * */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertPreamblePresent("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String argsString \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void multimapContainsPrefixes() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String argsString \u003d \"SomePreambleString p/ pSlash argument -t dashT argument\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Supplied prefixes are subset of multimap key set"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsAll(pSlash));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsAll(dashT, pSlash));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertFalse(argMultimap.containsAll(pSlash, dashT, hatQ));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Supplied prefixes are equal to multimap key set"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsExact(dashT, pSlash));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertFalse(argMultimap.containsExact(pSlash));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertFalse(argMultimap.containsExact(pSlash, dashT, hatQ, unknownPrefix));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Any prefix is in multimap key set"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsAny(pSlash));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsAny(pSlash, dashT, hatQ));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void multimapSize() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String argsStringA \u003d \"SomePreambleString p/ pSlash argument -t dashT argument\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimapA \u003d ArgumentTokenizer.tokenize(argsStringA, pSlash, dashT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(3, argMultimapA.size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(2, argMultimapA.size(false));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String argsStringB \u003d \"SomePreambleString\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimapB \u003d ArgumentTokenizer.tokenize(argsStringB, pSlash, dashT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(1, argMultimapB.size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(0, argMultimapB.size(false));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10,
      "lsjxavier": 33,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/BudgetCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class BudgetCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private BudgetCommandParser parser \u003d new BudgetCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse_validArgs_returnsBudgetCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertParseSuccess(parser, \"set\", new BudgetCommand(budget, \"set\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setBudget_invalid() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"a\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void getArgString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"fasfa/\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 33
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void assertParseSuccess("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations outside of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the same path through the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * DeleteCommand, and therefore we test only one of them. The path variation for those two cases"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * occur inside the ParserUtil, and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"a\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 34
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // edited,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + NAME_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor \u003d new EditCanteenDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor \u003d new EditCanteenDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor \u003d new EditCanteenDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor \u003d new EditCanteenDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d new EditCanteenDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 229
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"     \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 36
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/FoodieBotParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FoodieBotParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final FoodieBotParser parser \u003d new FoodieBotParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d new CanteenBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(CanteenUtil.getAddCommand(canteen));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertEquals(new AddCommand(canteen), command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DeleteCommand command \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (DeleteCommand)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    DeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d new CanteenBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCanteenDescriptor descriptor \u003d new EditCanteenDescriptorBuilder(canteen).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EditCommand command \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                (EditCommand)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                EditCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        + CanteenUtil.getEditCanteenDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (FindCommand)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser.parseCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            MESSAGE_UNKNOWN_COMMAND, ("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 118
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ListCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_NAME \u003d \"T@eDeck\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#asian\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_NAME \u003d \"The Deck\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"western\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"asian\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            MESSAGE_INVALID_INDEX, ("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParseException.class, ("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 135
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ReportCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReportCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void getArgString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 14
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/TransactionsCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class TransactionsCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private TransactionsCommandParser parser \u003d new TransactionsCommandParser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse() throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*assertParseSuccess(parser, \"2020-02-20 2020-02-25\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new TransactionsCommand(DateRange.of("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        LocalDate.of(2020, 2, 20),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        LocalDate.of(2020, 2, 25))));*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void getArgString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"fasfa/\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 25
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/FoodieBotTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_NAME_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_TAG_ASIAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.DuplicateCanteenException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.CanteenBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FoodieBotTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(Collections.emptyList(), foodieBot.getCanteenList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodieBot.resetData(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot newData \u003d getTypicalFoodieBot();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(newData, foodieBot);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void resetData_withDuplicateCanteens_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen editedAlice \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new CanteenBuilder(DECK)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .withName(VALID_NAME_DECK)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .withTags(VALID_TAG_ASIAN)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cCanteen\u003e newCanteens \u003d Arrays.asList(DECK, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        FoodieBotStub newData \u003d new FoodieBotStub(newCanteens, new ArrayList\u003c\u003e(), new Budget());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(DuplicateCanteenException.class, () -\u003e foodieBot.resetData(newData));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void hasCanteen_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodieBot.hasCanteen(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void hasCanteen_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(foodieBot.hasCanteen(DECK));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void hasCanteen_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.addCanteen(DECK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(foodieBot.hasCanteen(DECK));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void hasCanteen_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.addCanteen(DECK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen editedAlice \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new CanteenBuilder(DECK)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .withName(VALID_NAME_DECK)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .withTags(VALID_TAG_ASIAN)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(foodieBot.hasCanteen(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void getCanteenList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            UnsupportedOperationException.class, () -\u003e foodieBot.getCanteenList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static class FoodieBotStub implements ReadOnlyFoodieBot {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private final ObservableList\u003cCanteen\u003e canteens \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private final ObservableList\u003cStall\u003e stalls \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private final ObservableList\u003cFood\u003e favorites \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        private Budget budget;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        FoodieBotStub(Collection\u003cCanteen\u003e canteens, Collection\u003cStall\u003e stalls, Budget budget) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.canteens.setAll(canteens);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.stalls.setAll(stalls);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cCanteen\u003e getCanteenList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return canteens;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cStall\u003e getStallList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return stalls;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cFood\u003e getFavoriteList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return favorites;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public Budget getBudget() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return budget;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 127,
      "lsjxavier": 10,
      "ignatiusong": 7
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.NUSFLAVORS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.FoodieBotBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(new FoodieBot(), new FoodieBot(modelManager.getFoodieBot()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userPrefs.setFoodieBotFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userPrefs.setFoodieBotFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCanteen(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(modelManager.hasCanteen(DECK));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.addCanteen(DECK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(modelManager.hasCanteen(DECK));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e modelManager.getFilteredCanteenList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot foodieBot \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new FoodieBotBuilder().withCanteen(DECK).withCanteen(NUSFLAVORS).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot differentFoodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager \u003d new ModelManager(foodieBot, userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(foodieBot, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFoodieBot, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String[] keywords \u003d DECK.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.updateFilteredCanteenList("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodieBot, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        Predicate\u003cCanteen\u003e showAllPredicate \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SHAUNGOH97"
        },
        "content": "        modelManager.updateFilteredCanteenList(showAllPredicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        differentUserPrefs.setFoodieBotFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodieBot, differentUserPrefs)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 31,
      "SHAUNGOH97": 4,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFoodieBotFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/canteen/BlockTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class BlockTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Block(new Name(null)));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Block(new Name(invalidName)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void isValidBlock() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Block.isValidBlock(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(Name.isValidName(\"com1*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"pgpr\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"1\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"com1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"COM1\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"Nus Flavors\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 39
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/canteen/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.CanteenBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"Deck\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d new CanteenBuilder().withNearestBlock(\"Deck NusFlavors\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(predicate.test(canteen));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Frontier\", \"CentralSquare\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(predicate.test(new CanteenBuilder().withNearestBlock(\"Frontier CentralSquare\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"PGPRaircon\", \"Platypus\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(predicate.test(new CanteenBuilder().withNearestBlock(\"PGPRaircon TheDeck\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"fInEFood\", \"FlAvors\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(predicate.test(new CanteenBuilder().withNearestBlock(\"FineFood Flavors\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(predicate.test(new CanteenBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(predicate.test(new CanteenBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            predicate.test("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new CanteenBuilder()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    .withName(\"Alice\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 30,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/canteen/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/canteen/UniqueCanteenListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_TAG_ASIAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.NUSFLAVORS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.CanteenNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.DuplicateCanteenException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.CanteenBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class UniqueCanteenListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final UniqueCanteenList uniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(uniqueCanteenList.contains(DECK));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(uniqueCanteenList.contains(DECK));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen editedCanteen \u003d new CanteenBuilder(DECK).withTags(VALID_TAG_ASIAN).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(uniqueCanteenList.contains(editedCanteen));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add_duplicateCanteen_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(DuplicateCanteenException.class, () -\u003e uniqueCanteenList.add(DECK));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen_nullTargetCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.setCanteen(null, DECK));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen_nullEditedCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.setCanteen(DECK, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen_targetCanteenNotInList_throwsCanteenNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            CanteenNotFoundException.class, () -\u003e uniqueCanteenList.setCanteen(DECK, DECK));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen_editedCanteenIsSameCanteen_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.setCanteen(DECK, DECK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen_editedCanteenHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen editedDeck \u003d new CanteenBuilder(DECK).withTags(VALID_TAG_ASIAN).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.setCanteen(DECK, editedDeck);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueCanteenList.add(editedDeck);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen_editedCanteenHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.setCanteen(DECK, NUSFLAVORS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueCanteenList.add(NUSFLAVORS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen_editedCanteenHasNonUniqueIdentity_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(NUSFLAVORS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            DuplicateCanteenException.class, ("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueCanteenList.setCanteen(DECK, NUSFLAVORS));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_personDoesNotExist_throwsCanteenNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(CanteenNotFoundException.class, () -\u003e uniqueCanteenList.remove(DECK));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_existingCanteen_removesCanteen() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.remove(DECK);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteen_nullUniqueCanteenList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueCanteenList.setCanteens((UniqueCanteenList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteens_uniqueCanteenList_replacesOwnListWithProvidedUniqueCanteenList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueCanteenList.add(NUSFLAVORS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.setCanteens(expectedUniqueCanteenList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteens_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueCanteenList.setCanteens((List\u003cCanteen\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteens_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cCanteen\u003e personList \u003d Collections.singletonList(NUSFLAVORS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.setCanteens(personList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueCanteenList.add(NUSFLAVORS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setCanteens_listWithDuplicateCanteens_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cCanteen\u003e listWithDuplicateCanteens \u003d Arrays.asList(DECK, DECK);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            DuplicateCanteenException.class, ("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueCanteenList.setCanteens(listWithDuplicateCanteens));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueCanteenList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 177
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/food/FoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Food(null, 6,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"1 Meat, 1 Pasta, 2 Sides\", \"ComboSet.png\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                1, \"Nus Flavors\", \"Western\", getTagSet(\"1\")));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* assertThrows(NullPointerException.class, () -\u003e new Food(\"Chicken Chop\", 0, \"1 Meat,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        1 Pasta, 2 Sides\", \"ComboSet.png\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                1, \"Nus Flavors\", \"Western\", getTagSet(\"1\"))); */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 22
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonAdaptedCanteenTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.storage.JsonAdaptedCanteen.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class JsonAdaptedCanteenTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_DISTANCE \u003d \"-12\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_NUMBEROFSTALLS \u003d \"-1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_BLOCKNAME \u003d \"home\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_NAME \u003d DECK.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DECK.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_validCanteenDetails_returnsCanteen() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedCanteen canteen \u003d new JsonAdaptedCanteen(DECK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertEquals(DECK, canteen.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedCanteen canteen \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonAdaptedCanteen(INVALID_NAME, \"0\", \"0\", \"deck.jpg\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"\", \"deck.jpg\", \"\", VALID_TAGS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, canteen::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedCanteen canteen \u003d new JsonAdaptedCanteen(null, \"0\", \"0\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"\", \"\", \"deck.jpg\", \"\", VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, canteen::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_invalidDistance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedCanteen canteen \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonAdaptedCanteen(VALID_NAME, INVALID_DISTANCE, \"0\", \"The Deck\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"\", \"deck.jpg\", \"\", VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // String expectedMessage \u003d Distance.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // assertThrows(IllegalValueException.class, expectedMessage, canteen::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 58
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonAdaptedFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.storage.JsonAdaptedStall.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(\"Chicken Chop\", \"5\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"is delicious\", \"ComboSet.png\", \"9\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Nus Flavors\", \"Western\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertEquals(WESTERN, food.toModelType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(null, \"5\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"is delicious\", \"ComboSet.png\", \"9\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Nus Flavors\", \"Western\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 29
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonAdaptedStallTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.storage.JsonAdaptedStall.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalStalls.MUSLIM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class JsonAdaptedStallTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_CANTEEN_NAME \u003d DECK.getName().toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_validStallDetails_returnsStall() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedStall stall \u003d new JsonAdaptedStall(\"Muslim\", \"The Deck\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"5\", \"muslim.png\", \"muslim\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"$\", \"0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(MUSLIM, stall.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //        JsonAdaptedStall stall \u003d new JsonAdaptedStall(\"T@iwanese\", DECK.toString(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //            \"5\", \"muslim.png\", \"asian\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //            \"$\", \"0\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //        assertThrows(IllegalValueException.class, expectedMessage, stall::toModelType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedStall stall \u003d new JsonAdaptedStall(null, DECK.toString(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"5\", \"muslim.png\", \"asian\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"$\", \"0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, stall::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 44
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonFoodieBotStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.NUSFLAVORS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class JsonFoodieBotStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonFoodieBotStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFoodieBot\u003e readAddressBook(String filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new JsonFoodieBotStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .readFoodieBot(addToTestDataPathIfNotNull(filePath), \"Canteen\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            DataConversionException.class, ("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            DataConversionException.class, ("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //   @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //   public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //       assertThrows("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //               DataConversionException.class,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //               () -\u003e readAddressBook(\"invalidAndValidCanteenFoodieBot.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //   }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot original \u003d getTypicalFoodieBot();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonFoodieBotStorage jsonAddressBookStorage \u003d new JsonFoodieBotStorage(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        jsonAddressBookStorage.saveFoodieBot(original, \"Canteen\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ReadOnlyFoodieBot readBack \u003d jsonAddressBookStorage.readFoodieBot(\"Canteen\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(original, new FoodieBot(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        original.removeCanteen(NUSFLAVORS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        original.addCanteen(NUSFLAVORS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        jsonAddressBookStorage.saveFoodieBot(original, \"Canteen\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readFoodieBot(\"Canteen\").get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(original, new FoodieBot(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //original.addCanteen(DECK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        jsonAddressBookStorage.saveFoodieBot(original); // file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readFoodieBot(\"Canteen\").get(); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(original, new FoodieBot(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void saveAddressBook(ReadOnlyFoodieBot addressBook, String filePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonFoodieBotStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .saveFoodieBot(addressBook, addToTestDataPathIfNotNull(filePath), \"Canteen\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new FoodieBot(), null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 116
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonSerializableFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableFoodTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonSerializableFoodieBotTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.TypicalCanteens;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class JsonSerializableFoodieBotTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFoodieBotTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Path TYPICAL_CANTEENS_FILE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"typicalCanteensFoodieBot.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_typicalCanteensFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonSerializableFoodieBot dataFromFile \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            JsonUtil.readJsonFile(TYPICAL_CANTEENS_FILE, JsonSerializableFoodieBot.class)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot foodieBotFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot typicalCanteensFoodieBot \u003d TypicalCanteens.getTypicalFoodieBot();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(foodieBotFromFile, typicalCanteensFoodieBot);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_PERSON_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE, JsonSerializableAddressBook.class)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                IllegalValueException.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 56
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonSerializableStallTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableStallTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_duplicateStall() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(\"Chicken Chop\", \"5\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"is delicious\", \"ComboSet.png\", \"9\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Nus Flavors\", \"Western\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 14
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        userPrefs.setFoodieBotFilePath(Paths.get(\"foodiebot.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 16,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonFoodieBotStorage addressBookStorage \u003d new JsonFoodieBotStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot original \u003d getTypicalFoodieBot();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        storageManager.saveFoodieBot(original, \"Canteen\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ReadOnlyFoodieBot retrieved \u003d storageManager.readFoodieBot(\"Canteen\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(original, new FoodieBot(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotNull(storageManager.getCanteensFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 12,
      "lsjxavier": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception. This is a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * consistency with our custom {@link #assertThrows(Class, String, Executable)} method. To"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * standardize API calls in this project, users should use this method instead of {@link"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * expectedMessage}. If there\u0027s no need for the verification of the exception\u0027s error message,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * call {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Class\u003c? extends Throwable\u003e expectedType,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Executable executable) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 37
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/CanteenBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A utility class to help with building Canteen objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class CanteenBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"The Deck\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final int DEFAULT_NUMBEROFSTALLS \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final int DEFAULT_DISTANCE \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_BLOCKNAME \u003d \"Kent Ridge MRT\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_IMAGENAME \u003d \"deck.jpg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_DIRECTIONSIMAGENAME \u003d \"com1_deck.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_DIRECTIONS \u003d \"This is a sample text\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private int numberOfStalls;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private int distance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String blockName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String canteenImageName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String directionsImageName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String directions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        numberOfStalls \u003d DEFAULT_NUMBEROFSTALLS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        distance \u003d DEFAULT_DISTANCE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        blockName \u003d DEFAULT_BLOCKNAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteenImageName \u003d DEFAULT_IMAGENAME;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        directionsImageName \u003d DEFAULT_DIRECTIONSIMAGENAME;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        directions \u003d DEFAULT_DIRECTIONS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Initializes the CanteenBuilder with the data of {@code canteenToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder(Canteen canteenToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        name \u003d canteenToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        numberOfStalls \u003d canteenToCopy.getNumberOfStalls();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        distance \u003d canteenToCopy.getDistance();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        blockName \u003d canteenToCopy.getBlockName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        directionsImageName \u003d canteenToCopy.getDirectionImageName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteenImageName \u003d canteenToCopy.getCanteenImageName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(canteenToCopy.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code Name} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder withName(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code distance} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder withDistance(int distance) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.distance \u003d distance;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code blockName} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder withNearestBlock(String blockName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.blockName \u003d blockName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code imageName} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder withImage(String imageName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenImageName \u003d imageName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code imageName} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder withDirectionsImage(String directionsImageName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.directionsImageName \u003d directionsImageName;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code directions} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder withDirections(String directions) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.directions \u003d directions;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Canteen} that we are"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code numberOfStalls} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenBuilder withNumberOfStalls(int numberOfStalls) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.numberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates the canteen object. */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Canteen build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new Canteen(name, numberOfStalls, distance, blockName, directionsImageName,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                directions, tags, canteenImageName, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 130,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/CanteenUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EditCommand.EditCanteenDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A utility class for Canteen."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class CanteenUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the part of command string for the given {@code Canteen}\u0027s details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static String getCanteenDetails(Canteen canteen) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        sb.append(PREFIX_NAME + canteen.getName().fullName + \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteen.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the part of command string for the given {@code EditCanteenDescriptor}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static String getEditCanteenDescriptorDetails(EditCanteenDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .getName()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 44
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/EditCanteenDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A utility class to help with building EditCanteenDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class EditCanteenDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private EditCommand.EditCanteenDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EditCanteenDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor \u003d new EditCommand.EditCanteenDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EditCanteenDescriptorBuilder(EditCommand.EditCanteenDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditCanteenDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EditCanteenDescriptorBuilder(Canteen canteen) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor \u003d new EditCommand.EditCanteenDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor.setTags(canteen.getTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EditCanteenDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EditCanteenDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public EditCommand.EditCanteenDescriptor build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 56
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/FoodieBotBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A utility class to help with building FoodieBot objects. Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * {@code FoodieBot ab \u003d new FoodieBotBuilder().withCanteen(\"The Deck\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FoodieBotBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FoodieBot foodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBotBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBotBuilder(FoodieBot foodieBot) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.foodieBot \u003d foodieBot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Adds a new {@code Canteen} to the {@code FoodieBot} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBotBuilder withCanteen(Canteen canteen) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.addCanteen(canteen);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBot build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 33
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String.format("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"{%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"  }%n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"}\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/StallBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A utility class to help with building Stall objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class StallBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Taiwanese\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_CANTEEN_NAME \u003d \"The Deck\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final int DEFAULT_STALL_NUMBER \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_CUISINE \u003d \"muslim\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_STALL_IMAGE \u003d \"muslim.png\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DEFAULT_OVERALL_PRICERATING \u003d \"$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final int DEFAULT_IS_FAVORITE \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String canteenName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private int stallNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String stallImageName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String cuisine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String overallPriceRating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private int favorite;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d DEFAULT_CANTEEN_NAME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallNumber \u003d DEFAULT_STALL_NUMBER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallImageName \u003d DEFAULT_STALL_IMAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.cuisine \u003d DEFAULT_CUISINE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.overallPriceRating \u003d DEFAULT_OVERALL_PRICERATING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favorite \u003d DEFAULT_IS_FAVORITE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Initializes the StallBuilder with the data of {@code stallToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder(Stall stallToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        name \u003d stallToCopy.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d stallToCopy.getCanteenName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallNumber \u003d stallToCopy.getStallNumber();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallImageName \u003d stallToCopy.getStallImageName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.cuisine \u003d stallToCopy.getCuisine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.overallPriceRating \u003d stallToCopy.getOverallPriceRating();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favorite \u003d stallToCopy.getFavorite();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code Name} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code canteenName} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder withCanteenName(String canteenName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.canteenName \u003d canteenName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code stallNumber} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder withStallNumber(int stallNumber) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallNumber \u003d stallNumber;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code stallImageName} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder withStallImageName(String stallImageName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.stallImageName \u003d stallImageName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code cuisine} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder withCuisine(String cuisine) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code overallPriceRating} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder withOverallPriceRating(String overallPriceRating) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.overallPriceRating \u003d overallPriceRating;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the {@code favorite} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder withFavorite(int favorite) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favorite \u003d favorite;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Creates the stall object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Stall build() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new Stall(name, canteenName, stallNumber, stallImageName, cuisine,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            overallPriceRating, favorite, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 116,
      "ignatiusong": 3
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/StallUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EditCommand.EditCanteenDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A utility class for Canteen."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class StallUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the part of command string for the given {@code Canteen}\u0027s details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static String getCanteenDetails(Canteen canteen) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        sb.append(PREFIX_NAME + canteen.getName().fullName + \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteen.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the part of command string for the given {@code EditCanteenDescriptor}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static String getEditCanteenDescriptorDetails(EditCanteenDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .getName()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 44
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path. Creates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCanteenList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCanteenList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static Canteen getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFilteredCanteenList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalBudgets.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** A utility class containing a list of typical budgets. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class TypicalBudgets {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_A \u003d LocalDate.of(2010, 12, 31);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_B \u003d LocalDate.of(2018, 1, 20);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_C \u003d LocalDate.of(2019, 2, 28);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_D \u003d LocalDate.of(2020, 2, 29);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_E \u003d LocalDate.of(2020, 3, 8);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_F \u003d LocalDate.of(2020, 7, 31);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_G \u003d LocalDate.of(2021, 3, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_H \u003d LocalDate.of(2022, 8, 18);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_A \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_A);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_B \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_B);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_C \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_C);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_D \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_D);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_E \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_E);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_F \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_F);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_G \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_G);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_H \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_H);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 28
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalCanteens.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class TypicalCanteens {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COM1_TO_DECK_DIRECTIONS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"1. From Com1 entrance main entrance (facing car park), turn right\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"2. Walk up the steps \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String COM1_TO_NUSFLAVORS_DIRECTIONS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"1. From Com1, take shuttle D2 to Utown\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"2. Follow the path to Stephen Riady Centre \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"3. Walk straight and the canteen appears to your right\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Canteen DECK \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new CanteenBuilder().withName(\"The Deck\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withDistance(800).withNumberOfStalls(2).withNearestBlock(\"COM1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withImage(\"deck.jpg\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withDirectionsImage(\"com1_deck.png\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withDirections(COM1_TO_DECK_DIRECTIONS)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withTags(\"asian\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Canteen NUSFLAVORS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new CanteenBuilder().withName(\"Nus Flavors\").withNumberOfStalls(2)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withDistance(3200).withNearestBlock(\"COM1\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withImage(\"utown.jpg\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withDirectionsImage(\"utown_flavors.png\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withDirections(COM1_TO_NUSFLAVORS_DIRECTIONS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .withTags(\"muslim\", \"asian\", \"western\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String KEYWORD_MATCHING_DECK \u003d \"Deck\"; // A keyword that matches DECK"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private TypicalCanteens() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an {@code FoodieBot} with all the typical canteens."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static FoodieBot getTypicalFoodieBot() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot ab \u003d new FoodieBot();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (Canteen canteen : getTypicalCanteens()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ab.addCanteen(canteen);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static List\u003cCanteen\u003e getTypicalCanteens() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DECK, NUSFLAVORS));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 58
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalDateRanges.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Utility class with date ranges. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class TypicalDateRanges {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_YEAR_2020 \u003d createDateRange("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 1, 1),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 12, 31));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_MONTH_MAY_2020 \u003d createDateRange("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 5, 1),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 5, 31));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_SHORT \u003d createDateRange("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 5, 3),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 7, 9));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_LONG \u003d createDateRange("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 1, 1),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2150, 3, 3));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_START_IN_DISTANT_FUTURE \u003d createDateRange("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2150, 1, 1),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2150, 3, 3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_END_TODAY \u003d createDateRange("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(1999, 12, 31),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.now());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Creates a date range */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createDateRange(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.of(start, end);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 44
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalStalls.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A utility class containing a list of {@code Stall} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class TypicalStalls {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Stall MUSLIM \u003d new StallBuilder().withName(\"Muslim\").withCanteenName(\"The Deck\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        .withStallNumber(5).withStallImageName(\"muslim.png\").withCuisine(\"muslim\").withOverallPriceRating(\"$\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        .withFavorite(0)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Stall TAIWANESE \u003d new StallBuilder().withName(\"Taiwanese\").withCanteenName(\"Nus Flavors\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        .withStallNumber(5).withStallImageName(\"yongtaufoo.png\").withCuisine(\"asian\").withOverallPriceRating(\"$\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        .withFavorite(1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String KEYWORD_MATCHING_DECK \u003d \"Deck\"; // A keyword that matches DECK"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private TypicalStalls() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an {@code FoodieBot} with all the typical canteens."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static FoodieBot getTypicalFoodieBot() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot ab \u003d new FoodieBot();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (Stall stall : getTypicalStalls()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ab.addStall(stall);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static List\u003cStall\u003e getTypicalStalls() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MUSLIM, TAIWANESE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 46
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/CanteenCardTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class CanteenCardTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/CanteenListPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class CanteenListPanelTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/CommandBoxTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class CommandBoxTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/DirectionsToCanteenPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class DirectionsToCanteenPanelTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void fillView() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 14
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/FoodListPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FoodListPanelTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * A test object which can be constructed via an FXML file. Unlike other JavaFX classes, this class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/UiManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class UiManagerTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void start() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void showAlertDialogAndWait() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 15
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            AssertionError.class, ("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * UiPart used for testing. It should only be used with invalid FXML files or the valid file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 22,
      "-": 100
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import seedu.foodiebot.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cfx:root type\u003d\"seedu.foodiebot.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 5
    }
  }
]
